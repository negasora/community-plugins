[
  {
    "api": [
      "python3"
    ],
    "author": "Erwan Grelet",
    "dependencies": "miasm\nthemida-unmutate==0.2.0",
    "description": "Static deobfuscator for Themida, WinLicense and Code Virtualizer 3.x's mutation-based obfuscation.",
    "installinstructions": {},
    "lastUpdated": 1722202857,
    "license": {
      "name": "GPL-3.0-or-later",
      "text": ""
    },
    "longdescription": "# themida-unmutate-bn (v0.3.0)\n\nAuthor: **Erwan Grelet**\n\n_A Binary Ninja plugin to deobfuscate Themida, WinLicense and Code Virtualizer 3.x's mutation-based obfuscation._\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n- 3164\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n- pip - miasm\n- pip - themida-unmutate\n\n## License\n\nThis plugin is released under a GPL-3.0 license.\n",
    "minimumbinaryninjaversion": 3164,
    "name": "themida-unmutate-bn",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7577e204-da9a-49b9-b9ae-92447262a1a2/versions/06a2e9e9-0f0d-4cc2-a644-e79ca6a92c1c/platforms/427/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7577e204-da9a-49b9-b9ae-92447262a1a2/versions/06a2e9e9-0f0d-4cc2-a644-e79ca6a92c1c/platforms/427/download?notrack=1",
    "path": "ergrelet_themidaunmutatebn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 32,
      "updated_at": "2024-07-28 21:40:57+00:00"
    },
    "projectUrl": "https://github.com/ergrelet/themida-unmutate-bn",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.3.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Leandro Froes",
    "dependencies": "",
    "description": "A small plugin that provides an user-friendly way to navigate between functions and their references.",
    "installinstructions": {},
    "lastUpdated": 1720549788,
    "license": {
      "name": "CC BY 3.0",
      "text": ""
    },
    "longdescription": "# Binary Ninja Interactive Functions List (IFL) Plugin\n\nLicense: CC-BY (https://creativecommons.org/licenses/by/3.0/)\n\nThis is a Binary Ninja version of the [IDA IFL](https://github.com/hasherezade/ida_ifl) plugin written by hasherezade.\n\nILF is a small plugin with the goal to provide user-friendly way to navigate between functions and their references.<br/>\nAdditionally, it allows to import reports generated by i.e. [PE-sieve](https://github.com/hasherezade/pe-sieve/wiki/1.-FAQ) into Binary Ninja. Supports:\n+ [`.tag` format](https://github.com/hasherezade/tiny_tracer/wiki/Using-the-TAGs-with-disassemblers-and-debuggers) (generated by [PE-sieve](https://github.com/hasherezade/pe-sieve), [Tiny Tracer](https://github.com/hasherezade/tiny_tracer), [PE-bear](https://github.com/hasherezade/pe-bear-releases))\n+ [`.imports.txt` format](https://github.com/hasherezade/pe-sieve/wiki/4.3.-Import-table-reconstruction-(imp)) (generated by [PE-sieve](https://github.com/hasherezade/pe-sieve))\n\nExamples\n==\n\n![](https://github.com/leandrofroes/bn_ifl/blob/main/img/example1.png?raw=True)\n\n![](https://github.com/leandrofroes/bn_ifl/blob/main/img/example2.png?raw=True)\n",
    "minimumbinaryninjaversion": 4958,
    "name": "IFL",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/980eee35-72ec-4573-87a8-9d2beb6f6994/versions/dc8df448-4e31-4912-9720-de3765d4f500/platforms/433/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/980eee35-72ec-4573-87a8-9d2beb6f6994/versions/dc8df448-4e31-4912-9720-de3765d4f500/platforms/433/download?notrack=1",
    "path": "leandrofroes_bn_ifl",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 24,
      "updated_at": "2024-07-09 18:29:48+00:00"
    },
    "projectUrl": "https://github.com/leandrofroes/bn_ifl",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Elykdeer",
    "dependencies": "",
    "description": "Instruction Slices, IL Hierarchy Slices, Dominance Slices, and other tools for devs. Requires Tant\u014d.",
    "installinstructions": {},
    "lastUpdated": 1741888803,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024-2025 Elykdeer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Dev Tools for Tant\u014d\nAuthor: **ElykDeer**\n\n## Description:\nInstruction Slices, IL Hierarchy Slices, Dominance Slices, and other tools for devs. Requires [Tant\u014d](https://github.com/Vector35/tanto).\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4.0.5336\n\n## License\n\nThis plugin has been released under the [MIT license](./license.txt).\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 5336,
    "name": "Dev Tools for Tant\u014d",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c0f08222-4b26-4532-8654-9d99a71ff4cb/versions/1b7cd802-86f1-4ceb-98ad-526dc2486332/platforms/301/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c0f08222-4b26-4532-8654-9d99a71ff4cb/versions/1b7cd802-86f1-4ceb-98ad-526dc2486332/platforms/301/download?notrack=1",
    "path": "ElykDeer_tantodevtools",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 2,
      "updated_at": "2025-03-13 18:00:03+00:00"
    },
    "projectUrl": "https://github.com/ElykDeer/tanto-devtools",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "rust"
    ],
    "author": "unknowntrojan",
    "dependencies": "",
    "description": "SigMaker style plugin",
    "installinstructions": {},
    "lastUpdated": 1740808382,
    "license": {
      "name": "AGPLv3",
      "text": "     GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
    },
    "longdescription": "# binja_coolsigmaker (stable channel)\n\n(**The dev branch now contains the version of the plugin for the binja development update channel.**)\n\n(**master/main will target stable.**)\n\nWe all know signature scanning can be extremely useful. Sadly, the two public offerings for Binja are either very slow, or crash extremely often.\n\nThis is why I wrote this plugin. It's a signature scanning and creating plugin for x86 (more archs are planned!), written in Rust. It's extremely fast, supports multiple signature styles, and works like a charm.\n\n[Blog Post](https://binary.ninja/2024/10/01/plugin-spotlight-coolsigmaker.html)\n\nIt supports 3 styles of signatures. Or 4, if you want to be specific.\n\nTo create a signature, select the instruction you want the signature to point to, then go to `Plugins->CSM - Create Signature`.\n\nThe signature is checked for uniqueness within all executable segments of the binary. `.data` is not considered, so make sure your signature scanning implementation also ignores non-code sections.\n\nTo find a signature, copy the signature to your clipboard in the format you selected in the configuration, and go to `Plugins->CSM - Find Signature`. All occurrences will be in your log.\n\nThese are the settings:\n\n![settings](settings.png)\n\nThis is how it looks to create a signature, then scan for it:\n\n![pattern creation and scanning](sig.png)\n\n## How to install\n\n1. Download the platform-appropriate binary from release section\n2. Place the binary in your Binary Ninja installation's plugin folder\n\nOnce GitHub Actions are set up and a loader plugin has been written, you will be able to install the plugin via the official plugin manager.\n\n## Compiling yourself\n\nThis project requires the nightly channel of Rust.\n\nCheck the blog post above for a step-by-step.\n\nCheckout the branch of the repository matching the channel of binja you are building for.\n\nYou are now one `cargo b` away from greatness.\n",
    "minimumbinaryninjaversion": 6135,
    "name": "CoolSigMaker",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/bf1c8ba5-df66-40a8-8908-68ab630cf763/versions/0862d0a9-202c-4200-a8f6-b02e64b48c26/platforms/391/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/bf1c8ba5-df66-40a8-8908-68ab630cf763/versions/0862d0a9-202c-4200-a8f6-b02e64b48c26/platforms/391/download?notrack=1",
    "path": "unknowntrojan_binja_coolsigmaker",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 70,
      "updated_at": "2025-03-01 05:53:02+00:00"
    },
    "projectUrl": "https://github.com/unknowntrojan/binja_coolsigmaker",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.00"
  },
  {
    "api": [
      "python3"
    ],
    "author": "amtal",
    "dependencies": "pymupdf>=1.19.0\n\n",
    "description": "PDF Reference Opcodes Or reGisters. Like IDA's FRIEND/AMIE or Ghidra's \"Processor Manual...\" right-click menu.",
    "installinstructions": {},
    "lastUpdated": 1719239477,
    "license": {
      "name": "AGPL-3.0",
      "text": "Copyright 2024 amtal\n\n                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>."
    },
    "longdescription": "P**D**F **R**eference **O**pcodes **O**r re**G**isters.  Like IDA's [FRIEND](https://github.com/alexhude/FRIEND#readme)/[AMIE](https://github.com/NeatMonster/AMIE) or Ghidra's \"Processor Manual...\" right-click menu. \n\n![](https://raw.githubusercontent.com/amtal/droog/master/img/option-B.droog.jpg)\n\n# Usage\n\nThis is a glorified PDF search for tokens that show up in tables of contents.\n\nSelect a token like an instruction or a register, and \"Plugins\" -> \"DROOG\" -> \"Search Reference Headings...\" will show pages from PDFs available for the current architecture. Click an image to open the PDF at that page in your browser.\n\nFor unfamiliar architectures, bind the search to a hotkey. There's also a command to peek at table of contents headings in the status bar for quickly reviewing mnemonics.\n\n![](https://raw.githubusercontent.com/amtal/droog/master/img/usage.png)\n\nIf you're dealing with raw coprocessor operand values or unnamed MMIO offsets, you'll need to:\n\n1. Dig up the *right* PDFs for your SoC or peripheral. Rip relevant tables into a Python `dict`.\n2. Bulk-name relevant values or instructions with a script. (You can use comments as a single \"token\".)\n\n# Setup\n\nInstead of hardcoding documentation, local reference manuals are indexed with [MuPDF](https://mupdf.com/) (hence AGPLv3 licensing) and opened directly.\n\nYou can dump your PDF collection in `droog/manuals/{arch}/*.pdf`, or include them anywhere in your plugin's directory structure if it's installed to the same plugin folder as DROOG and predictably named. Endianness and 32/64-bit indicators on `arch` are stripped off with a regex, so `aarch64` is in `manuals/aarch/*.pdf` and `x86_64` lives in `manuals/x86/*.pdf`. It's weird but simplifies dealing with MIPS/ARMv7/etc.\n\nIf you're reversing ancient fauna based on scans with beautiful typesetting but terrible OCR and no table of contents, you can edit in your own ToC with MuPDF's [Document.set_toc()](https://pymupdf.readthedocs.io/en/latest/document.html#Document.set_toc). Check the `*.idx` files in the [Ghidra repo](https://github.com/NationalSecurityAgency/ghidra) in case American taxpayers already indexed one for you!",
    "minimumbinaryninjaversion": 2800,
    "name": "droog",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a07cd54c-42ee-4595-aec7-3fe213b43b2b/versions/e225af78-85b1-4718-bb06-1453feef7231/platforms/445/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a07cd54c-42ee-4595-aec7-3fe213b43b2b/versions/e225af78-85b1-4718-bb06-1453feef7231/platforms/445/download?notrack=1",
    "path": "amtal_droog",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 2,
      "updated_at": "2024-06-24 14:31:17+00:00"
    },
    "projectUrl": "https://github.com/amtal/droog",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.5"
  },
  {
    "api": [
      "python3"
    ],
    "author": "BinSync Team",
    "dependencies": "binsync>=4.6.0",
    "description": "Adds support for cross-decompiler collab in the BinSync supported decompilers.",
    "installinstructions": {},
    "lastUpdated": 1739340316,
    "license": {
      "name": "BSD 2-clause",
      "text": ""
    },
    "longdescription": "\n## BinSync\n\n<p align=\"center\">\n   <img src=\"https://i.imgur.com/qdesKpg.png\" style=\"width: 10%;\" alt=\"BinSync Logo\"/>\n</p>\n\nBinSync is a decompiler collaboration tool built on the Git versioning system to enable fined-grained reverse\nengineering collaboration regardless of decompiler. BinSync is built by [mahaloz](https://github.com/mahaloz), \nthe [angr](https://angr.io) team, and the [SEFCOM](https://sefcom.asu.edu) research lab. It's also due\nin large part to its use by the [Shellphish](https://shellphish.net) hacking team. \n\n## Binary Ninja\nPlease read our [Quickstart Docs](https://binsync.net/docs/home) to learn how to use BinSync effectively. \nYou can go straight to install verification since you've installed it already. \n\n![Demo](https://i.imgur.com/GVnysnb.png)\n\n",
    "minimumbinaryninjaversion": 1200,
    "name": "BinSync",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/35b19ea9-d4c7-45b0-b76f-f294557dc70f/versions/bce90be0-809a-49ce-b937-d6de61206e07/platforms/601/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/35b19ea9-d4c7-45b0-b76f-f294557dc70f/versions/bce90be0-809a-49ce-b937-d6de61206e07/platforms/601/download?notrack=1",
    "path": "binsync_binsync",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 648,
      "updated_at": "2025-02-12 06:05:16+00:00"
    },
    "projectUrl": "https://github.com/binsync/binsync",
    "subdir": "binsync/stub_files",
    "type": [
      "sync"
    ],
    "version": "5.2.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "ImNotAVirus",
    "dependencies": "",
    "description": "Find Delphi VMTs and generate their structures",
    "installinstructions": {},
    "lastUpdated": 1645469959,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 ImNotAVirus\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Delphi VMT Analyzer (v0.1.2)\n\nAuthor: **ImNotAVirus**\n\n_Find Delphi VMTs and generate their structures_\n\n## Description:\n\nThis plugin is intended to facilitate the revese engineering of binaries written in Delphi.\n\nFor that, it:\n\n- Finds the Virtual Method Table (VMT) of Delphi classes\n- Creates a structure for each VMT (class name, instance size, virtual methods, etc...)\n- Creates a tag for each VMT in order to locate them more easily\n\n**Warning**: This plugin currently only supports 32bits PE (Portable Executable). For more details on upcoming features, you can refer to [TODO.md](./TODO.md).\n\n![example](./assets/example.png)\n\n## Installation Instructions\n\n### Darwin\n\nNo special instructions, package manager is recommended\n\n### Windows\n\nNo special instructions, package manager is recommended\n\n### Linux\n\nNo special instructions, package manager is recommended\n\n## Examples\n\nThis repo contains different examples to show how the plugin works in scripting mode.  \nYou can view them [here](./examples).\n\n**Warning**: although DelphiNinja does not require dependencies, some examples may require dependencies.  \nFor more information, please refer to this [page](./examples/README.md).\n\n## Minimum Version\n\nThis plugin has been tested with the following minimum version of Binary Ninja:\n\n* release: N/A\n* dev: 2440\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 2440,
    "name": "Delphi VMT Analyzer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/48952169-f6b0-419b-9a53-f452c3396d27/versions/4e1fb0c4-60da-4e0b-90cc-36011555bd47/platforms/745/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/48952169-f6b0-419b-9a53-f452c3396d27/versions/4e1fb0c4-60da-4e0b-90cc-36011555bd47/platforms/745/download?notrack=1",
    "path": "ImNotAVirus_delphi_ninja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-02-21 18:59:19+00:00"
    },
    "projectUrl": "https://github.com/ImNotAVirus/delphi_ninja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "jepson2k, dannyp303",
    "dependencies": "",
    "description": "Supports loading .per files into Binary Ninja.",
    "installinstructions": {},
    "lastUpdated": 1734543538,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2024 permap\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "# Per Mapper (permap)\nAuthor: jepson2k, dannyp303\n\n_Supports loading .per files into Binary Ninja._\n\n## Description:\n\nSupports loading .per files into Binary Ninja. Very similar to [svdmap](https://github.com/Vector35/svdmap) as it was used as a template for implementing this plugin.\n\n## Usage\n\n1. Open binary in Binary Ninja\n2. Run `Import per info` command.\n3. Select Per file.\n4. New segments should now be automatically created for each peripheral along with the structure.\n\n### Disable Comments\n\nComments can be displayed poorly in some instances so if that is the case you can turn comments off.\n\nTo _disable_ comments set `PERMapper.enableComments` to **false**.\n\n## License\n\nThis plugin is released under a Apache-2.0 license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 4860,
    "name": "permap",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ce453cac-5554-4747-9f38-453f8dc841b0/versions/6c110001-c047-491c-8153-92bad6e3b2dc/platforms/331/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ce453cac-5554-4747-9f38-453f8dc841b0/versions/6c110001-c047-491c-8153-92bad6e3b2dc/platforms/331/download?notrack=1",
    "path": "redballoonsecurity_permap",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 1,
      "updated_at": "2024-12-18 17:38:58+00:00"
    },
    "projectUrl": "https://github.com/redballoonsecurity/permap",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Tim Blazytko",
    "dependencies": "",
    "description": "Automatically detect obfuscated code and other interesting code constructs",
    "installinstructions": {},
    "lastUpdated": 1741823831,
    "license": {
      "name": "GPL-2.0",
      "text": "Copyright 2023 Tim Blazytko\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>."
    },
    "longdescription": "# Obfuscation Detection (v2.2)\nAuthor: **Tim Blazytko**\n\n_Automatically detect obfuscated code and other interesting code constructs_\n\n## Description:\n\n_Obfuscation Detection_ is a Binary Ninja plugin to detect obfuscated code and interesting code constructs (e.g., state machines) in binaries. Given a binary, the plugin eases analysis by identifying code locations which might be worth a closer look during reverse engineering.\n\nBased on various heuristics, the plugin pinpoints functions that contain complex or uncommon code constructs. Such code constructs may implement\n\n* obfuscated code\n* state machines and protocols\n* C&C server communication\n* string decryption routines\n* cryptographic algorithms\n\nThe following blog posts provide more information about the underlying heuristics and demonstrate their use cases:\n\n* [Automated Detection of Control-flow Flattening](https://synthesis.to/2021/03/03/flattening_detection.html)\n* [Automated Detection of Obfuscated Code](https://synthesis.to/2021/08/10/obfuscation_detection.html)\n* [Statistical Analysis to Detect Uncommon Code](https://synthesis.to//2023/01/26/uncommon_instruction_sequences.html)\n* [Identification of API Functions in Binaries](https://synthesis.to/2023/08/02/api_functions.html)\n\nSome example use cases can be found in [examples](./examples). Furthermore, the REcon talk [\"Unveiling Secrets in Binaries using Code Detection Strategies\"](https://cfp.recon.cx/2023/talk/QD8UNJ/) demonstrates some use cases. The slides can be found [here](./presentation/recon23_code_detection.pdf); the recording can be found [here](https://www.youtube.com/watch?v=y95MNr2Xu-g).\n\n\n## Core Features\n\n* identifies interesting code constructs in large binaries\n* highlights disaligned instructions in Binary Ninja's graph view\n* efficient and architecture-agnostic implementation\n* runs as a background task\n* can be used in UI and headless mode\n\n\n## Installation\n\nThe tool can be installed using Binary Ninja's plugin manager.\n\nFor the headless version, follow these steps:\n\n```\ngit clone https://github.com/mrphrazer/obfuscation_detection.git\ncd obfuscation_detection\n\n# install obfuscation_detection\npip install .\n```\n\n\n## Usage\n\nThe plugin can be used in the user interface and in headless mode.\n\n\n### User Interface\n\nChoose the index tab `Plugins -> Obfuscation Detection` to run one or more detection heuristics in Binary Ninja's user interface:\n\n<p align=\"left\">\n<img alt=\"Plugin Menu\" src=\"imgs/plugin_menu.png\" width=\"500\"/>\n</p>\n\nThe results are displayed in the Log window:\n\n<p align=\"center\">\n<img alt=\"Binary Ninja Log\" src=\"imgs/plugin_results.png\"/>\n</p>\n\nBy clicking on the identified function addresses, Binary Ninja navigates to the selected function.\n\n\n### Headless\n\nTo use the plugin in headless mode, run [`scripts/detect_obfuscation.py`](scripts/detect_obfuscation.py):\n\n```\n$ python3 scripts/detect_obfuscation.py <binary>\n```\n\n\n## Detection Heuristics\n\nThe plugin implements various detection heuristics to detect different code constructs. In the following, we briefly describe the individual heuristics and explain their usage. \n\n### Large Basic Blocks\n\nThe large basic block heuristic identifies the top 10% of functions with the largest average number of instructions per basic block. It allows to detect\n\n* unrolled code\n* cryptographic implementations\n* initialization routines\n* arithmetic obfuscation / Mixed Boolean-Arithmetic\n\n### Complex Functions\n\nTo complex functions heuristic identifies the top 10% of functions with the most complex control-flow graphs (based on cyclomatic complexity). It allows to identify\n\n* complex dispatching routines and protocols\n* state machines\n* functions obfuscated with opaque predicates\n\n\n### Flattened Functions\n\nThe flattened function heuristic uses some graph-theoretic properties to identify functions implementing state machines. Usually, such state machines can be represented as switch statements that are dispatched in a loop. The heuristic allows to identify\n\n* network protocol dispatching\n* file parsing logic\n* C&C server communication / command dispatching\n* control-flow flattening\n\n\n### Uncommon Instruction Sequences\n\nThe uncommon instruction sequences heuristic performs a statistical analysis to identify the top 10% of functions whose code patterns deviate from a pre-computed ground truth. This way, the heuristic allows to identify\n\n* cryptographic implementations\n* intense usage of floating point arithmetic\n* arithmetic obfuscation / Mixed Boolean-Arithmetic\n* generic obfuscation patterns\n\n\n### Instruction Overlapping\n\nThe instruction overlapping heuristic identifies functions with disaligned instructions (instruction bytes are shared by two different instructions). The heuristic identifies\n\n* broken disassembly (e.g., data which is marked as code)\n* opaque predicates which jump into other instructions \n\nIf the heuristic is used in Binary Ninja's user interface, overlapping instructions are also highlighted in the graph view.\n\n\n### Most Called Functions\n\nThe heuristic for most called functions identifies the top 10% of functions with the largest number of calls from different functions. This way, the heuristic can identify\n\n* string decryption routines\n* library functions in statically linked binaries\n\n\n### High Loop Frequency\n\nThe heuristic identifies functions with a high number of loops. These kind of functions might implement\n\n* a complex parsing logic for structured data formats\n* intensive algorithmic computations\n\nThe heuristic also helps pinpointing potential performance bottlenecks.\n\n\n### Irreducible Loops\n\nThe heuristic identifies functions with rare and complex loop structures that typically suggest\n\n* aggressive compiler optimizations\n* hand-written assembly\n* usage of goto statements\n* obfuscated code\n\n\n### XOR Decryption Loops\n\nThe heuristic identifies functions which perform an XOR operation with a constant inside of a loop. This way, the heuristic can identify\n\n* string decryption routines\n* code decryption stubs\n* cryptographic implementations\n\n\n### Complex Arithmetic Expressions \n\nThe heuristic identifies functions in which the expressions have more than one arithmetic operation and one boolean operation simultaneously. This way, the heuristic can identify\n\n* mixed-boolean arithmetic obfuscation\n* initialization routine\n* cryptographic implementations\n\n\n## Utils\n\nContrary to the detection heuristics which target a wider scope of code, the plugin also implements various helpers which aim to identify functions with a narrower scope. In the following, we describe these helpers and explain their characteristics.\n\n\n### Entry Functions\n\nThis helper identifies functions without known callers. These functions might be \n\n* entry points in the binary\n* indirect jumps targets where the call hierarchy could not be recovered by the disassembler\n\n\n### Leaf Functions\n\nThis helper identifies functions that do not call other functions. These kinds of functions may, for example, be functions that\n\n* are outlined by the compiler to implement functionalities utilized across various code locations\n* are trampolines to other functions\n* are part of code obfuscation schemes (e.g., outlined computations for control-flow obfuscation)\n\n\n### Recursive Functions\n\nThis helper identifies recursive functions---functions that directly or indirectly call themselves. Recursive functions may indicate:\n\n* algorithmic implementations such as tree or graph traversal\n* obfuscated code designed to complicate static analysis\n* implementations of mathematical algorithms or complex parsing routines\n* potential stack overflow vulnerabilities due to deep recursion\n\n\n### Section Entropy\n\nThis helper evaluates the entropy of each section. Entropy is a statistical measure of randomness with values ranging between 0 and 8. Sections with an entropy close to 8 indicate a high degree of randomness and can hint at:\n\n* packed or compressed code\n* encrypted data or code\n* random data\n\n\n### RC4\n\nThis helper detects potential RC4 algorithm implementations by employing heuristic markers typically associated with RC4's Key Scheduling Algorithm (KSA) and Pseudo-Random Generation Algorithm (PRGA). RC4 is widely used in malware for purposes such as:\n\n* decrypting strings and other data payloads\n* obfuscating command and control (C&C) communications\n\n\n## Contact\n\nFor more information, contact [@mr_phrazer](https://twitter.com/mr_phrazer).\n\n",
    "minimumbinaryninjaversion": 2487,
    "name": "Obfuscation Detection",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/81e8fd93-0408-4fab-b1da-7c4f2e5cf129/versions/373ef0d7-49f7-4e83-a354-012a56bff18e/platforms/871/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/81e8fd93-0408-4fab-b1da-7c4f2e5cf129/versions/373ef0d7-49f7-4e83-a354-012a56bff18e/platforms/871/download?notrack=1",
    "path": "mrphrazer_obfuscation_detection",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2025-03-12 23:57:11+00:00"
    },
    "projectUrl": "https://github.com/mrphrazer/obfuscation_detection",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "2.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "EliseZeroTwo",
    "dependencies": "lz4>=3.1.0 ",
    "description": "Loader for common Nintendo Switch binaries",
    "installinstructions": {},
    "lastUpdated": 1595425782,
    "license": {
      "name": "ISC",
      "text": "Copyright 2020 EliseZeroTwo\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "# Switch-Binja-Loader\n### Author: **EliseZeroTwo**\n\nWork In Progress Binary Ninja Loader for common Nintendo Switch binaries\n\n![Image demoing SMO in Binja](https://github.com/EliseZeroTwo/Switch-Binja-Loader/blob/master/images/home.png)\n\n### Currently Supports\n- NSO\n- KIP\n\n## Credits\n- [ReSwitched for their nxo64.py loader](https://github.com/reswitched/loaders/blob/master/nxo64.py)\n- [Adubbz for his Ghidra Switch Loader](https://github.com/Adubbz/Ghidra-Switch-Loader)\n- [SwitchBrew](https://switchbrew.org/)\n\n## Installation Instructions\n\nInstall all needed packages from pip in requirements.txt (Windows and MacOS Binja ship with an embedded python, [read here on how the docs say to install pip packages](https://docs.binary.ninja/guide/plugins.html#installing-prerequisites), or what I reccomend doing is just changing the python interpreter to a system install of python3 in settings)\n### Windows\n\nClone this repository into `%APPDATA%/Binary Ninja/plugins/`\n\n### Darwin\n\nClone this repository into `~/Library/Application Support/Binary Ninja/plugins/`\n\n### Linux\n\nClone this repository into `~/.binaryninja/plugins/`\n## Minimum Version\n\nBinary Ninja v1200\n\n\n\n## License\n\nThis plugin is released under the [ISC license](https://github.com/EliseZeroTwo/Switch-Binja-Loader/blob/master/LICENSE.txt)\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Switch Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a6179c75-262c-47c6-aed3-6884eb70af1e/versions/42434436-1fc9-4ae6-93e9-2b3d313a5c19/platforms/1201/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a6179c75-262c-47c6-aed3-6884eb70af1e/versions/42434436-1fc9-4ae6-93e9-2b3d313a5c19/platforms/1201/download?notrack=1",
    "path": "EliseZeroTwo_SwitchBinjaLoader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-07-22 13:49:42+00:00"
    },
    "projectUrl": "https://github.com/EliseZeroTwo/Switch-Binja-Loader",
    "subdir": "",
    "type": [
      "binaryview",
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Martin Petran",
    "dependencies": "",
    "description": "Plugin to embed Ghidra Decompiler into Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1654662367,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2020 Martin Petran\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "This plugin allows you to enable a dock in the UI that will show a result of the Ghidra decompiler for the given function. There is basic syntax highlighting and renaming functions and variables in the Binary Ninja view is refleced in the Ghinja view as well. The plugin will prompt you for pointing it to the path of the `analyzeHeadless` file which is relevant for your operating system. When chosen it will automatically start ghidra decompilation whenever a new file is opened. The decompile results are stored in the `~/.ghinja_projects` folder.\n\n ![Sample](https://github.com/Martyx00/ghinja/blob/master/img/demo.gif?raw=true \"Sample\")\n\n **Available Hotkeys:**\n\n* ***N*** - When Ghinja window has focus you can use this hotkey to rename the variable that does not have equivalent in the Binary Ninja view. This function allows you to rename anything, however all labels (functions, variables, etc.) that are are avialable in Binary Ninja view should be renamed there rather than in Ghinja as that is string replace only.\n* ***F*** - When Ghinja window has focus you can use this hotkey to perform a simple text seatch in the decompiler result.\n",
    "minimumbinaryninjaversion": 3233,
    "name": "Ghinja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/6f55a924-1e7a-4e84-ac1e-cc26104435d8/versions/0f97325c-8163-41fd-991b-5ef1a5c67932/platforms/931/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/6f55a924-1e7a-4e84-ac1e-cc26104435d8/versions/0f97325c-8163-41fd-991b-5ef1a5c67932/platforms/931/download?notrack=1",
    "path": "Martyx00_ghinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-06-08 04:26:07+00:00"
    },
    "projectUrl": "https://github.com/Martyx00/ghinja",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.10"
  },
  {
    "api": [
      "python3"
    ],
    "author": "matteyeux",
    "dependencies": "",
    "description": "Binary View for loading 32 bits and 64 bits Apple SEPROM",
    "installinstructions": {},
    "lastUpdated": 1689570375,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Mathieu Hautebas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# SEPROM loader\n\n_Binary View for loading 32 bits and 64 bits Secure Enclave Processor ROM embedded in Apple's products_\n\n![](https://raw.githubusercontent.com/matteyeux/seprom-loader/master/demo.PNG)\n\n## Description \nBinary Ninja Binary View plugin for analyzing Apple's SEPROM. \n- Identifies SEPROM architecture    \n- Performs rebase to the correct load address for accurate analysis    \n- Restores some symbols for 64 bits SEPROMs\n\n## Acknowledgments\n\n- [Yui's](https://twitter.com/haiyuidesu) [sephelper](https://github.com/haiyuidesu/sephelper) for IDA PRO\n- BlackwingHQ's [iBoot64Binja](https://github.com/BlackwingHQ/iBoot64Binja)\n- [iBoot-Binja-Loader](https://github.com/EliseZeroTwo/iBoot-Binja-Loader)",
    "minimumbinaryninjaversion": 2170,
    "name": "SEPROM Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/d35ce5f3-7c3e-408c-9e8c-24c1da920b7d/versions/e87b9aff-5409-401f-b03a-bc1fb49ee55d/platforms/937/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/d35ce5f3-7c3e-408c-9e8c-24c1da920b7d/versions/e87b9aff-5409-401f-b03a-bc1fb49ee55d/platforms/937/download?notrack=1",
    "path": "matteyeux_sepromloader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-07-17 05:06:15+00:00"
    },
    "projectUrl": "https://github.com/matteyeux/seprom-loader",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0.6"
  },
  {
    "api": [
      "python3"
    ],
    "author": "@_murks",
    "dependencies": "",
    "description": "devi - DEvirtualize VIrtual calls in C++ binaries",
    "installinstructions": {},
    "lastUpdated": 1604506779,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 murks\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# devi_binja\nBinary Ninja Plugin for devi. For a detailed description how devi works see its [repository](https://github.com/murx-/devi/). This plugin uses the newly introduced possibility to add cross-references in binary ninja to devirtualize virtual calls. \n\nDevi consits of two components, one for dynamic analysis (DBI) and one for static analysis (disassembler). This repository is only the static analysis part for binary ninja. See https://github.com/murx-/devi/ for the details of the dynamic part. \n\n\n## Minimal Example\n\n### Disassembly\n\nBefore:\n\n![Disassembly before devi](https://github.com/murx-/devi_binja/blob/master/images/main_before_devi.png?raw=true)\n\n\nAfter:\n\n![Disassembly with devi](https://github.com/murx-/devi_binja/blob/master/images/main_after_devi.png?raw=true)\n\n### XRefs\n\n\nBefore:\n\n![Xrefs before devi](https://github.com/murx-/devi_binja/blob/master/images/xrefs_before_devi.png?raw=true)\n\nAfter:\n\n![Xrefs after devi](https://github.com/murx-/devi_binja/blob/master/images/xrefs_after_devi.png?raw=true)",
    "minimumbinaryninjaversion": 1200,
    "name": "devi",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/fb1422b3-35f5-4007-8f68-a0e1bc62f4aa/versions/bae5cc62-f5f9-4dfb-a945-5c689f94385f/platforms/943/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/fb1422b3-35f5-4007-8f68-a0e1bc62f4aa/versions/bae5cc62-f5f9-4dfb-a945-5c689f94385f/platforms/943/download?notrack=1",
    "path": "murx_devi_binja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-11-04 16:19:39+00:00"
    },
    "projectUrl": "https://github.com/murx-/devi_binja",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Daniel Weber",
    "dependencies": "",
    "description": "Binary Ninja plugin for restoring function names from stripped Golang binaries",
    "installinstructions": {},
    "lastUpdated": 1603103834,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <2020> <Daniel Weber>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "The plugin parses the section `.gopclntab` where Golang stores debug symbols and restores the function names. If there is no section named `.gopclntab` it will try to search for the section.",
    "minimumbinaryninjaversion": 2170,
    "name": "Golang Symbol Restore",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/299b96ee-b9c2-4b7f-bd02-ded4af88fdc8/versions/672dbff6-afbe-4df5-900d-dbd8fac25950/platforms/949/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/299b96ee-b9c2-4b7f-bd02-ded4af88fdc8/versions/672dbff6-afbe-4df5-900d-dbd8fac25950/platforms/949/download?notrack=1",
    "path": "dwe_binjagolangsymbolrestore",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-10-19 10:37:14+00:00"
    },
    "projectUrl": "https://github.com/d-we/binja-golang-symbol-restore",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "faith",
    "dependencies": "",
    "description": "Playstation 3 ELF loader",
    "installinstructions": {},
    "lastUpdated": 1732813908,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Valters Tomsons\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "![](image.png)\n\n# bninja-ps3\n\nWork-in-process Cell PPU (*Playstation 3*) ELF loader for Binary Ninja 4.x\n\nOnly supports decrypted PS3 executable ELFs `EBOOT.BIN`. Not compatible with libraries `.sprx`, system modules, or other ELF types.\n\nTested with Binary Ninja:\n* `4.1.5902-stable`\n* `4.2.6455-stable`\n\n# Usage\n\n1. Clone this repo to `~/.binaryninja/plugins/`\n1. Open bninja and load a PS3 executable\n1. Select \"Playstation 3 ELF\" binary view\n\n## Syscalls\n\nTo define syscalls:\n\n1. Right-click anywhere \n1. `Plugins`\n1. `ps3-syscall-sweep`\n\nSyscalls will then appear under `System types`. Code references might be incomplete if run before analysis can finish or where decompilation fails.\n\n# Known Issues\n\n* DWARF symbols are not recognized\n* system call definitions don't have arguments\n* bninja does not lift many PPC instructions, breaking decompilation:\n\n```\nclrldi\nlfs\nfcmpu\nstfs\nlfd\nfmuls\nfadds\nfmadds\nfdivs\nmtocrf\nfrsp\nfcfid\ncmpdi\nfmr\nstfd\nvmaddfp\npsq_lx\nstvx\n```\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n\n## Resources\n\n* https://www.psdevwiki.com/ps3/SELF_-_SPRX\n* http://www.openwatcom.com/ftp/devel/docs/elf-64-gen.pdf\n* https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html\n* https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n* https://github.com/clienthax/Ps3GhidraScripts\n* https://github.com/RPCS3/rpcs3/\n* https://binary.ninja/2020/01/08/guide-to-architecture-plugins-part1.html\n* https://gist.github.com/xerpi/4aaf83ca59c33190c960881e3a364627#file-nidreader-py\n* https://www.psdevwiki.com/ps3/PRX#PS3",
    "minimumbinaryninjaversion": 4000,
    "name": "binja-ps3",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/0e312eb6-68e0-4078-80ac-f14c4d5c875f/versions/48ef6145-7a84-4683-ad00-b345a5cd0718/platforms/337/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/0e312eb6-68e0-4078-80ac-f14c4d5c875f/versions/48ef6145-7a84-4683-ad00-b345a5cd0718/platforms/337/download?notrack=1",
    "path": "valterstomsons_bninjaps3",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-11-28 17:11:48+00:00"
    },
    "projectUrl": "https://github.com/valters-tomsons/bninja-ps3",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "v0.0.6"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Michael Rodler",
    "dependencies": "",
    "description": "Short script that parses go symbol table and renames/creates functions.",
    "installinstructions": {},
    "lastUpdated": 1612269807,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2017 Michael Rodler (contact@f0rki.at)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "go reversing helpers for binaryninja.\n\nBasically this is some stuff ported from the IDA pro script\n[golang_load_assist](https://github.com/strazzere/golang_loader_assist)\n\n Probably incomplete!\n\n### go reversing blog posts\n\n * http://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/",
    "minimumbinaryninjaversion": 1528,
    "name": "GO Loader Assist",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/cb6d05e6-2d36-456b-b185-949ef3e5ad5d/versions/f4bdc9a0-7199-4bb0-8dd6-b325c3896ff6/platforms/955/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/cb6d05e6-2d36-456b-b185-949ef3e5ad5d/versions/f4bdc9a0-7199-4bb0-8dd6-b325c3896ff6/platforms/955/download?notrack=1",
    "path": "f0rki_bngoloader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-02-02 12:43:27+00:00"
    },
    "projectUrl": "https://github.com/f0rki/bn-goloader",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Grant Orndorff",
    "dependencies": "filebytes\n",
    "description": "Insert custom hooks",
    "installinstructions": {},
    "lastUpdated": 1617003309,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2017 Grant Orndorff\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Currently supports x86 and x86_64 ELF executables.\nWrite a hook in assembly and have it execute as part of your binary. See your hook added to the binary and reflected in the disassembly graph. The code segment of the binary is extended to make room for the hook. After insertion, Save Contents As and run the binary with your inserted code!",
    "minimumbinaryninjaversion": 1407,
    "name": "BNHook",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a5c13fbc-6204-4fa2-bdb7-172299464021/versions/3c1823e1-7430-45f7-9157-9024393fe722/platforms/961/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a5c13fbc-6204-4fa2-bdb7-172299464021/versions/3c1823e1-7430-45f7-9157-9024393fe722/platforms/961/download?notrack=1",
    "path": "jeffli678_bnhook",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-03-29 07:35:09+00:00"
    },
    "projectUrl": "https://github.com/jeffli678/bnhook",
    "subdir": "",
    "type": [
      "ui",
      "core"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "austinzwile / azw",
    "dependencies": "",
    "description": "TypeOxidizer converts the C-Style types in your HLIL / decompilation to their Rust equivalents for easier reading / interpretation and shorter decompilation.",
    "installinstructions": {},
    "lastUpdated": 1740433505,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# TypeOxidizer (v1.2.1)\nAuthor: **azw / austinzwile**\n\n_TypeOxidizer converts the C-Style types in your HLIL / decompilation to their Rust equivalents for easier reading / interpretation and shorter decompilation._\n\n## Description:\n\nTypeOxidizer is a Binary Ninja plugin that seamlessly transforms the C-Style types in your HLIL / decompilation to their Rust equivalents through automatic typedef declaration and retyping, making for a cleaner and more precise decompilation. With built-in support for standard integer and floating-point types as well as strings, TypeOxidizer enhances your analysis by \"oxidizing\" legacy type definitions into Rust's clean and precise syntax.\n\n## Demo\n\nHere's a nice before:\n\n<img width=\"1281\" alt=\"image\" src=\"https://github.com/user-attachments/assets/25249368-7de6-4f25-99a9-de3e36a8a121\" />\n\nand after:\n\n<img width=\"944\" alt=\"image\" src=\"https://github.com/user-attachments/assets/789aefae-94e6-4a74-9013-34976d4711f5\" />\n\n## Usage\n\nThe following registered commands are available via the Plugins dropdown menu as well as the command pallette with `CMD+P`:\n\n - Convert from C to Rust Types\n - Revert to C Types from Rust\n\n## Features\n\nThe conversion from and to following types are currently handled:\n\n| C Type      | Rust Type |\n|-------------|-----------|\n| `uint8_t`   | `u8`      |\n| `uint16_t`  | `u16`     |\n| `uint32_t`  | `u32`     |\n| `uint64_t`  | `u64`     |\n| `uint128_t` | `u128`    |\n| `int8_t`    | `i8`      |\n| `int16_t`   | `i16`     |\n| `int32_t`   | `i32`     |\n| `int64_t`   | `i64`     |\n| `int128_t`  | `i128`    |\n| `float`     | `f32`     |\n| `double`    | `f64`     |\n| `size_t`    | `usize`   |\n| `ssize_t`   | `isize`   |\n| `char*`     | `str`     |\n\n## Installation Instructions\n\n### Darwin\n\nInstall via the Plugin Manager or by cloning the repo at https://github.com/austinzwile/TypeOxidizer and dropping the folder into your plugins directory.\n\n### Linux\n\nInstall via the Plugin Manager or by cloning the repo at https://github.com/austinzwile/TypeOxidizer and dropping the folder into your plugins directory.\n\n### Windows\n\nInstall via the Plugin Manager or by cloning the repo at https://github.com/austinzwile/TypeOxidizer and dropping the folder into your plugins directory.\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 3164\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n## Todo\n\n- [ ] Add proper conversion of types when typecasting. The decompilation currently doesn't allow for the retyping of anything on the right side of an equals sign so I will have to figure that out.\n- [ ] Implement a drop-down/content menu to allow for selective conversion between C and Rust.\n- [ ] Handle structs and typedefs. The types within already defined type definitions don't get handled right.\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Type Oxidizer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ee56d00c-ee3a-440d-b8cd-ec0b2a86be02/versions/4602a38c-e3c2-4cfd-bae6-97543342b265/platforms/307/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ee56d00c-ee3a-440d-b8cd-ec0b2a86be02/versions/4602a38c-e3c2-4cfd-bae6-97543342b265/platforms/307/download?notrack=1",
    "path": "austinzwile_TypeOxidizer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 2,
      "updated_at": "2025-02-24 21:45:05+00:00"
    },
    "projectUrl": "https://github.com/austinzwile/TypeOxidizer",
    "subdir": "",
    "type": [
      "binaryview",
      "helper",
      "ui"
    ],
    "version": "1.2.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "OtterSec LLC",
    "dependencies": "lief\n",
    "description": "An architecture/binaryview plugin for Solana EBPF.",
    "installinstructions": {},
    "lastUpdated": 1741228251,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 OtterSec LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-ebpf-solana\n\nA pure-python Binary Ninja plugin for Solana EBPF.\n\n## Installation\n\nAvailable in Binja's plugin manager inside of `Plugins > Manage Plugins`\n\n## Manual installation (advanced)\n\nThis is only needed if you wish to tinker with the plugin to modify it.\n\nClone this [repo](https://github.com/otter-sec/bn-ebpf-solana) in your Binja `plugins` folder, located in the [user folder](https://docs.binary.ninja/guide/index.html#user-folder).\n\nNow install the requirements :\n- either by running `Install python3 module` in Binja's `command palette` (Ctrl + P) and install `lief`\n- or by going to the [user folder](https://docs.binary.ninja/guide/index.html#user-folder) and installing `lief` within the `venv` enviroment using:\n\n```\npip install lief\n```\n\nCurrently tested on `lief@0.16.2-d4900dab`\n\nSee our [introductory blog post](https://osec.io/blog/tutorials/2022-08-27-reverse-engineering-solana/).\n\n**Instruction lifting!**\n![](/assets/lift.png)\n\n**Solana SDK Structures!**\n![](/assets/struct.png)\n\n\n\nCopy this directory into your Binary Ninja plugins folder and restart.\n\n## Features\n\n- **Instruction Lifting**: All EBPF instructions are lifted to LLIL\n- **Accurate Memory Maps**: We implement Solana-specific memory maps (0x{1/2/3/4}00000000 addresses for data/stack/heap/input)\n- **Solana ELF Relocations**: Solana-specific ELF relocations\n- **Syscall Function Signatures**: Full signatures for all of the Solana syscalls\n- **(partial) Solana SDK Types**: Type definitions for all Solana SDK objects. (fully complete for C, in-progress for Rust)\n\n_TODO:_\n\n- **Solana SDK Signature Matching**: Automatically match common Solana SDK functions.\n\n## Debugging\n\n```\n[ScriptingProvider] ModuleNotFoundError: No module named 'lief'\n```\n\nIs `lief` installed?\n\nRun the following in the Binja python console\n\n```python\nimport lief\nlief.__version__\n```\n\nIf you get an error, refer to the **Installation** section\n",
    "minimumbinaryninjaversion": 3164,
    "name": "bn-ebpf-solana",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/d4464a6c-a501-4d4f-8735-9a34cfe8b6c6/versions/f83a5954-5286-41df-a34b-408b3c460649/platforms/313/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/d4464a6c-a501-4d4f-8735-9a34cfe8b6c6/versions/f83a5954-5286-41df-a34b-408b3c460649/platforms/313/download?notrack=1",
    "path": "ottersec_bnebpfsolana",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 196,
      "updated_at": "2025-03-06 02:30:51+00:00"
    },
    "projectUrl": "https://github.com/otter-sec/bn-ebpf-solana",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "xorhex",
    "dependencies": "",
    "description": "Various features to make windows malware analysis easier.",
    "installinstructions": {},
    "lastUpdated": 1737133601,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 xorhex\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# binjaextras (v0.0.4)\n\nAuthor: **xorhex**\nCopyright: **2025**\n\n_Various features to make windows malware analysis easier._\n\n## Description:\n\nVarious features to make windows malware analysis easier like adding function prototypes.\n\n### Features:\n\n#### Apply Type\n\n1. Rename the variable to the API name\n2. Right click on the variable and select `BinjaExtras` and click `Apply Type`\n\n![](bn_type_application.gif)\n\n#### Apply Type to Function\n\nSometimes a custom function will resolve an API and then jump to it.  The function prototype of the function that contains this code that both resolves and calls/jumps to the API function matches the corrisponding API function prototype being resolved - simply rename the function and the type is auto applied.\n\n### Settings\n\nAll of the features can be controlled (enabled/disabled) via the settings.\n\n![](BinjaExtraSettings.png)\n\n\n## Installation Instructions\n\n### Darwin\n\nNothing special, just install through the Binary Ninja plugin manager.\n\n### Windows\n\nNothing special, just install through the Binary Ninja plugin manager.\n\n### Linux\n\nNothing special, just install through the Binary Ninja plugin manager.\n\n## Change Log\n\n### Version v0.0.4\n\n- move the Usage content into the readme so that it will render in BinaryNinja's plugin manager\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 6455\n\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 6455,
    "name": "binjaextras",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ecdad7b2-f9eb-4189-9622-4478f4da8f1c/versions/58fd9938-ce17-4b1e-bee2-9285a33f9b25/platforms/319/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ecdad7b2-f9eb-4189-9622-4478f4da8f1c/versions/58fd9938-ce17-4b1e-bee2-9285a33f9b25/platforms/319/download?notrack=1",
    "path": "xorhex_binjaextras",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 6,
      "updated_at": "2025-01-17 17:06:41+00:00"
    },
    "projectUrl": "https://github.com/xorhex/binjaextras",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "v0.0.4"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Glenn Smith",
    "dependencies": "",
    "description": "Sidebar inspectors for debugging Binary Ninja itself",
    "installinstructions": {},
    "lastUpdated": 1735857837,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2015-2024 Vector 35 Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Binary Ninja Inspectors\n--\n\nThis is a big collection of inspectors and sidebars for Binary Ninja that I have made and regularly use.\nThey are not really polished or guaranteed to work for people other than myself, but you may get good use out of them.\nNote that many of them (looking at you, Linear Inspector) have abyssmal performance and turn your sidebar game into a bit of a minefield ;)\n\n## Analysis Progress\nSee where your analysis is running (or stalled, as often seems to be the use case)\n\n![alt text](img/analysis_progress_sidebar.png)\n\n## Type Inspector\nDebug the Type Parser api and find out why your types do/don't parse\n\n![alt text](img/type_inspector.png)\n\n## Graph Inspector\nSee what the tokens in the flow graph actually are\n\n![alt text](img/graph_inspector.png)\n\n## Linear Inspector\nShows you the contents of the tree structure of Linear View\n\n![alt text](img/linear_inspector.png)\n\n## IL Inspector\nSee all the details of all the IL expressions and instructions in a function.\n\n![alt text](img/il_inspector.png)\n\n## Register Inspector\nSee the values of all registers used in the function, and if they changed at the current address.\n\n![alt text](img/register_inspector.png)\n\n## License\n\nMIT License, Copyright Vector 35 since I wrote these on work time\n",
    "minimumbinaryninjaversion": 6455,
    "name": "BN Inspectors",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/10ad2494-6015-405e-95f0-d6a1e6a8e101/versions/a50b6ded-7c73-4661-9bde-eded426aa614/platforms/325/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/10ad2494-6015-405e-95f0-d6a1e6a8e101/versions/a50b6ded-7c73-4661-9bde-eded426aa614/platforms/325/download?notrack=1",
    "path": "CouleeApps_bn_inspectors",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 7,
      "updated_at": "2025-01-02 22:43:57+00:00"
    },
    "projectUrl": "https://github.com/CouleeApps/bn_inspectors",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Daniel Roethlisberger",
    "dependencies": "",
    "description": "Annotation of Apple libclosure blocks.",
    "installinstructions": {},
    "lastUpdated": 1735662943,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Daniel Roethlisberger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Apple Blocks Plugin\nAuthor: Daniel Roethlisberger\n\nAnnotation of Apple [libclosure](https://github.com/apple-oss-distributions/libclosure) [blocks](https://clang.llvm.org/docs/BlockLanguageSpec.html).\n\n## Description\n\nType annotation of stack and global blocks, block descriptors, variables closed\nover and related function signatures in [Binary Ninja](https://binary.ninja/).\nBlocks are an implementation of closures often found in C, C++, ObjC and ObjC++\ncode for Apple platforms.  Blocks are not the same as C++ lambdas.\n\n![Screenshot comparing before and after annotation](https://github.com/droe/binja-blocks/blob/0.4.0/.github/img/showcase.png?raw=true)\n\nCommands:\n\n-   Annotate all blocks\n-   Annotate all global blocks\n-   Annotate all stack blocks\n-   Annotate global block here\n-   Annotate stack block here\n-   Annotate stack byref here\n-   Remove plugin comment here (deprecated)\n\nFeatures:\n\n-   Find and annotate global and stack blocks\n-   Annotate block imported variables based on inline or out-of-line\n    generic helper info or extended layout\n-   Annotate block invoke function type based on encoded block ObjC type\n    signature\n-   Annotate block descriptors, copy/dispose functions, generic helper info\n    and out-of-line extended layout bytecode\n-   Annotate stack byrefs (`__block` variables) based on non-extended\n    layout or inline or out-of-line extended layout, including keep and\n    destroy functions\n-   Define per-block and per-byref named structs to allow for manual fixups\n-   Define structs for fully manual annotation: `Block_literal`,\n    `Block_descriptor_1`, `Block_descriptor_2`, `Block_descriptor_3`,\n    `Block_byref_1`, `Block_byref_2`, `Block_byref_3`.\n\nKnown limitations:\n\n-   Automatic discovery of blocks and byrefs on the stack is unreliable by\n    nature and depends on Binary Ninja's ability to lift into clean HLIL\n-   No support for \"small descriptors\"\n-   No support for 32-bit architectures\n-   No support for \"old GC layout\"\n-   No support for older block layout from before the introduction of block descriptors\n-   Byrefs passed as function arguments are not automatically discovered\n\n## References\n\nBlocks language docs:\n\n-   [Blocks Programming Topics](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/), Apple Documentation Archive\n-   [LLVM Block Language Spec](https://clang.llvm.org/docs/BlockLanguageSpec.html)\n\nBlocks implementation details:\n\n-   [libclosure](https://github.com/apple-oss-distributions/libclosure), source code and two spec documents\n-   [LLVM Block ABI](https://clang.llvm.org/docs/Block-ABI-Apple.html)\n\nObjective-C Type Encodings:\n\n-   [Type Encodings](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html), Objective-C Runtime Programming Guide, Apple Documentation Archive\n-   [LLVM code emitting type encodings](https://github.com/llvm-mirror/clang/blob/master/lib/AST/ASTContext.cpp)\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n",
    "minimumbinaryninjaversion": 6455,
    "name": "Apple Blocks",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/56407c94-0d7b-45bc-a875-0e35966e4339/versions/14bf38ed-6f38-48f9-afc8-f24989ac509d/platforms/343/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/56407c94-0d7b-45bc-a875-0e35966e4339/versions/14bf38ed-6f38-48f9-afc8-f24989ac509d/platforms/343/download?notrack=1",
    "path": "droe_binjablocks",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 33,
      "updated_at": "2024-12-31 16:35:43+00:00"
    },
    "projectUrl": "https://github.com/droe/binja-blocks",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.4.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "d0minik",
    "dependencies": "",
    "description": "Binary Ninja plugin to take and manage database snapshots",
    "installinstructions": {},
    "lastUpdated": 1730262149,
    "license": {
      "name": "AGPL-3.0",
      "text": "Copyright 2024 d0minik \n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\nYou should have received a copy of the GNU Affero General Public License along with this program; if not, see <http://www.gnu.org/licenses/>."
    },
    "longdescription": "# Snapshot Manager (v0.1)\n\nAuthor: **d0minik**\n\n_Binary Ninja plugin to manage database snapshots_\n\n## Description:\n\nA UI plugin to take, restore & manage database snapshots of your BNDBs, just like VM snapshots!\n\n![Snapshot Manager](images/demo.png)\n\n## Features\n\n- Take snapshots of BNDB state\n- Restore any previous state\n- Delete unused states\n\n![Options](images/options.png)\n\n## Installation\n\n`git clone` this repo into your Binary Ninja plugins directory.\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4911\n\n## License\n\nThis plugin is released under a AGPL license.\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 4526,
    "name": "Binja Snapshot Manager",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/74b42716-1be4-4d24-997a-ed139022e2f1/versions/33b3303b-71a5-48cd-b450-e56a515cc573/platforms/349/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/74b42716-1be4-4d24-997a-ed139022e2f1/versions/33b3303b-71a5-48cd-b450-e56a515cc573/platforms/349/download?notrack=1",
    "path": "d0mnik_binja_snapshot_manager",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-10-30 04:22:29+00:00"
    },
    "projectUrl": "https://github.com/d0mnik/binja_snapshot_manager",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "v0.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jordan Wiens",
    "dependencies": "",
    "description": "QSettings Viewer",
    "installinstructions": {},
    "lastUpdated": 1729633426,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Jordan Wiens\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# QSettings Viewer (v1.0.1)\nAuthor: **Jordan Wiens**\n\n_QSettings Viewer_\n\n## Description:\n\n\nNone\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 3164\n\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 3164,
    "name": "QSettings Viewer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4d13d2a5-a22d-41f5-af5e-3a853eb955b4/versions/336185f4-fc00-4651-9d2b-7264ff81e493/platforms/355/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4d13d2a5-a22d-41f5-af5e-3a853eb955b4/versions/336185f4-fc00-4651-9d2b-7264ff81e493/platforms/355/download?notrack=1",
    "path": "psifertex_qsview",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 1,
      "updated_at": "2024-10-22 21:43:46+00:00"
    },
    "projectUrl": "https://github.com/psifertex/qsview",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Adrian Herrera",
    "dependencies": "gtirb\n",
    "description": "Support the GrammaTech Intermediate Representation for Binaries (GTIRB) in Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1728277373,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 GrammaTech Inc.\nCopyright (c) 2024 Adrian Herrera\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja GTIRB\nAuthor: **Adrian Herrera**\n\n_Support the GrammaTech Intermediate Representation for Binaries (GTIRB) in Binary Ninja_\n\n## Description:\n\nThe [GrammaTech Intermediate Representation for Binaries](https://grammatech.github.io/prj/gtirb/) (GTIRB) is a format for binary analysis and rewriting.\nThis plugin adds support for the GTIRB format to Binary Ninja.\nIt is based on GrammaTech's [GTIRB Ghidra plugin](https://github.com/GrammaTech/gtirb-ghidra-plugin).\nCurrently, it supports exporting a Binary Ninja database to GTIRB.\nImporting GTIRB is not (yet) supported.\nSimilarly, the plugin only support exporting a single module; exporting multiple (linked) modules could be supported via Binary Ninja's [external links](https://docs.binary.ninja/guide/projects.html#external-links) feature, but this is not (yet) supported.\n\n## Installation Instructions\n\nThis plugin is available in the Binary Ninja Plugin Manager.\nOtherwise:\n1. `git clone` this repository into your Binary Ninja plugins folder (see [here](https://docs.binary.ninja/guide/plugins.html) for more details).\n1. Install the requirements with `pip install -r requirements.txt`.\n\n## Usage\n\nOpen the GTIRB \u2192 Export dialog.\nSelect the location of the exported GTIRB IR file.\nSelect the [auxiliary tables](https://grammatech.github.io/gtirb/md__aux_data.html) you want to export.\nThe more auxiliary tables, the longer the export will take.\n![GTIRB export dialog](img/usage.png)\n\n## License\n\nThis plugin is released under a MIT license.\n",
    "minimumbinaryninjaversion": 3164,
    "name": "GTIRB",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4bbcdf06-3d07-4ffa-9fa9-af159f428499/versions/b111057e-bac5-4fce-9dd0-9daa711d9a7e/platforms/361/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4bbcdf06-3d07-4ffa-9fa9-af159f428499/versions/b111057e-bac5-4fce-9dd0-9daa711d9a7e/platforms/361/download?notrack=1",
    "path": "adrianherrera_binaryninjagtirb",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-10-07 05:02:53+00:00"
    },
    "projectUrl": "https://github.com/adrianherrera/binaryninja-gtirb",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Lam Jun Rong",
    "dependencies": "",
    "description": "Automatically set enums for standard functions",
    "installinstructions": {},
    "lastUpdated": 1737066203,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Lam Jun Rong\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Auto Enum\n\n![binja_demo](https://files.junron.dev/binja_demo.gif)\n\n## Overview\n\nDecompiled C code often contains \"magic\" constants that represent flags or options.\n```c\nint64_t buf = mmap(0, 0x1000, 7, 0x22, 0xffffffff, 0);\n```\n\nAuto Enum detects and demystifies these constants, converting them to human-readable symbols.\n\n```c\nint64_t buf = mmap(\n    0,\n    0x1000,\n    PROT_WRITE | PROT_EXEC | PROT_READ,\n    MAP_PRIVATE | MAP_ANON | MAP_FILE,\n    0xffffffff, 0\n);\n```\n\nCheck out the [README](https://github.com/junron/auto-enum) on GitHub for more info!",
    "minimumbinaryninjaversion": 4526,
    "name": "Auto Enum",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/1e5cc5b6-2436-4e83-80be-c8a92a9098ac/versions/267f5dc3-982c-4934-b948-dc8fd33112c4/platforms/367/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/1e5cc5b6-2436-4e83-80be-c8a92a9098ac/versions/267f5dc3-982c-4934-b948-dc8fd33112c4/platforms/367/download?notrack=1",
    "path": "junron_autoenum",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 447,
      "updated_at": "2025-01-16 22:23:23+00:00"
    },
    "projectUrl": "https://github.com/junron/auto-enum",
    "subdir": "binjastub",
    "type": [
      "helper"
    ],
    "version": "0.1.1"
  },
  {
    "api": [
      "C++"
    ],
    "author": "Accenture (Martin Petran)",
    "dependencies": "",
    "description": "Architecture plugin for Renesas RH850/V850 family of processors.",
    "installinstructions": {},
    "lastUpdated": 1737546835,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2024 Accenture\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "This Binary Ninja plugin provides a native implementation for the Renesas RH850/V850 architecture. The main reason for writing this from scratch instead of using existing plugin is that any Architecture plugin written in Python is not usable for large binaries as the analysis takes ages. Therefore, this is a complete coverage of this architecture written purely in C/C++.",
    "minimumbinaryninjaversion": 6135,
    "name": "NEC850 Architecture",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/22620789-5817-4869-8645-a52cc53fe36c/versions/448bf88b-6976-4252-b913-4d75a4b613be/platforms/373/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/22620789-5817-4869-8645-a52cc53fe36c/versions/448bf88b-6976-4252-b913-4d75a4b613be/platforms/373/download?notrack=1",
    "path": "Accenture_NEC850_Architecture",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 3,
      "updated_at": "2025-01-22 11:53:55+00:00"
    },
    "projectUrl": "https://github.com/Accenture/NEC850_Architecture",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "cpp"
    ],
    "author": "Martin Petran",
    "dependencies": "",
    "description": "PowerPC VLE support via architecture extension.",
    "installinstructions": {},
    "lastUpdated": 1741039313,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2024 Martin Petran\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "Architecture extension for default PPC architecture to support VLE instructions. This includes dissassembly for vector and floating point instructions (some float operations are also lifted).",
    "minimumbinaryninjaversion": 6135,
    "name": "PowerPC VLE Extension",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/8e613ed4-7495-4c8b-85e9-1095a93e0706/versions/13d6a88e-3cdf-443c-9596-1e5040a353af/platforms/379/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/8e613ed4-7495-4c8b-85e9-1095a93e0706/versions/13d6a88e-3cdf-443c-9596-1e5040a353af/platforms/379/download?notrack=1",
    "path": "Martyx00_PowerPCVLEExtension",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 3,
      "updated_at": "2025-03-03 22:01:53+00:00"
    },
    "projectUrl": "https://github.com/Martyx00/PowerPC-VLE-Extension",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "computerman00",
    "dependencies": "pyyaml\n",
    "description": "PS Vita ELF/PRX2 loader plugin",
    "installinstructions": {},
    "lastUpdated": 1726745762,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 omo-computerman00\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# BinaryNinja-PSVitaLoader\nPS Vita ELF/PRX2 loader plugin for Binary Ninja\n\n## Table of Contents\n1. [Description](#description)\n2. [Plugin Usage](#plugin-usage)\n3. [Notes/Issues](#notesissues)\n4. [TODO](#todo)\n5. [Credits](#credits)\n6. [Use-case examples](#use-case-examples)\n7. [Legal](#legal)\n\n### Description:\nA Binary Ninja Plugin for PRX2 PS Vita eboot.bin ELFs. \n\nDynamic linking of modules on the PS Vita [is performed](https://wiki.henkaku.xyz/vita/NID#Usage) by NID(**N**umeric **Id**entifier) of a function or variable instead of names. The primary purpose of this plugin is to resolve all import/export function/variable names, create symbols for them, and load them back into the default ELF BinaryView at their respective position. This plugin will also add PS Vita(PRX2) specific datatypes with locations in the binary resolved(if applicable). Additionally, this plugin attempts to do some cleanup resulting from the decompilation of the mixed ARMv7/thumb2 instruction sets, removing some misaligned/junk instructions in places where there should have been in-line data. \n\n\n### Plugin Usage:\nLoading the plugin will prompt for a NID database yaml file\n![Selecting NID DB](/images/nid-db-select.png)\n\nThe included NID database was obtained from the vitasdk [vita-headers](https://github.com/vitasdk/vita-headers) and combined with the following:\n```bash\n\u2514\u2500$ yq ea '. as $item ireduce ({}; . * $item )' vita-headers/db/360/*.yml > merged-vita-nid-db.yml\n```\n\nAfterwards, the plugin will prompt for a header file, this is not necessary, however **highly recommended**. With the header file we are able to resolve every single imported functions argument count, argument name, argument type, and function type/return. If this is not used, imported functions default to void and `variable_arguments` is set on the `binaryninja.types.FunctionType` object.\n\n![Selecting NID DB](/images/header-select.png)\n\nThe header file included is a compilation of all header files from [vitasdk/vita-headers](https://github.com/vitasdk/vita-headers/), all credit for the headers and NID DB goes to the vitasdk team. This header file was generated using the vitasdk toolchain([LICENSE](https://github.com/vitasdk/vita-headers/blob/master/LICENSE.md) added after) like so:\n```\n\u2514\u2500$ /usr/local/vitasdk/bin/arm-vita-eabi-gcc -P -E $VITASDK/arm-vita-eabi/include/vitasdk.h -D\"__attribute__(x)=\" -D\"__extension__(x)=\" -Drestrict= -D__restrict__= > vita_headers.hpp\n```\n\nThe plugin will first run linear sweep analysis until no new functions are created. Symbols with their respective function names are then resolved almost instantly and injected/added into the default ELF BinaryView. \n\n\nAt this point, any sce* function call should be resolved and a few datatypes will be added. If the header file was supplied, all datatypes will be imported along with the sce* functions proper return type, argument names, and argument types. \n![Plugin Sample](/images/plugin-sample.png)\n\n\n### Notes/Issues:\n- Tested to be working on Binary Ninja `4.1.5902-Stable` and `4.2.6075-dev`\n- Binary Ninja appears to trip in ARMv7/thumb2 mixed instruction sets binaries. An issue was encountered where if the binary is detected as ARMv7(All were while testing) and the first instruction is a Thumb2 instruction, it will mangle the entire dis-assembled binary. To fix this, right click initial function/instruction->Make Function at This Address->thumb2->linux-thumb2. Next run Linear Sweep again, this will fix the binary and later instruction set switches(typically `blx`) are sometimes accounted for properly.\n\nA painful but much better solution to thumb2 start: After ensuring the very first function(@base_addr) is set to thumb2 manually, I have had great luck doing the following in the BN console:\n```python\n>>> thumb2 = binaryninja.Architecture['thumb2']\n... \n>>> for func in bv.functions:\n... \tif func.arch != thumb2:\n... \t\tbv.remove_function(func)\n```\nAfter all non-thumb2 functions are removed, either (re)load the Vita Loader plugin(recommended) or run a few linear sweeps, this will correctly identify instruction set switches and give you a clean binary view(for the most part). If anyone knows how to resolve this globally, please do share - I have tried forcing the platform but because the binary is technically `armv7` the platform switches back to `linux-armv7`.\n\n\n### TODO:\n- Split functions and utility across multiple imports to maintain readability.\n- Move examples to wiki\n- Extend support to `scelibstub_psp`, `scelibent_psp` and other PRX1 primitives to support the OG PSP.\n- Extend to full custom BinaryView plugin with support for relocations\n- ~~Potentially extending un-implenented instructions commonly used within Vita/PRX2 elfs(Such as: vcvt, vdiv, vmov, vmrs and other fp related instructions)~~ - The binaryninja team is [already hard at work on these](https://github.com/Vector35/binaryninja-api/commits/dev/arch/armv7).\n\n\n### Credits:\n\n- The HENkaku [Vita Development Wiki](https://wiki.henkaku.xyz/vita/Main_Page) and specifically the [PRX page](https://wiki.henkaku.xyz/vita/PRX) for the detailed breakdown of the `SceModuleInfo` structure and its location within the ELF. Also for the breakdown of the `scelibent_prx2arm` and `scelibstub_prx2arm` function export/import structures.\n\n- VitaSDK for the [NID db](https://github.com/vitasdk/vita-headers/tree/master/db) and all [header files](https://github.com/vitasdk/vita-headers/tree/master/include)(Also the wonderful vita [toolchain](https://github.com/vitasdk/vdpm) and module [documentation](https://docs.vitasdk.org/modules.html))\n\n- The [VitaLoader Redux](https://github.com/CreepNT/VitaLoaderRedux) project, a Vita loader plugin for Ghidra with way more than just symbol mapping support - although not a Ghidra or Java fan, I studied portions of the project and its amazingly clarifying inline comments when stuck. \n\n\n### Use-case examples:\nThere are many great use-cases to learning more about reverse engineering binaries, a good example is to leverage this to patch binaries to unlock the FPS or allow them to run at full PS Vita resolution. \n\nThanks to the talented contributors of [VitaGrafix](https://github.com/Electry/VitaGrafix), we can patch binaries directly on the Vita at loadtime. The VitaGrafix [wiki](https://github.com/Electry/VitaGrafix/wiki/The-VG-Language%E2%84%A2) serves as a great educational resource to get started on this.\n\nEXAMPLE:\n\nPatching FPS limits:\nSearching for cross references on vBlank(vSync) related calls is usually a good start. In a lot of cases, the frame limit is introduced by setting a vblank interval greater than `1`. Typically this would be done with a value moved into `r0` just before `sceDisplayWaitVblankStartMulti` is called. This value(`vcount`) will typically be `1`, `2`, or `3`. This likely indicates the wait for the next vblank start, which will occur after the last scanline and before the next VSync interval. A `vcount` of `2` will wait for `2` vBlank intervals before a VSync, this effectively limits the framerate to half of the displays refresh rate(30fps). A `vcount` of `3` would be refresh-rate/3, effectively limiting to 20fps.\n\nLooking at the popular [nzportable](https://github.com/nzp-team/nzportable) homebrew game running at 60fps natively.\n\n![nzp fps](/images/example2-fps.png)\n\nThe variable here wasn't resolved, however looking at the data at that address, we see its just a `1`, this indicates the game is capped to the screens refresh rate(60Hz), as 1 vBlank interval will occur for every vSync interval. \n\n![nzp fps var](/images/example2-fps-data.png)\n\nNOTE: This isn't always straightforward as many binaries will rely on VSync and modifying anything directly related will usually cause them to run at double speed. Further research is needed on a binary-to-binary basis. \n\n\nPatching resolution:\nThis is much simpler and typically you'd want to load up the binary on a PS Vita with a tool that can poll the frame buffer to determine resolution. Knowing the resolution, you can simply search for that value within Binary Ninja. Looking at the nzp homebrew again, knowing it runs at full Vita resolution of `960x544`, we can search for `0x3c0`(960), this results in only one find and thankfully its a bit more obvious, as `0x3c0`(960) is set just before `0x220` (544)\n\n![nzp res](/images/nzp-find-res.png)\n\n\n\nAnother potential method to patch resolution is to cross reference the `sceDisplaySetFrameBuf` symbol and figure out where the framebuffer is updated/set, this takes in a pointer to the `SceDisplayFrameBuf` struct which contains the framebuffer width and height. These values are sometimes set just before the function call. According to the [vitasdk documentation](https://docs.vitasdk.org/group__SceDisplayKernel.html#structSceDisplayFrameBuf) the following resolutions can be set: `480x272`, `640x368`, `720x408`, `960x544`. \n\nTo show an example of this and practice our reverse engineering, we use the vitasdk toolchain to compile a homebrew app with a resolution of 640(`0x280`) x 368(`0x170`).\n\n\nSearching for `0x280`, there is only one with `0x170` next to it, making it the obvious choice:\n```\n8103d040      int32_t var_44 = 0x280;\n8103d044      int32_t var_40 = 0x170;\n8103d048      sceDisplaySetFrameBuf(&var_54, SCE_DISPLAY_SETBUF_NEXTFRAME);\n```\n\nLooking at the disassembly we see that `0x280` is moved into r1 at addr `0x8103d036` and `0x170` is moved into `r2` at addr `0x8103d03c` before they are both stored on the stack.\n```\n8103d036  5ff42071   movs    r1, #0x280\n8103d03a  0192       str     r2, [sp, #4] {var_48}  {0x0}\n8103d03c  5ff4b872   movs    r2, #0x170\n8103d040  0291       str     r1, [sp, #8] {var_44}  {0x280}\n8103d042  00a8       add     r0, sp, #0 {var_54}\n8103d044  0392       str     r2, [sp, #0xc] {var_40}  {0x170}\n8103d046  0121       movs    r1, #1\n8103d048  e4f14eeb   blx     #sceDisplaySetFrameBuf\n```\n\nWe could use this information to patch the binary by changing the values in the `mov` instructions, or we can patch this directly on the Vita with VitaGrafix. Instead of patching with a set value, VitaGrafix allows us to use a dynamic variable that can be configured before starting the binary, allowing it to patch the binary at load-time. This patch would look like:\n\n```\n[CUSTHOMBRW, eboot.bin]\n@FB\n0:0x3d036 t2_mov(1, 1, fb_w)\n0:0x3d03c t2_mov(1, 2, fb_h)\n```\n\n\n### Legal\n\n\u201cPlayStation\u201d and \"PlayStation Vita\" are registered trademarks of Sony Computer Entertainment Inc. This tool is **NOT** affiliated with, endorsed by, related to, or derived from confidential materials belonging to Sony Computer Entertainment Inc.\n\nThis tool was created for educational, security research purposes. Anything mentioned in this repository, any examples shown, and the plugin itself will **NOT** and can **NOT** break any encryption or circumvent protections in a binary.\n",
    "minimumbinaryninjaversion": 5902,
    "name": "PSVitaLoader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ad6bc36c-0252-489e-915c-afc743a8c249/versions/e52cb6ad-b529-487f-8b37-b92d4a2445e5/platforms/385/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ad6bc36c-0252-489e-915c-afc743a8c249/versions/e52cb6ad-b529-487f-8b37-b92d4a2445e5/platforms/385/download?notrack=1",
    "path": "computerman00_BinaryNinjaPSVitaLoader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 12,
      "updated_at": "2024-09-19 11:36:02+00:00"
    },
    "projectUrl": "https://github.com/computerman00/BinaryNinja-PSVitaLoader",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "LRQA Nettitude",
    "dependencies": "",
    "description": "Recover the imports from a stomped PE header by pasting in an IAT dump from dynamic analysis.",
    "installinstructions": {},
    "lastUpdated": 1726733019,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) LRQA Nettitude 2024 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    },
    "longdescription": "Recover the imports from a stomped PE header by pasting in an IAT dump from dynamic analysis.\n\nSimply copy the IAT during dynamic analysis using e.g. x64dbg and paste it into the plugin dialog.\n\nSee the blog post for more details: https://labs.nettitude.com/blog/binary-ninja-plugin-fix-stomped-imports\n\n**Live malware** example sample: [acf361296c9e1cf5b4ceff11e1790c57e6e1d753df9bef087aadad256dc5a123](https://www.unpac.me/results/c097c055-4cfd-44e7-b493-c692a1a61027?hash=acf361296c9e1cf5b4ceff11e1790c57e6e1d753df9bef087aadad256dc5a123)",
    "minimumbinaryninjaversion": 5529,
    "name": "Fix stomped imports",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b9662fe7-e0de-4256-8b9c-2be35e6db8a4/versions/64382876-1886-4be3-96e2-a325d29caeaa/platforms/397/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b9662fe7-e0de-4256-8b9c-2be35e6db8a4/versions/64382876-1886-4be3-96e2-a325d29caeaa/platforms/397/download?notrack=1",
    "path": "nettitude_binjafixstompedimports",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 7,
      "updated_at": "2024-09-19 08:03:39+00:00"
    },
    "projectUrl": "https://github.com/nettitude/binja-fix-stomped-imports",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jason Tang",
    "dependencies": "openai\npysqlite3\nmarkdown\nhttpx\nchromadb\nsentence-transformers",
    "description": "A plugin that provides LLM helpers to explain code and assist in RE.",
    "installinstructions": {},
    "lastUpdated": 1734624935,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Jason Tang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# BinAssist\nAuthor: **Jason Tang**\n\n_A plugin that provides LLM helpers to explain code and assist in RE._\n\n## Support Continued Improvements\n\n[![\"Buy Me A Beer\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://buymeacoffee.com/jtang613)\n\n## Description:\n\nThis is a LLM plugin aimed at enabling the use of local LLM's (ollama, text-generation-webui, lm-studio, etc) for assisting with binary exploration and reverse engineering. It supports any OpenAI v1-compatible API. Recommended models are LLaMA-based models such as llama3.1:8b, but others should work as well.\n\nCurrent features include:\n* Explain the current function - Works at all IL levels.\n* Explain the current instruction - Works at all IL levels.\n* General query - Query the LLM directly from the UI.\n* Propose actions - Provide a list of proposed actions to apply.\n* Function calling - Allow agent to call functions to navigate the binary, rename functions and variables.\n* RLHF dataset generation - To enable model fine tuning.\n* RAG augmentation - Supports adding contextual documents to refine query effectiveness.\n* Settings to modify API host, key, model name and max tokens.\n\nFuture Roadmap:\n* Agentic assistant - Use Autogen or similar framework for self-guided binary RE.\n* Model fine tuning - Leverage the RLHF dataset to fine tune the model.\n\n## Quickstart\n\n* If necessary, `pip install -r requirements.txt` from the plugin directory.\n* Open Settings -> BinAssist.\n* Ensure the RLHF and RAG database paths are appropriate for your environment.\n* Point the API host to your prefered API provider and set the API key. \n* Load a binary.\n* Open BinAssist with the 'BA' sidebar icon and start exploring.\n\n## Screenshot\n![Screenshot](https://raw.githubusercontent.com/jtang613/BinAssist/refs/heads/master/res/screenshot1.png)\n![Screenshots](/res/screenshots.gif)\n\n## Homepage\nhttps://github.com/jtang613/BinAssist\n\n\n## Installation Instructions\n\n### Linux\n\nAn OpenAI compatible API is required. For local LLM support, use Ollama, LMStudio, Open-WebUI, Text-Generation-WebUI, etc.\n\n`pip install -r requirements.txt`\n\n### Windows\n\nUntested but should work. Submit an Issue or Pull Request for support.\n\n### Darwin\n\nUntested but should work. Submit an Issue or Pull Request for support.\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4000\n\n\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n * pip - openai, pysqlite3, markdown, httpx, chromadb, sentence-transformers\n\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 4000,
    "name": "BinAssist",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/3c6b841b-1861-4e2b-8eb3-32bc359b8dc5/versions/01fc5713-ed14-46f4-a70a-c952e8da3a7a/platforms/403/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/3c6b841b-1861-4e2b-8eb3-32bc359b8dc5/versions/01fc5713-ed14-46f4-a70a-c952e8da3a7a/platforms/403/download?notrack=1",
    "path": "jtang613_BinAssist",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 22,
      "updated_at": "2024-12-19 16:15:35+00:00"
    },
    "projectUrl": "https://github.com/jtang613/BinAssist",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.1.5"
  },
  {
    "api": [
      "python3"
    ],
    "author": "vrzh",
    "dependencies": "",
    "description": "Loader for MobiCore trustlets and secure drivers.",
    "installinstructions": {},
    "lastUpdated": 1721404531,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 vrzh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "MCLF is a format for MobiCore trustlets and drivers. This plugin will map the trustlet/secure driver and resolve known calls to `mcLib`.",
    "minimumbinaryninjaversion": 3233,
    "name": "MobiCore Loader Format",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/445df399-8fb0-4cee-b150-c483eab28e5c/versions/0f0f0282-6a4f-4189-a0e1-ce950ef307fb/platforms/409/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/445df399-8fb0-4cee-b150-c483eab28e5c/versions/0f0f0282-6a4f-4189-a0e1-ce950ef307fb/platforms/409/download?notrack=1",
    "path": "vrzh_mclfbinjaloader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-07-19 15:55:31+00:00"
    },
    "projectUrl": "https://github.com/v-rzh/mclf-binja-loader",
    "subdir": "",
    "type": [
      "binaryview",
      "helper"
    ],
    "version": "0.0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "434b",
    "dependencies": "",
    "description": "Interactive shellcode disassembler/assembler",
    "installinstructions": {},
    "lastUpdated": 1732775887,
    "license": {
      "name": "Apache 2.0",
      "text": "Copyright 2024 0x434b <admin@0x434b.dev> Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "# BinaryNinja Shellcoder Plugin\n\n## Overview\n\nShellcoder is a lightweight plugin for Binary Ninja that enhances shellcode development and analysis.\nIt provides a versatile interface for assembling, disassembling, and formatting shellcode, supporting multiple architectures and output formats akin to the online ShellStorm Assembler/Disassembler.\n\n## Features\n\n- **Multi-architecture Support**: Compatible with all architectures supported by Binary Ninja.\n- **Flexible Input Formats**:\n  - Assembly instructions\n  - Inline hex format (e.g., \"\\x90\\x90\")\n  - Space-separated hex format (e.g., 90 90)\n- **Multiple Output Formats**:\n  - Inline hex\n  - Space-separated hex\n  - Python byte string\n  - C-style array\n  - Disassembled mnemonics (for disassembling)\n- **Customizable Mnemonic Display**:\n  - Optional address display\n  - Optional bytecode display\n  - Adjustable base address for relative operations\n- **Comment usage**:\n  - You can annotate your assembly/shellcode with comments (`#`, `//`, or `;`)\n- **Bad Character Identification**: Quickly identify and highlight problematic bytes in your shellcode.\n- **No External Dependencies**: Utilizes only Binary Ninja's built-in functionalities, ensuring a lightweight and easily deployable solution.\n\n## Installation\n\n1. Clone this repository or download the source code.\n2. Copy the plugin file to your Binary Ninja plugins folder:\n   - Windows: `%APPDATA%\\Binary Ninja\\plugins\\`\n   - Linux: `~/.binaryninja/plugins/`\n   - macOS: `~/Library/Application Support/Binary Ninja/plugins/`\n3. Restart Binary Ninja or reload plugins.\n\n## Usage\n\n1. Open Binary Ninja and navigate to the \"Plugins\" menu.\n2. Select \"Shellcoder\" to open the plugin interface.\n3. Enter your assembly code or hex-formatted shellcode in the input area.\n4. Choose your desired output format and options.\n5. Click \"Assemble\" to process your input.\n6. View the results in the output area.\n\n_Note_: Alternatively you can use `CTRL+p` to open the command palette and search for the plugin.\n\n## Showcase\n\n![interface](img/interface.png)\n\n## Contributing\n\nContributions to the plugin are more than welcome! Here's how you can contribute:\n\n1. Fork the repository.\n2. Create a new branch for your feature or bug fix.\n3. Commit your changes with clear, descriptive commit messages.\n4. Push your branch and submit a pull request.\n\nPlease ensure your code adheres to the existing style and includes appropriate tests and documentation whenever necessary.\n\n## License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- The Binary Ninja team for their excellent reverse engineering platform.\n- The ShellStorm online assembler/disassembler for giving me the idea.\n\n## Contact\n\nFor bug reports, feature requests, or general inquiries, please open an issue on the GitHub repository.\n\n---\n\nHappy shellcoding!\n",
    "minimumbinaryninjaversion": 4526,
    "name": "Shellcoder",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/fd4b71dd-6935-437d-8ec9-2b792f4641a4/versions/5f8a45ef-c87b-4525-9cbb-62afa734f38a/platforms/415/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/fd4b71dd-6935-437d-8ec9-2b792f4641a4/versions/5f8a45ef-c87b-4525-9cbb-62afa734f38a/platforms/415/download?notrack=1",
    "path": "0xricksanchez_Shellcoder",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 14,
      "updated_at": "2024-11-28 06:38:07+00:00"
    },
    "projectUrl": "https://github.com/0xricksanchez/Shellcoder",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Austin Haggard",
    "dependencies": "ollama\nnetworkx>=3.2.1\n",
    "description": "Binary Ninja Ollama integrates with your own locally hosted ollama server to rename functions and variables with AI",
    "installinstructions": {},
    "lastUpdated": 1728484893,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 ahaggard2013 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Ollama is a free, open source tool that allows you to host locally run AI models. Binary Ninja Ollama allows you to utilize your locally hosted ollama server to preform reverse engineering tasks such as renaming functions and variables with AI FOR FREE. See https://github.com/ahaggard2013/binaryninja-ollama for full description.",
    "minimumbinaryninjaversion": 4,
    "name": "Binary Ninja Ollama",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/48073eb3-05b5-4e76-acbc-9c7f5dbfb20f/versions/3a932d67-a707-474c-bcf5-5174644ee360/platforms/421/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/48073eb3-05b5-4e76-acbc-9c7f5dbfb20f/versions/3a932d67-a707-474c-bcf5-5174644ee360/platforms/421/download?notrack=1",
    "path": "ahaggard2013_binaryninjaollama",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 74,
      "updated_at": "2024-10-09 14:41:33+00:00"
    },
    "projectUrl": "https://github.com/ahaggard2013/binaryninja-ollama",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.0.7"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jordan Whitehead",
    "dependencies": "",
    "description": "Export types definitions as ctypes structures",
    "installinstructions": {},
    "lastUpdated": 1719243764,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Jordan Whitehead\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# ctypes Export\nAuthor: **Jordan Whitehead**\n\n_This plugin exports ctypes definitions for given structures and other types._\n\n## Description:\nAttempts to export specified types to python ctypes definitions, along with enums. It can gather and define all the dependent types as well.\nSupports wildcards (`*`, `?`) in type names.\n\nShould support most data types, please submit an issue for errors or incorrect generation.\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n",
    "minimumbinaryninjaversion": 3164,
    "name": "ctypes Export",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c10f30f2-3dc3-4cba-805d-16540bd8ba10/versions/421001c3-e7fb-4e8a-9b37-5ece7f905035/platforms/439/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c10f30f2-3dc3-4cba-805d-16540bd8ba10/versions/421001c3-e7fb-4e8a-9b37-5ece7f905035/platforms/439/download?notrack=1",
    "path": "jordan9001_ctypes_export",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-06-24 15:42:44+00:00"
    },
    "projectUrl": "https://github.com/jordan9001/ctypes_export",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.81"
  },
  {
    "api": [
      "python3"
    ],
    "author": "matteyeux",
    "dependencies": "requests\nbs4\n",
    "description": "Binary Ninja plugin to display the documentation of a Windows function in a sidebar widget.",
    "installinstructions": {},
    "lastUpdated": 1712819538,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2023 matteyeux\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "\n\n![Screenshot from 2023-01-01 12-40-15](https://user-images.githubusercontent.com/8758978/210169502-ceafcb37-53b0-403b-88e7-d018e3932acd.png)\n\n## Description\n\nThis plugin adds a sidebar widget to Binary Ninja. If the cursor is set to a `call` instruction the plugin detects the function's name a requests MSDN documentation.\n\nThe requested documentation is then displayed in the sidebar widget.\n\nEach documented function is also saved to a cache file named `cache.json` in the current plugin directory, meaning the plugin doesn't requests the doc for the same function everytime.\n\n## Credits\n\n- [Eric Hennenfent](https://github.com/ehennenfent) for [binja_explain_instruction](https://github.com/ehennenfent/binja_explain_instruction) which I used as templated for this plugin.\n- [Hacking Things](https://github.com/HackingThings) for the [URL I needed to make this work](https://github.com/HackingThings/binja_MSDN_Helper/blob/main/__init__.py#L17)",
    "minimumbinaryninjaversion": 3053,
    "name": "binja-win-docs",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9cd7a7c4-86a9-432d-81d4-ba33dc434eab/versions/bb9e125e-3c59-4723-989e-2bb93e5f9da9/platforms/451/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9cd7a7c4-86a9-432d-81d4-ba33dc434eab/versions/bb9e125e-3c59-4723-989e-2bb93e5f9da9/platforms/451/download?notrack=1",
    "path": "matteyeux_binjawindocs",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 12,
      "updated_at": "2024-04-11 07:12:18+00:00"
    },
    "projectUrl": "https://github.com/matteyeux/binja-win-docs",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "riskydissonance",
    "dependencies": "requests>=2.32.3\nlxml>=5.2.2\n",
    "description": "Lookup documentation for the selected token",
    "installinstructions": {},
    "lastUpdated": 1718900317,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    },
    "longdescription": "Lookup a documentation summary for the selected token using `Ctrl-q`, or open the full online documentation in the browser with `Ctrl-Q`.",
    "minimumbinaryninjaversion": 5529,
    "name": "binja-doc-lookup",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/679a483c-2064-426d-9ad0-7c04a050552e/versions/b332a00b-6330-4755-b5eb-3d9dd52a818c/platforms/457/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/679a483c-2064-426d-9ad0-7c04a050552e/versions/b332a00b-6330-4755-b5eb-3d9dd52a818c/platforms/457/download?notrack=1",
    "path": "riskydissonance_binjadoclookup",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-06-20 16:18:37+00:00"
    },
    "projectUrl": "https://github.com/riskydissonance/binja-doc-lookup",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "elbee",
    "dependencies": "capstone==5.0.1\npandas==2.2.2\nunicorn==2.0.1.post1\nlief==0.16.2\n",
    "description": "RopView is a gadget analysis framework for BinaryNinja capable of granular per-instruction based analysis and complex logical queries.",
    "installinstructions": {},
    "lastUpdated": 1740234294,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Dylan Knoff\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# RopView - Gadget Analysis Framework\n![logo.png](images/logo.png)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](http://choosealicense.com/licenses/mit/)  [![Twitter](https://img.shields.io/twitter/follow/elbee_ez)](https://x.com/elbee_ez) [![Technical Post](https://img.shields.io/badge/Blog%20post-details-blue)](https://faultpoint.com/post/2024-06-02-binja-plugin-ropview/)\n\nRopView is a gadget analysis framework for BinaryNinja capable of granular per-instruction based analysis backed by [Unicorn Engine](https://www.unicorn-engine.org/) and complex logical queries backed by [pandas](https://pandas.pydata.org/).\n\n**V2 to be released 2/22/25**\n\n# Features\n## Gadget Search\nGadget searching and pooling is fully integrated into the BinaryView and takes advantage of the currently loaded session for quick discovery and caching, making it faster than many similar ROP tools. Additionally, the usual options are available to configure the search settings and constrain the gadget pool appropriately. For a detailed technical explanation, refer to [this post](https://faultpoint.com/post/2024-06-02-binja-plugin-ropview/).\n\n![1.gif](images/1.gif)\n\n## Gadget Analysis\nIn the right pane, an analysis is shown of the currently selected gadget in the pool. This pane details the effects of the gadget on memory locations, clobbered registers, and accesses made to the stack or other memory regions. The analysis shows a start state, intermediary step states, and an end state. The analysis framework takes advantage of [unicorn engine](https://www.unicorn-engine.org/) and can return a report instantly. Internally, this is done using different hooks to add analysis and diffing functionality in the fetch-execute cycle. Furthermore, access violations are hooked to resolve fetched mappings from the target binary into the analysis context in realtime as they are requested. Gadget states are cached for later use and attributes are added to the search engine as queryable columns, allowing for semantic and effect based searches.\n\n![2.gif](images/2.gif)\n\n## Semantic and Constraint-based Search Engine Using Pandas\nDuring the gadget searching and analysis process, gadgets are cached for later access in addition to being added to Dataframe columns for fast, data-driven search queries. The search filter takes advantage of [pandas](https://pandas.pydata.org/), a data-analysis library that allows for collective and aggregated data analysis. This allows RopView to query advanced logical statements on specific gadget attributes (inst_cnt, bytes, disasm, etc) with metadata (count, contains, etc). The result is a much more capable gadget search engine in comparison to other frameworks. Included in these queryable attributes are end-state register values derived from a gadget's corresponding analysis state, which allows for effect-based semantic searching. Additionally, the entire gadget pool dataframe can be exported to a csv for later data analysis in options. Searchable objects are capable of processing whatever may be an attribute of its relative `Series` object and most options can include regex. Default search behavior searches for mnemonic matches in disasm.\n\nCurrently queryable objects include:\n- addr (int)\n- loc (str)\n- bytes (str)\n- inst_cnt (int)\n- disasm (str)\n- registers (int)\n\n![3.gif](images/3.gif)\n![4.gif](images/4.gif)\n\n## Presets\nPresets allow the user to specify dictionary translations for specific keywords into pandas/semantic search queries. Custom presets are saved to the BinaryView along with the rest of the cache. Each architecture is already defined with a set of architecture-tied presets.\n\n![5.png](images/5.png)\n\n## Prestates\nPrestates allow one to specify register-context before analysis. These take the place of individually definable registers, as well as a coredump import feature. Importing a coredump will add its register context and include available memory mappings from the corefile in analysis context for possible resolving.\n\n![6.png](images/6.png)\n\n# Architecture Support\nROPView currently supports the following architectures:\n- i386\n- amd64\n- armv7\n- aarch64\n- thumb2 (toggle)\n- mipsel32\n- mipsel64\n- mips32\n- mips64\n\n# Dependencies\nRopView relies on the following dependencies for its core functionality\n- [Unicorn CPU Emulator (GadgetAnalysis)](https://www.unicorn-engine.org/)\n- [Capstone Disassembler (GadgetSearch, GadgetAnalysis)](http://www.capstone-engine.org/)\n- [pandas (SearchFilter)](https://pandas.pydata.org/)\n- [Pyside6 QT (BinaryNinja's UI framework)](https://www.qt.io/qt-for-python)\n- [lief (Corefile)](https://lief.re/)\n\n# Demo Gallery\n\n- sleep_a0\n![7.gif](images/7.gif)\n- execve\n![8.gif](images/8.gif)\n- Address range is > 0x1000 and is ASCII constrained (excluding first byte)\n![9.gif](images/9.gif)\n\n# Contributions\nContributions are welcome! Please open an issue if you encounter a bug. PRs are reviewed periodically. Please reach me on my blog is needed: https://faultpoint.com\n\n# Installation\nInstall this plugin by cloning this repo directly into `~/.binaryninja/plugins`\n",
    "minimumbinaryninjaversion": 3164,
    "name": "RopView",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9d6c8ef2-4300-474f-bb53-ccf7ab89f746/versions/a9cf871c-2028-4f7d-8aec-4028348c9848/platforms/463/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9d6c8ef2-4300-474f-bb53-ccf7ab89f746/versions/a9cf871c-2028-4f7d-8aec-4028348c9848/platforms/463/download?notrack=1",
    "path": "elbeecyber_RopView",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 62,
      "updated_at": "2025-02-22 14:24:54+00:00"
    },
    "projectUrl": "https://github.com/elbee-cyber/RopView",
    "subdir": "",
    "type": [
      "binaryview",
      "helper",
      "ui"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Austin Ralls",
    "dependencies": "",
    "description": "Adds support for Android Dex files",
    "installinstructions": {},
    "lastUpdated": 1714157052,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 Austin Ralls\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Banjo\n\n![logo](doc/banjo_small.png)\n\n_Android Dex disassembler and Binary Ninja plugin_\n\n## Description\n\nBanjo parses Dex files and disassembles them into a smali syntax that is close to [baksmali](https://github.com/JesusFreke/smali)'s.\n\nThere are three parts to this project:\n\n- Core disassembler library in [android/](android)\n- Binary Ninja plugin in [architecture.py](architecture.py) and [binaryview.py](binaryview.py)\n- Standalone disassembler script in [disas_to_files.py](disas_to_files.py)\n\nFor more documentation, see the [doc/](doc) directory.\n\nThere are still some rough edges. See [GitHub issues](https://github.com/CarveSystems/banjo/issues) for more details.\n\nThis project was released at a [ShmooCon 2020 talk](https://github.com/CarveSystems/presentations/tree/master/2020/banjo).\n\n![screenshot](doc/banjo_screenshot.png)\n\n## Installation Instructions\n\nMake sure Binary Ninja is using Python 3.8 or higher and copy banjo to `BN_USER_DIRECTORY/plugins/`. On Linux:\n\n```\ncd ~/.binaryninja/plugins/ && git clone https://github.com/carvesystems/banjo.git\n```\n",
    "minimumbinaryninjaversion": 3112,
    "name": "Banjo",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/72a9ad93-060c-4d41-8624-cd7570befaef/versions/ee0afd20-b3ff-4beb-bf4c-56ad785a4da2/platforms/469/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/72a9ad93-060c-4d41-8624-cd7570befaef/versions/ee0afd20-b3ff-4beb-bf4c-56ad785a4da2/platforms/469/download?notrack=1",
    "path": "ivisionresearch_banjo",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 62,
      "updated_at": "2024-04-26 18:44:12+00:00"
    },
    "projectUrl": "https://github.com/ivision-research/banjo",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "3.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Samman Palihapitiya",
    "dependencies": "emoji\ntree-sitter==0.23.2\ntree-sitter-c==0.23.4\nsemgrep\n",
    "description": "Search code with Semgrep",
    "installinstructions": {},
    "lastUpdated": 1738636459,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 Interrupt Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# `semgrep_bn`\n\n`semgrep_bn` is a Binary Ninja plugin designed to automate the process of generating pseudo-C code from binary files, running Semgrep over this pseudo-C, and presenting the results - all without having to leave the Binary Ninja environment.\n\n![Semgrep Demo GIF](gifs/semgrep_bn_short_demo.gif)\n\n\n## Installation\n\n1. Clone the `semgrep_bn` repo into the Binary Ninja plugins directory (see [here](https://docs.binary.ninja/guide/plugins.html) for the location of your plugin folder).\n\n```shell\ngit clone https://github.com/interruptlabs/semgrep_bn\n```\n\n2. Install the Python dependencies.\n\n```shell\npip install -r semgrep_bn/requirements.txt\n```\n\n3. Follow the installation instructions [here](https://semgrep.dev/docs/getting-started/) to install Semgrep.\n\n## Usage\n\n1. Open a binary file with Binary Ninja.\n2. Navigate to the `Plugins` menu and select `Semgrep analysis`.\n3. Select your Semgrep ruleset.\n   To write your own semgrep rules, follow the instructions found [here](https://semgrep.dev/docs/writing-rules/rule-ideas/)!\n   Some examples of rules are available [here](https://github.com/semgrep/semgrep-rules/tree/develop/c/lang/security) and [here](https://github.com/0xdea/semgrep-rules).\n4. The plugin will analyse the binary, run Semgrep, and display the findings in an HTML report.\n\n## Contributing\n\nContributions to `semgrep_bn` are welcome.\nPlease feel free to submit issues, fork the repository, and send pull requests!\n",
    "minimumbinaryninjaversion": 3500,
    "name": "semgrep-bn",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e0b2c050-116d-47b7-ae4e-32defd719829/versions/80befa68-b15e-45e0-bad2-98cf082200a8/platforms/475/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e0b2c050-116d-47b7-ae4e-32defd719829/versions/80befa68-b15e-45e0-bad2-98cf082200a8/platforms/475/download?notrack=1",
    "path": "interruptlabs_semgrep_bn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 33,
      "updated_at": "2025-02-04 02:34:19+00:00"
    },
    "projectUrl": "https://github.com/interruptlabs/semgrep_bn",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "3Flatline LLC",
    "dependencies": "requests\ntiktoken\nsupabase\ngotrue\n",
    "description": "Uses Dixie code scanner to find vulnerabilities using the Binary Ninja C representation",
    "installinstructions": {},
    "lastUpdated": 1712022661,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 3Flaltine LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Dixie Vuln Scanner Plugin (v0.1)\nAuthor: **3Flatline LLC**\n\n_Powerful static code analyzer that uses a db of 200k vulnerabilities to scan and find bugs in a number of languages._\n\n## Description:\n\nThe Dixie Code Scanner plugin leverages the Dixie Code Scanner engine https://3flatline.ai to find vulnerabilities in a number of languages better than other SAST tools. This Binja integration leverages specific features of the engine for C analysis and allows a user to submit decompiled functions directly from the Binary Ninja window.  Users have the capability to get function descriptions and optionally scan for vulnerabilities in the decompiled code.\n\nThis plugin requires a scubscription to the Dixie Code Scanner, which can be purchased at (https://3flatline.ai/binja)\n\nCheck out our overview video here: https://www.youtube.com/watch?v=7IEUEgoZC9Q\n\nBut 3Flatline, why would I use an LLM for Reverse Engineering? I don't want anyone to know what I'm doing!\n\nTouche, but the Dixie Code Scanner engine is designed to be as private as possible while still leveraging medium/large versions of LLMs, which we have found to be the most performant at specific tasks. Contrary to \"throwing code at an LLM\", it turns out most LLMS are TERRIBLE at code analysis. So the Dixie Code Scanner engine does a significant amount of analysis before even getting to an LLM.\n\n\"Well, how is it private?\"\n-You, probably\n\nOur thoughts:\n- We don't retain or retrain on any of your data. All the data we use in our process to identify vulnerabilities is pure: no false positives. Adding your code with \"potential\" vulnerabilities dilutes the effectiveness of our process.\n- We run a combination of self-hosted models and private inference endpoints using models we have found to be the most performant for certain tasks. None of these models are retraining on your data and the privacy policies of our providers mimic this.\n- No self-identifying information is sent from our engine to the LLMs (unless you put your name in your code).\n- Our database automatically deletes results after 7 days because we don't want to be a massive db of code weaknesses.\n- Your code snippets are deleted immediately upon analysis from our servers.\n- We have designed in local storage to this plugin: so don't keep things on the server or we will delete them!\n- Logs in the backend don't store your source data, it specifically captures what is happening in the engine for debugging to stop accidental retention.\n\n3Flatline was founded by a pair of hackers who understand where you are coming from and have built a platform sensitive to that. It turns out the privacy researchers care about is the same kind of privacy enterprises care about. We would rather make a business supporting vulnerability research than harvesting your data.\n\n*If you're a business or government agency and REALLY want something more private, reach out to info@3flatline.ai. We have other deployment models like deploying into your tentant or running a full offline box for ultra-sensitive environments.* \n\n\n## Installation Instructions\n\n### Darwin\n\nno special instructions, package manager is recommended\n\n### Linux\n\nno special instructions, package manager is recommended\n\n### Windows\n\nno special instructions, package manager is recommended\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 1528\n\n\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n * pip - pygments>=2.7.0,<2.9.0\n\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 3120,
    "name": "Dixie",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ecb7d3d6-f112-4f59-8394-c5c19e4b0fb8/versions/828d6283-df78-4673-902b-f923a0dce3f8/platforms/481/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ecb7d3d6-f112-4f59-8394-c5c19e4b0fb8/versions/828d6283-df78-4673-902b-f923a0dce3f8/platforms/481/download?notrack=1",
    "path": "3Flatline_DixieBinjaPlugin",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 10,
      "updated_at": "2024-04-02 01:51:01+00:00"
    },
    "projectUrl": "https://github.com/3Flatline/DixieBinjaPlugin",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Tim Blazytko",
    "dependencies": "huggingface_hub>=0.21.4\nllama-cpp-python>=0.2.56\nnetworkx>=3.2.1\ntoml>=0.10.2\ntyper>=0.11\n",
    "description": "Provides automated reverse engineering assistance through the use of local large language models (LLMs) on consumer hardware.",
    "installinstructions": {},
    "lastUpdated": 1718942220,
    "license": {
      "name": "GPL-2.0",
      "text": "Copyright 2024 Tim Blazytko\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>."
    },
    "longdescription": "# ReverserAI (v1.1)\nAuthor: **Tim Blazytko**\n\n_Provides automated reverse engineering assistance through the use of local large language models (LLMs) on consumer hardware._\n\n## Description:\n\n_ReverserAI_ is a research project designed to automate and enhance reverse engineering tasks through the use of locally-hosted large language models (LLMs). Operating entirely offline, this initial release features the automatic suggestion of high-level, semantically meaningful function names derived from decompiler output. _ReverserAI_ is provided as a Binary Ninja plugin; however, its architecture is designed to be extended to other reverse engineering platforms such as IDA and Ghidra.\n\nWhile local LLMs do not match the performance and capabilities of their cloud-based counterparts like ChatGPT4 and require substantial computing resources, they represent a significant step forward in balancing performance with confidentiality requirements.\n\n_ReverserAI_ serves as an initial exploration into the potential of local LLMs as aids in reverse engineering on consumer-grade hardware. It showcases what is currently achievable and plans to be a playground for future developments in the realm of AI-assisted reverse engineering. Additionally, the project explores the benefits of combining static analysis techniques with modern AI capabilities to improve the accuracy of AI-assisted reverse engineering.\n\n\nSome example use cases can be found in [examples](./examples).\n\n> [!NOTE]\n> Disclaimer: My expertise in machine learning and LLMs is limited. There may exist more efficient models or methods to achieve similar tasks with greater performance. This project represents a culmination of research into viable configurations, offering a stable foundation with acceptable performance. Feedback and contributions to improve _ReverserAI_ are highly encouraged.\n\n\n## Core Features\n\n- **Offline Operation**: Runs LLMs entirely on local CPU/GPU, ensuring data privacy and security.\n\n- **Automatic Function Naming**: Automatically suggests semantically meaningful function names from decompiler output.\n\n- **Binary Ninja Integration**: Seamlessly integrates as a plugin with Binary Ninja.\n\n- **Modular Architecture**: Designed for easy extension to support other reverse engineering tools like IDA and Ghidra.\n\n- **Consumer Hardware Compatibility**: Optimized to run on consumer-grade hardware, such as Apple silicon architectures.\n\n- **Enhanced AI with Static Analysis**: Improves AI-based analysis and suggestions by incorporating insights from static analysis, providing a richer context and more accurate results.\n\n\n## Installation\n\n_ReverserAI_ can be easily integrated via Binary Ninja's plugin manager. Alternatively, for those preferring command line installation, execute in Binary Ninja's `plugins` folder:\n\n```bash\ngit clone https://github.com/mrphrazer/reverser_ai.git\ncd reverser_ai\n\n# install requirements\npip3 install -r requirements.txt\n\n# install ReverserAI\npip3 install .\n```\n\nUpon initial launch, the tool will automatically download the (default `mistral-7b-instruct-v0.2.Q4_K_M.gguf` large language model file (~5GB). The download time varies based on internet connection speed. To manually initiate the download or download other models, execute the [`model_download.py`](scripts/model_download.py) script.\n\n\n## Hardware Requirements\n\nFor optimal LLM performance on consumer-grade hardware, a setup with multiple CPU threads or a powerful GPU is advised. _ReverserAI_ runs efficiently on systems with at least 16 GB of RAM and 12 CPU threads, with queries taking about 20 to 30 seconds. GPU optimizations, especially on Apple silicon devices, can reduce this to 2 to 5 seconds per query.\n\n\n## Usage\n\n_ReverserAI_ is accessible through Binary Ninja's user interface and via command line.\n\n### User Interface\n\nTo invoke the plugin within Binary Ninja, navigate to `Plugins -> ReverserAI` and, for example, run \"Rename All Functions\":\n\n<p align=\"left\">\n<img alt=\"Plugin Menu\" src=\"imgs/plugin_menu.png\" width=\"500\"/>\n</p>\n\nDepending on the total number of functions in the binary, this may take a while. The AI-assisted function name suggestions will appear in the Log window:\n\n<p align=\"center\">\n<img alt=\"Binary Ninja Log\" src=\"imgs/plugin_results.png\"/>\n</p>\n\n\n### Configuration\n\nConfiguring _ReverserAI_ to match your hardware setup optimizes its performance. Key configuration parameters include CPU and GPU utilization preferences: For powerful GPUs, configure _ReverserAI_ to primarily use GPU, reducing CPU threads to minimize overhead. Without a strong GPU, increase CPU thread usage to maximize processing power. For systems with balanced resources, allocate tasks between CPU and GPU for efficient operation. Another dimension is the selection of the underlying model which greatly influences _ReverserAI_'s functionality, performance, and resource consumption. Below, key configuration parameters are outlined along with guidance on model selection based on your computational resources and requirements.\n\n\n* `model_identifier`: Choose between `mistral-7b-instruct` and `mixtral-8x7b-instruct` to best suit your analysis needs and hardware capabilities. \n  - `mistral-7b-instruct` is a smaller, faster model requiring approximately 5GB of RAM, ideal for quick processing tasks. It is best suited for environments with limited computational resources or when high throughput is required, albeit with a trade-off in the quality of outputs compared to larger models.\n  - `mixtral-8x7b-instruct` is a larger model designed, ideal for more complex code analysis tasks, requiring approximately 25GB of RAM. This model is recommended for users with access to high-end hardware and who need enhanced reasoning capabilities and accuracy. It may necessitate disabling memory mapping on machines that cannot support the required RAM level.\n\n* `use_mmap`: Enables memory mapping of the model files when set to `true`. This allows the model to load parts of the data on-demand, which can improve performance and reduce memory usage, especially for very large models.\n\n* `n_threads`:  Specifies the number of CPU threads to utilize. Maximize CPU thread count to the number of available CPU threads for full utilization, or set to 0 to disable.\n\n* `n_gpu_layers`: Determines GPU layer usage. Enter values up to 99 for powerful GPUs, or 0 to disable GPU processing.\n\n* `seed`: A fixed seed ensures deterministic behavior for debugging (consistent output for identical inputs). Modify the seed for varied responses.\n\n* `verbose`:  Enabling `verbose` mode provides detailed logs about the model and configuration settings.\n\nThe default configuration is designed to strike a balance between performance and resource usage, with a preference for GPU acceleration where feasible. Adjust these settings based on your specific hardware capabilities and the requirements of your reverse engineering tasks to achieve optimal performance.\n\n\n#### Binary Ninja\n\nTo adjust settings in Binary Ninja, open `Settings` and search for `reverser_ai`. Changes require Binary Ninja to be restarted.\n\n<p align=\"center\">\n<img alt=\"Plugin Settings\" src=\"imgs/plugin_settings.png\"/>\n</p>\n\nEach change requires a restart of Binary Ninja.\n\n\n#### Parameter Tuning\n\nFor detailed parameter adjustment, utilize the [`gpt_function_namer.py`](scripts/gpt_function_namer.py) script with a configuration file, starting with the provided [`example_config.toml`](example_config.toml):\n\n```\n$ time python3 scripts/gpt_function_namer.py example_config.toml\nSuggested name: xor_two_numbers\n\nreal\t0m1.550s\nuser\t0m0.268s\nsys\t0m0.223s\n```\n\n\n## Static Analysis to Improve AI-based Analysis\n\n_ReverserAI_ explores how to enrich AI-related reverse engineering tasks by providing more context through static analysis. Initially, Context-Aware Function Renaming is the only implemented feature.\n\n\n### Context-Aware Function Renaming\n\nExperiments have shown that function renaming is especially effective for functions with contextual information, such as external API functions or strings that provide context for the AI. The goal is to narrow the analysis scope and focus on functions where context from strings, symbols, and other static analysis data can be leveraged.\n\n\n## Code Organization\n\n_ReverserAI_'s codebase maintains a clear separation between generic LLM functionalities and tool-specific integration, ensuring modularity and ease of extension. Below is an overview of the primary components:\n\n- **`gpt` Folder**: Contains code for interacting with large language models (LLMs). This includes:\n  - A generic agent (`agent.py`) for model-agnostic operations.\n  - A specialized module (`function_name_gpt.py`) for generating function name suggestions.\n\n- **`binary_ninja` Folder**: Hosts wrapper instances that:\n  - Utilize Binary Ninja features to produce decompiler outputs.\n  - Interface with the `gpt` folder's agents, enabling LLM-powered function naming within Binary Ninja.\n  \n\n## Limitations and Future Work\n\n_ReverserAI_ serves as a proof of concept that demonstrates the potential of leveraging local LLMs for reverse engineering tasks on consumer-grade hardware. Currently, its primary functionality is to offer function name suggestions, but there exists significant scope for enhancement and expansion. Future directions could include:\n\n* Investigating additional interaction methods and parameters with LLMs to enhance quality and processing speed.\n\n* Adding network communication for hosting the _ReverserAI_ agent on a powerful server, circumventing local hardware constraints.\n\n* Fine-tuning existing models or developing specialized models tailored to reverse engineering needs.\n\n* Expanding functionality to include code explanations, analysis, and bug detection, subject to scalability and feasibility.\n\n* Extending support to other reverse engineering platforms such as IDA and Ghidra.\n\nThis project welcomes further contributions, suggestions, and enhancements, including pull requests.\n\n\n## Contact\n\nFor more information, contact [@mr_phrazer](https://twitter.com/mr_phrazer).\n",
    "minimumbinaryninjaversion": 2487,
    "name": "ReverserAI",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/dd5abc00-3802-4e5e-9439-c36af2f29451/versions/36504524-7d14-4472-b908-aba105e5e33f/platforms/487/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/dd5abc00-3802-4e5e-9439-c36af2f29451/versions/36504524-7d14-4472-b908-aba105e5e33f/platforms/487/download?notrack=1",
    "path": "mrphrazer_reverser_ai",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 951,
      "updated_at": "2024-06-21 03:57:00+00:00"
    },
    "projectUrl": "https://github.com/mrphrazer/reverser_ai",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Brandon Miller",
    "dependencies": "",
    "description": "Binary Ninja plugin for inspecting UEFI firmware images",
    "installinstructions": {},
    "lastUpdated": 1709153707,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 Brandon Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# efi-inspector\n\nAuthor: **Brandon Miller (zznop)**\n\n_Binary Ninja plugin for inspecting UEFI firmware images_\n\n## Description\n\nEFI Inspector is a Binary Ninja plugin for inspecting UEFI firmware flash images. It is capable\nof loading UEFI flash dumps and identifying flash regions, Firmware File System (FFS) volumes,\nand FFS files. EFI Inspector facilitates multiple operations to include generating a markdown\nreport on the FFS layout, searching the file system for EFI files by GUID, and extracting EFI files\nto disk.\n\n**Load UEFI Flash Image**\n\n![demo load](img/loader.png)\n\n**Generate Markdown Report on Firmware File System Layout**\n\n![demo report](img/ffs-layout.png)\n\n**Extract a EFI File from Firmware File System**\n\n![demo extract](img/extract-file.png)\n\n**Search EFI Firmware File System for Blob by GUID**\n\n![demo search](img/guid-search.png)\n\n## Installation Instructions\n\n### Darwin\n\nno special instructions, package manager is recommended\n\n### Windows\n\nno special instructions, package manager is recommended\n\n### Linux\n\nno special instructions, package manager is recommended\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4333\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Metadata Version\n\n2\n\n## Related Projects\n\n* [UEFITool](https://github.com/LongSoft/UEFITool)\n* [uefi-firmware-parser](https://github.com/theopolis/uefi-firmware-parser)\n",
    "minimumbinaryninjaversion": 4333,
    "name": "EFI Inspector",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7d3eab98-9828-4e6a-9d22-341ced38aa19/versions/93e02cbc-e8da-4e98-b94a-b033c7016611/platforms/493/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7d3eab98-9828-4e6a-9d22-341ced38aa19/versions/93e02cbc-e8da-4e98-b94a-b033c7016611/platforms/493/download?notrack=1",
    "path": "zznop_efiinspector",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 8,
      "updated_at": "2024-02-28 20:55:07+00:00"
    },
    "projectUrl": "https://github.com/zznop/efi-inspector",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Brandon Miller",
    "dependencies": "",
    "description": "Binary Ninja plugin for loading EFI Terse Executable files",
    "installinstructions": {},
    "lastUpdated": 1709153687,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 Brandon Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# te-loader\n\nAuthor: **Brandon Miller (zznop)**\n\n_Binary Ninja loader for EFI Terse Executables_\n\n## Description\n\nTE Loader is a Binary Ninja plugin for loading Terse Executables (TE). It parses the TE image\nheader and section headers to load the TE file into Binary Ninja and facilitate analysis. TE files\nare found in UEFI firmware images. See the [efi-inspector](https://github.com/zznop/efi-inspector)\nplugin to analyze and extract TE files from UEFI flash dumps.\n\n![demo load](screenshot.png)\n\n## Installation Instructions\n\n### Darwin\n\nno special instructions, package manager is recommended\n\n### Windows\n\nno special instructions, package manager is recommended\n\n### Linux\n\nno special instructions, package manager is recommended\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4333\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 4333,
    "name": "TE Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/6a61dbd8-880b-40d9-b5e3-78f8c8aab183/versions/de139bbe-db23-4dd8-9a02-62bf9487cf13/platforms/499/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/6a61dbd8-880b-40d9-b5e3-78f8c8aab183/versions/de139bbe-db23-4dd8-9a02-62bf9487cf13/platforms/499/download?notrack=1",
    "path": "zznop_teloader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 3,
      "updated_at": "2024-02-28 20:54:47+00:00"
    },
    "projectUrl": "https://github.com/zznop/te-loader",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "x64dbg",
    "dependencies": "",
    "description": "Official x64dbg plugin for Binary Ninja.",
    "installinstructions": {},
    "lastUpdated": 1737748937,
    "license": {
      "name": "MIT",
      "text": "MIT License\n\nCopyright (c) 2025 x64dbg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
    },
    "longdescription": "# x64dbgbinja\n\nOfficial x64dbg plugin for [Binary Ninja](https://binary.ninja).\n\n## Installation\n\nFrom the Plugins Menu, select \"Manage Plugins\". Search for \"x64dbgbinja\" and click the \"Install\" button.\n\n## Menu options\n\n### Import database\n\nImport comments/labels from an uncompressed x64dbg JSON database in Binary Ninja.\n\nSymbols for imported functions and or library functions can be overwritten via the \"Overwrite X\" entries in Settings.\n\n### Export database\n\nExport comments/labels to a JSON database that can be loaded by x64dbg.\n\nTo export labels only: uncheck \"Export Comments\" under \"x64dbg Database Export\" in Settings.\n",
    "minimumbinaryninjaversion": 6455,
    "name": "x64dbgbinja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/1a43b06c-234c-49a6-9701-5793cb05d6a3/versions/2bd1e87d-4629-44dc-b3cd-a5d1434808ba/platforms/505/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/1a43b06c-234c-49a6-9701-5793cb05d6a3/versions/2bd1e87d-4629-44dc-b3cd-a5d1434808ba/platforms/505/download?notrack=1",
    "path": "x64dbg_x64dbgbinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 80,
      "updated_at": "2025-01-24 20:02:17+00:00"
    },
    "projectUrl": "https://github.com/x64dbg/x64dbgbinja",
    "subdir": "",
    "type": [
      "sync"
    ],
    "version": "2.0.5"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Claudio Teixeira",
    "dependencies": "",
    "description": "A plugin that renames Delphi functions according to a .map file produced by IDR.",
    "installinstructions": {},
    "lastUpdated": 1704987146,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 Claudio Teixeira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Delphi Mapper (v0.1)\nAuthor: **Claudio Teixeira**\n\n_A plugin that renames Delphi functions according to a .map file produced by IDR._\n\n## Description:\n\nParses a .map file produced by IDR (Interactive Delphi Reconstructor) and replaces the names of functions at their corresponding adresses.\n\nTo acquire a MAP file:\n![MAP generator in IDR](IDR_example.png)\n\n\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 2784\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 2784,
    "name": "Delphi Mapper",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9e96f3b7-12cf-4df2-890c-5bca467c9f63/versions/060e1e1d-6e68-42f0-8484-1c206248b9e3/platforms/511/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9e96f3b7-12cf-4df2-890c-5bca467c9f63/versions/060e1e1d-6e68-42f0-8484-1c206248b9e3/platforms/511/download?notrack=1",
    "path": "CTM1_BinjaDelphiMapper",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 1,
      "updated_at": "2024-01-11 15:32:26+00:00"
    },
    "projectUrl": "https://github.com/CTM1/BinjaDelphiMapper",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "psifertex",
    "dependencies": "pypresence",
    "description": "Enables Discord Rich Presence Integration for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1704827649,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 xitan, 2022 LittleDyingDuck, 2024 psifertex\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "<h1 align=\"center\">Binary Ninja Discord Rich Presence Integration</h1>\n<p align=\"center\">\n    <a href=\"https://github.com/psifertex/discordpresence/blob/master/LICENSE\">\n        <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/psifertex/discordpresence\">\n    </a>\n</p>\n\n## Features\n\n![](https://i.imgur.com/sLZSS3u.png)\n\nThe plugin displays the file name of the binary in the current view as well as the elapsed time.\n\nNote that by default, file names will be hidden. To allow file name reporting, disable the `discordpresence.hideFile` setting.\n\n## Requirements\n\nThe plugin uses [`pypresence`](https://pypi.org/project/pypresence/) for the Discord integration. Should be automatically installed by the plugin manager.\n\n## Installation\n\nTo install this plugin, please see the \"Using Plugins\" section of the [Getting Started Guide](https://docs.binary.ninja/getting-started.html#using-plugins). Or use Binary Ninja's built in plugin manager.\n\n## History\n\nProject was originally written by xiten, updated by LittleDyingDuck, then rewritten by psifertex\n\n## License\n\nThis project is licensed under the MIT license.\n\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Discord Integration",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/142fadbb-091f-4cf3-a925-a390076e16ac/versions/2acbd2b6-2880-473f-ab84-4e8ad6c0c049/platforms/517/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/142fadbb-091f-4cf3-a925-a390076e16ac/versions/2acbd2b6-2880-473f-ab84-4e8ad6c0c049/platforms/517/download?notrack=1",
    "path": "psifertex_discordpresence",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 4,
      "updated_at": "2024-01-09 19:14:09+00:00"
    },
    "projectUrl": "https://github.com/psifertex/discordpresence",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Dimitris Zervas",
    "dependencies": "frida\nJinja2\n",
    "description": "Frida plugin for Binary Ninja - continuation of BinRida by @c3r34lk1ll3r",
    "installinstructions": {},
    "lastUpdated": 1712760197,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Andrea Ferraris\nCopyright 2024 <dzervas@dzervas.gr> Dimitris Zervas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Frinja\n\nAuthor: **Dimitris Zervas**\n\nFrida plugin for binary ninja.\n\nA set of jinja-enabled frida scripts using the context of binary ninja's static analysis.\n\nThis is a continuation of the [BinRida](https://github.com/c3r34lk1ll3r/BinRida) plugin by @[c3r34lk1ll3r](https://github.com/c3r34lk1ll3r).\n\n## Usage\n\nFirst of all you'll need to go to `Plugins > Frinja > Settings` to set up the frida\nconnection and the application to be instrumented.\n\nAfterwards you can use any available commands - the `Hook Function` and `Run Hooker`\ncommands are explained [below](#hooker)\n\n### Dump Function Context\n\nIt hooks and gathers all calls and returns of the focused function and generates\na markdown report with the following information:\n\n- Callee address\n- Thread ID\n- Arguments (tries to dereference pointers, read strings and numbers)\n- Return value\n- Register values\n\n### Inspect Function Paths\n\nA code coverage tracer for the focused function that highlights the executed basic blocks\n\n## Hooker\n\nThe main show of this plugin is the `Run Hooker` command. It allows you to trace\nand tamper with the execution of the application.\n\nAfter a function is marked with the `Hook Function` command (or any function with\nthe `Frinja Hooked` tag) all its calls and returns will get logged in the log pane.\n\nThere's also the ability to add pre and post hooks to the function as well as altering\nthe return value.\n\nTo do so a function comment should be added in the following format:\n\n```text\n@prehook: <prehook js code>\n@posthook: <posthook js code>\n@ret: <return value>\n@replace: <replace whole function with js code>\n```\n\nThe return value can be any kind of valid javascript expression\n\n## License\n\nThis plugin is released under a MIT license.",
    "minimumbinaryninjaversion": 3164,
    "name": "Frinja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9e71e3a6-0a56-4652-8f51-5e47900e4302/versions/98c8b731-2ce4-45dc-b4df-bc1a40bc2a2c/platforms/523/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9e71e3a6-0a56-4652-8f51-5e47900e4302/versions/98c8b731-2ce4-45dc-b4df-bc1a40bc2a2c/platforms/523/download?notrack=1",
    "path": "dzervas_frinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 17,
      "updated_at": "2024-04-10 14:43:17+00:00"
    },
    "projectUrl": "https://github.com/dzervas/frinja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.2.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "moval0x1",
    "dependencies": "",
    "description": "Show comments and symbols renamed during the analysis process.",
    "installinstructions": {},
    "lastUpdated": 1708468409,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 <moval0x1>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    },
    "longdescription": "# Comments And Symbols (v1.0.2)\nAuthor: **moval0x1**\n\n_Show comments and symbols renamed during the analysis process._\n\n## Description:\n\nYou can use this plugin to show comments and symbols renamed during the analysis process.\n\n![Comments and Symbols](img/bn-commentsAndSymbols.png)\n\nWhen you need to find a comment that you did, you can filter the text to find it and refresh it when you rename a function or add a new comment.\n\n![Filter](img/bn-filter.png)\n\n## Installation\n\nClone this repo into your Binary Ninja plugin directory.\n\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4526\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n\n## Credits\nInspired by [Comments Viewer](https://github.com/matteyeux/comments-viewer)\n",
    "minimumbinaryninjaversion": 4526,
    "name": "CommentsAndSymbols",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/43a85d45-50ea-4051-b0b6-440c77aa581a/versions/636ce84c-8e88-42df-8944-8171690bc823/platforms/529/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/43a85d45-50ea-4051-b0b6-440c77aa581a/versions/636ce84c-8e88-42df-8944-8171690bc823/platforms/529/download?notrack=1",
    "path": "moval0x1_CommentsAndSymbols",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 3,
      "updated_at": "2024-02-20 22:33:29+00:00"
    },
    "projectUrl": "https://github.com/moval0x1/CommentsAndSymbols",
    "subdir": "",
    "type": [
      "ui",
      "binaryview"
    ],
    "version": "1.0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "moval0x1",
    "dependencies": "",
    "description": "Export notations from Binja to x64dbg",
    "installinstructions": {},
    "lastUpdated": 1708468430,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024 <moval0x1>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    },
    "longdescription": "# BinjaExportTox64dbg (v1.0.2)\nAuthor: **moval0x1**\n\n_Export notations from Binja to x64dbg_\n\n## Description:\n\nExport notations from Binja to x64dbg.\n\nBinja disassembly with renamed/added functions and comments\n![Binja Comments](img/binja-comments.png)\n\nx64dbg disassembly with imported functions and comments\n![x64dbg Comments](img/x64dbg-comments.png)\n\n## Installation Instructions\n\nClone this repo into your Binary Ninja plugin directory.\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 4526\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n\n## Metadata Version\n\n2\n\n## Credits\n\nInspired by [ghidra_ExportToX64dbg](https://github.com/schlafwandler/ghidra_ExportToX64dbg)",
    "minimumbinaryninjaversion": 4526,
    "name": "BinjaExportTox64dbg",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7695facf-9c24-4b65-8cf0-3f186d60a239/versions/b57e1674-5fff-4d75-b605-7e0df7616e95/platforms/535/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7695facf-9c24-4b65-8cf0-3f186d60a239/versions/b57e1674-5fff-4d75-b605-7e0df7616e95/platforms/535/download?notrack=1",
    "path": "moval0x1_BinjaExportTox64dbg",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 7,
      "updated_at": "2024-02-20 22:33:50+00:00"
    },
    "projectUrl": "https://github.com/moval0x1/BinjaExportTox64dbg",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Linus S. (aka PistonMiner)",
    "dependencies": "",
    "description": "Adds the \"gocall\" calling convention",
    "installinstructions": {},
    "lastUpdated": 1702576093,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Linus S. (aka PistonMiner)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Adds support for the calling convention used by the Go Programming Language. Use *Go > Set Go calling convention* after loading the binary (ideally with analysis hold enabled and ensuring that all functions are created either automatically or by running another plugin to recover the symbols).\n\n**Before**\n![](https://github.com/PistonMiner/binaryninja-go-callconv/blob/main/media/before.png?raw=true)\n\n**After**\n![](https://github.com/PistonMiner/binaryninja-go-callconv/blob/main/media/after.png?raw=true)",
    "minimumbinaryninjaversion": 2846,
    "name": "Go Calling Convention",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/8d6bdb4d-5cce-4c97-932c-219cfb5c277b/versions/91c0c0b2-ce30-4fa5-84b2-d2b60cd562c9/platforms/541/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/8d6bdb4d-5cce-4c97-932c-219cfb5c277b/versions/91c0c0b2-ce30-4fa5-84b2-d2b60cd562c9/platforms/541/download?notrack=1",
    "path": "PistonMiner_binaryninjagocallconv",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 2,
      "updated_at": "2023-12-14 17:48:13+00:00"
    },
    "projectUrl": "https://github.com/PistonMiner/binaryninja-go-callconv",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "xclusivor",
    "dependencies": "",
    "description": "Loader for Original Xbox Executables",
    "installinstructions": {},
    "lastUpdated": 1699893372,
    "license": {
      "name": "MIT",
      "text": "Copyright 2023 xclusivor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# binaryninja-xbe\nAuthor: **xclusivor**\n\nOriginal Xbox Executable (XBE) Loader plugin for [Binary Ninja](https://binary.ninja/)\n\n## Description:\nBinary Ninja Binary View plugin for analyzing Original Xbox Executables.\n\nThis will download and execute the [XbSymbolDatabase](https://github.com/Cxbx-Reloaded/XbSymbolDatabase) analyzer for library symbol recovery.\n\n## Installation\nClone this repo into your Binary Ninja plugin directory.\n\nYou can manually install the symbol analyzer by extracting it the into root of the plugins directory.\ne.g. `$XBE_PLUGIN_DIR/XbSymbolDatabase/linux_x64/bin/XbSymbolDatabaseCLI`\n\n## Credits\nInspired by [ghidra-xbe](https://github.com/XboxDev/ghidra-xbe/tree/master)\n\n## License\nThis plugin is released under an [MIT license](./LICENSE).",
    "minimumbinaryninjaversion": 4526,
    "name": "Original Xbox Executable Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/becc8120-a2bb-4f67-803a-bb94e58f2045/versions/d8dcc1da-230c-4135-80cd-2f586ab1e988/platforms/547/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/becc8120-a2bb-4f67-803a-bb94e58f2045/versions/d8dcc1da-230c-4135-80cd-2f586ab1e988/platforms/547/download?notrack=1",
    "path": "xclusivor_binaryninjaxbe",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 4,
      "updated_at": "2023-11-13 16:36:12+00:00"
    },
    "projectUrl": "https://github.com/xclusivor/binaryninja-xbe",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Cindy Xiao",
    "dependencies": "",
    "description": "Rust binary string recovery plugin",
    "installinstructions": {},
    "lastUpdated": 1703470664,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Cindy Xiao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Rust String Slicer\n\nA Binary Ninja plugin to help find the addresses and lengths of strings in Rust binaries.\n\n![A screenshot of Binary Ninja with several structs of type \"RustStringSlice\" defined, each of which contains the address and length of a string.](images/sliced-string-screenshot-border.png)\n\n## Usage\n\nThis plugin provides two new commands:\n\n- _Plugins_ > _Rust String Slicer_ > _Recover String Slices from Readonly Data_\n- _Plugins_ > _Rust String Slicer_ > _Recover String Slices from Code_ \n\n![A screenshot of two entries in the Binary Ninja menu, both under Plugins > Rust String Slicer: Recover String Slices from Readonly Data, and Recover String Slices from Code](images/plugin-actions-border.png)\n\nYou can view the list of recovered strings and their addresses in the Log window.\n\n![The Binary Ninja log window, showing the following text logged under the \"rust_string_slicer.binja_plugin.actions\" category: Candidate string slice b'\\xc3\\xcc\\xcc\\xcc\\xcc\\xcc\\xcc\\xcc' does not decode to a valid UTF-8 string; excluding from final results: 'utf-8' codec can't decode byte 0xc3 in position 0: invalid continuation byte\nRecovered string at addr 0x18003d174, len 0x28: \"library\\core\\src\\unicode\\unicode_data.rs\"\nDefined new RustStringSlice at 0x18003d2c8\nRecovered string at addr 0x18003d174, len 0x28: \"library\\core\\src\\unicode\\unicode_data.rs\"\nDefined new RustStringSlice at 0x18003d2e0\nRecovered string at addr 0x180037ff4, len 0x2c: \"Ll0W8FiHZKeuZFO65DVloBXrq3wo05J9TDdw10yl78k=\"\nDefined new RustStringSlice at 0x180045010\nRecovered string at addr 0x180038020, len 0x2c: \"GONj/LrybW0VQXVpyZRIvZLFPOqUKx5aBVCmW0o4AoY=\"](images/recovered-strings-log-border.png)\n\nThe plugin will also create a new `RustStringSlice` type, for any strings defined in read-only data sections that are made up of a pointer to string data + the length of that string data. You can view all created strings of this type by examining cross-references to the `RustStringSlice` type.\n\n![The Binary Ninja Types and Cross References window, showing references to the RustStringSlice type, which has fields char* address and int64_t length. Cross references include variables with names like \"str_\"src\\lib.rs\"\", \"str_\"C:\\Users\\Administrator\\.cargo\\registry\"\", and \"str_\"Impossible: must only have 0 to 8 input bytes in last chunk, with no invalid lengths\"](images/cross-references-rust-string-slice-type-border.png)\n\n## How does this work?\n\nThe original motivation for this plugin was to recreate the string slicing functionality in the tech preview of the [official IDA Rust Analysis Plugin from Hex-Rays](https://hex-rays.com/blog/rust-analysis-plugin-tech-preview/). That plugin is able to find the lengths of Rust strings, which are not null terminated, via some heuristics for finding the string length data.\n\nThe heuristics we use are the following:\n\n- Enumerate all addresses in the binary's read-only data section which have cross-references.\n- Treating each of those addresses as the beginning of a potential string literal.\n- Follow those cross references to see if there is some information around the site of that cross reference about string length.\n\nThe _Recover String Slices from Readonly Data_ command uses cross references which point to a data section. For each of these cross references, try to interpret the cross referenced address as a structure like the following, with some heuristics to determine whether the found length_of_string_literal is reasonable:\n\n```\nQWORD address_of_candidate_string_literal\nQWORD length_of_string_literal\n```\n\n![](images/readonly-data-string-slices-border.png)\n\n\nThe _Recover String Slices from Code_ command uses cross references which point to a code section. For each of these cross references, check to see if the subsequent instructions contain a move of an immediate value to a memory location; the immediate value is then taken as the string length. For example, for x64 binaries, look for instructions like this:\n\n```\nlea rax, <address_of_candidate_string_literal>\nmov [rsp+<string_var>.<string_pointer_field>], rax\nmov [rsp+<string_var>.<string_length_field>], 15\n```\n\n![](images/code-string-slices-border.png)\n\n\n## Development\n\n### Setting up a development environment\n\nTo set up a development environment, including setting up a Python virtual environment:\n\n```\npython -m venv .venv && . .venv/bin/activate\npython -m pip install -r requirements.txt\npython -m pip install -r dev-requirements.txt\npython $PATH_TO_BINARY_NINJA_INSTALLATION/scripts/install_api.py\n```\n\nFor formatting, linting, and running unit tests locally, install [Nox](https://nox.thea.codes/en/stable/tutorial.html), then:\n\n```\nnox\n```\n\nYou can also invoke each task separately; see [noxfile.py](noxfile.py) for more details on available tasks:\n\n```\nnox -s format\nnox -s lint\nnox -s test\n```\n\nLinting and unit testing (both against multiple Python versions) are also set up in CI on [GitHub Actions](.github/workflows/ci.yml).\n\n### Testing local versions of the plugin\n\nTo test the plugin locally in your own Binary Ninja installation during development, create a symbolic link between your development folder, and the [Binary Ninja user plugins folder](https://docs.binary.ninja/guide/index.html#user-folder), so that your development folder is loaded by Binary Ninja on startup as a plugin.\n\n- MacOS:\n\n    ```sh\n    ln -s --relative . ~/Library/Application\\ Support/Binary\\ Ninja/plugins/rust_string_slicer\n    ```\n\n- Linux:\n\n    ```sh\n    ln -s --relative . ~/.binaryninja/plugins/rust_string_slicer\n    ```\n\n- Windows (Powershell):\n    ```powershell\n    New-Item -ItemType Junction -Value $(Get-Location) -Path \"$env:APPDATA\\Binary Ninja\\plugins\\rust_string_slicer\n    ```\n\nYou should then change the values of the following Python settings in Binary Ninja to point to inside your development folder's virtual environment:\n\n- `python.binaryOverride`: Set this to the path of the Python interpreter inside your development virtual environment, e.g. `$DEVELOPMENT_FOLDER/rust_string_slicer/.venv/bin/python/`\n- `python.virtualenv`: Set this to the path of the `site-packages` directory inside your development virtual environment, e.g. `$DEVELOPMENT_FOLDER/rust_string_slicer/.venv/lib/python3.11/site-packages`",
    "minimumbinaryninjaversion": 3814,
    "name": "Rust String Slicer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/65222c17-5d4c-400a-a54d-9d7b687caed9/versions/62d8c4fd-935d-4e9c-a294-6f5483c9aa37/platforms/553/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/65222c17-5d4c-400a-a54d-9d7b687caed9/versions/62d8c4fd-935d-4e9c-a294-6f5483c9aa37/platforms/553/download?notrack=1",
    "path": "cxiao_rust_string_slicer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 20,
      "updated_at": "2023-12-25 02:17:44+00:00"
    },
    "projectUrl": "https://github.com/cxiao/rust_string_slicer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Saagar Jha",
    "dependencies": "",
    "description": "Demangles Swift functions.",
    "installinstructions": {},
    "lastUpdated": 1694767168,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Saagar Jha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Sample Plugin\nAuthor: **Saagar Jha**\n\nIt demangles Swift, not really much to it\n\n## Description:\nLiterally just shells out to swift-demangle for any symbol that looks like a mangled Swift symbol\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Swift Demangler",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a44dceae-a84f-49c5-9286-78e0160b239d/versions/473f4b8d-44fe-4cff-86a1-a8e074813eca/platforms/559/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a44dceae-a84f-49c5-9286-78e0160b239d/versions/473f4b8d-44fe-4cff-86a1-a8e074813eca/platforms/559/download?notrack=1",
    "path": "saagarjha_binjaswiftdemangler",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 13,
      "updated_at": "2023-09-15 08:39:28+00:00"
    },
    "projectUrl": "https://github.com/saagarjha/binja-swift-demangler",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Xusheng",
    "dependencies": "",
    "description": "Add information recovered by tool GoReSym into the binary view",
    "installinstructions": {},
    "lastUpdated": 1721287720,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# binja-GoReSym\n\nBinary Ninja plugin to load the json result generated by the [GoReSym](https://github.com/mandiant/GoReSym) project\n\n## Usage\n\n- Download the `GoReSym` tool from https://github.com/mandiant/GoReSym/releases\n- Run `GoReSym` on a Golang binary and save the json result into a file\n- In Binary Ninja, open the Golang binary\n- Right click, select `Plugins` -> `Apply GoReSym Info`\n- In the dialog that pops up, select the json file generated above\n- Observe function names are applied\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Add GoReSym Info",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/74806570-5633-49d2-9c30-0c3e191088bf/versions/fde669e1-6e3d-4365-97cf-75567b101d11/platforms/565/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/74806570-5633-49d2-9c30-0c3e191088bf/versions/fde669e1-6e3d-4365-97cf-75567b101d11/platforms/565/download?notrack=1",
    "path": "xusheng6_binjaGoReSym",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-07-18 07:28:40+00:00"
    },
    "projectUrl": "https://github.com/xusheng6/binja-GoReSym",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Xusheng",
    "dependencies": "",
    "description": "Add xref from caller to callee based on XFG hashes",
    "installinstructions": {},
    "lastUpdated": 1686463325,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# add-xfg-xref\nA Binary Ninja plugin to add xref from caller to callee based on XFG hashes\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Add XFG Xref",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/3821f1ca-2daf-4a6e-b37e-96278d6ba8ed/versions/2b4af8b6-d9ce-45a9-a720-4884d3a3aa0c/platforms/571/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/3821f1ca-2daf-4a6e-b37e-96278d6ba8ed/versions/2b4af8b6-d9ce-45a9-a720-4884d3a3aa0c/platforms/571/download?notrack=1",
    "path": "xusheng6_addxfgxref",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 2,
      "updated_at": "2023-06-11 06:02:05+00:00"
    },
    "projectUrl": "https://github.com/xusheng6/add-xfg-xref",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Cindy Xiao",
    "dependencies": "pyparsing>=3.0.0\n",
    "description": "An extremely experimental Binary Ninja importer for the type layout information emitted by the -Zprint-type-sizes flag of the Rust compiler.",
    "installinstructions": {},
    "lastUpdated": 1682576567,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Cindy Xiao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja Rust Type Layout Helper Plugin \ud83e\udd80\n\nAn extremely experimental Binary Ninja importer for the type layout information emitted by the [`-Zprint-type-sizes` flag](https://nnethercote.github.io/perf-book/type-sizes.html) of the Rust compiler.\n\nThis plugin is meant to help reverse engineers with the following:\n- Getting a sense of how, in general, Rust data structures are laid out in memory.\n- Getting more comfortable with certain core data structures which appear in Rust binaries.\n\n![A screenshot of Binary Ninja's Types view in the sidebar, showing the imported definitions and layouts of several Rust types from `std::sys::windows`.](images/std-sys-windows-types-border.png)\n\n## How to use this plugin\n\nCompile some Rust code with the following options:\n\nMacOS / Linux:\n\n```sh\ncargo clean\nRUSTFLAGS=-Zprint-type-sizes cargo +nightly build -j 1 > type-sizes.txt\n```\n\nWindows (Powershell):\n\n```powershell\ncargo clean\n$env:RUSTFLAGS=\"-Zprint-type-sizes\"; cargo +nightly build -j 1 > type-sizes.txt\n```\n\nThe following are all necessary for this to work:\n- `cargo clean` is required before you do the build, i.e. this needs to be a completely fresh build. This is required to avoid missing information in the output.\n- `-Zprint-type-sizes` in the `RUSTFLAGS` passed to rustc. This flag is what actually triggers `rustc` to produce the type information.\n- `+nightly` passed to cargo, as the `print-type-sizes` flag is only supported on nightly toolchain builds.\n- `-j 1` to avoid shuffled lines in the output.\n\nYou should see output like this in the generated `type-sizes.txt` file:\n\n```\nprint-type-size type: `core::num::dec2flt::decimal::Decimal`: 784 bytes, alignment: 8 bytes\nprint-type-size     field `.digits`: 768 bytes\nprint-type-size     field `.num_digits`: 8 bytes\nprint-type-size     field `.decimal_point`: 4 bytes\nprint-type-size     field `.truncated`: 1 bytes\nprint-type-size     end padding: 3 bytes\nprint-type-size type: `std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>`: 616 bytes, alignment: 8 bytes\nprint-type-size     variant `Ok`: 616 bytes\nprint-type-size         field `.0`: 616 bytes\nprint-type-size     variant `Err`: 8 bytes\nprint-type-size         field `.0`: 8 bytes\nprint-type-size type: `std::sys::windows::fs::ReadDir`: 616 bytes, alignment: 8 bytes\nprint-type-size     field `.handle`: 8 bytes\nprint-type-size     field `.root`: 8 bytes\nprint-type-size     field `.first`: 596 bytes\nprint-type-size     end padding: 4 bytes\nprint-type-size type: `std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>`: 608 bytes, alignment: 8 bytes\nprint-type-size     discriminant: 8 bytes\nprint-type-size     variant `Some`: 600 bytes\nprint-type-size         field `.0`: 600 bytes\nprint-type-size     variant `None`: 0 bytes\n[...]\n```\n\nYou can now use the _Plugins > Rust Type Layout Helper - Load File..._ command to import the contents of this file into Binary Ninja. The following types in Binary Ninja wil be created from the types shown in the example above:\n\n```c\nstruct core::num::dec2flt::decimal::Decimal __packed\n{\n    char .digits[0x300];\n    int64_t .num_digits;\n    int32_t .decimal_point;\n    char .truncated;\n    char _padding[0x3];\n};\n\nstruct std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error> __packed\n{\n    union __packed\n    {\n        struct std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>::Ok Ok;\n        struct std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>::Err Err;\n    } std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>::variants;\n};\n\nstruct std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>::Err __packed\n{\n    int64_t .0;\n};\n\nstruct std::result::Result<std::sys::windows::fs::ReadDir, std::io::Error>::Ok __packed\n{\n    char .0[0x268];\n};\n\nstruct std::sys::windows::fs::ReadDir __packed\n{\n    int64_t .handle;\n    int64_t .root;\n    char .first[0x254];\n    int32_t _padding;\n};\n\nstruct std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>> __packed\n{\n    enum std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::discriminant discriminant;\n    union __packed\n    {\n        struct std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::Some Some;\n        struct std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::None None;\n    } std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::variants;\n};\n\nstruct std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::None __packed\n{\n};\n\nstruct std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::Some __packed\n{\n    char .0[0x258];\n};\n\nenum std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::discriminant : uint64_t\n{\n    Some = 0xffffffffffffffff,\n    None = 0xffffffffffffffff\n};\n```\n\n## Caveats and future work\n\nThere are some caveats to using this:\n- The layout of data types is not stable, and can change between compilations!\n- Only the nightly builds of rustc supports the `print-type-sizes` flag.\n- Binary Ninja's support for working with unions in the decompilation is currently quite poor (see [Vector35/binaryninja-api#1013](https://github.com/Vector35/binaryninja-api/issues/1013), [Vector35/binaryninja-api#4218](https://github.com/Vector35/binaryninja-api/issues/4218)). This may make it difficult to work with the generated `variants` unions, such as `std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>::variants` in the example above.\n- When importing sum types (i.e. Rust enums), the discriminant value used to represent each variant in the sum type does not necessarily match the ordering of those variant in the type layout information, i.e. the first variant is not necessarily discriminant value 0, etc. The information emitted by rustc's `print-type-sizes` flag also does not include the discriminant value for each variant. Therefore, all variants are assigned a discriminant value of -1. To determine the actual determinant value, it is up to the user to reverse the code where the sum type is used.\n\nIn the future it would be nice to:\n- Add scripts / plugins to import the type information into IDA and Ghidra.\n- Use a Rust compiler plugin to emit better type information than we get from `-Zprint-type-sizes`? Maybe a combination of the information we get from `-Zprint-type-sizes` and `#[rustc_layout(...)]`. It would also be nice to emit the type information in a format which is slightly easier to parse (e.g. JSON).\n\n## Installation\n\nThis plugin can be installed via either:\n\n1) Searching for the _Rust Type Layout Helper_ plugin in Binary Ninja's built-in plugin manager (_Plugins > Manage Plugins_). _This is the recommended method._\n\n2) Cloning this repository into your user plugins folder.\n    - The [location of the user plugins folder will vary depending on the platform Binary Ninja is installed on](https://docs.binary.ninja/guide/index.html#user-folder). The easiest way to find the location of the folder is via the _Plugins > Open Plugin Folder..._ command.\n    - If you are performing an installation via this method, you must also install this plugin's Python dependencies manually. This can be done by either:\n        - Running the _Install python3 module..._ command (via the Command Palette), and pasting the contents of [`requirements.txt`](requirements.txt) in this repository into the dialog window.\n        - Running `pip install -r requirements.txt` in the Python environment used by Binary Ninja.\n\nThis plugin requires Python >= 3.7, and Binary Ninja version >= 3.2.3814.\n\n## Development\n\n### Setting up a development environment\n\nTo set up a development environment, including setting up a Python virtual environment:\n\n```\npython -m venv .venv && . .venv/bin/activate\npip install -r requirements.txt\npip install -r dev-requirements.txt\npython $PATH_TO_BINARY_NINJA_INSTALLATION/scripts/install_api.py\n```\n\nFor formatting, linting, and running unit tests locally, install [Nox](https://nox.thea.codes/en/stable/tutorial.html), then:\n\n```\nnox\n```\n\nYou can also invoke each task separately; see [noxfile.py](noxfile.py) for more details on available tasks:\n\n```\nnox -s format\nnox -s lint\nnox -s test\n```\n\nLinting and unit testing (both against multiple Python versions) are also set up in CI on [GitHub Actions](.github/workflows/ci.yml).\n\n### Testing local versions of the plugin\n\nTo test the plugin locally in your own Binary Ninja installation during development, create a symbolic link between your development folder, and the [Binary Ninja user plugins folder](https://docs.binary.ninja/guide/index.html#user-folder), so that your development folder is loaded by Binary Ninja on startup as a plugin.\n\n- MacOS:\n\n    ```sh\n    ln -s --relative . ~/Library/Application\\ Support/Binary\\ Ninja/plugins/rust_type_layout_helper\n    ```\n\n- Linux:\n\n    ```sh\n    ln -s --relative . ~/.binaryninja/plugins/rust_type_layout_helper\n    ```\n\n- Windows (Powershell):\n    ```powershell\n    New-Item -ItemType Junction -Value . -Path \"$env:APPDATA\\Binary Ninja\\plugins\\rust_type_layout_helper\"\n    ```\n\nYou should then change the values of the following Python settings in Binary Ninja to point to inside your development folder's virtual environment:\n\n- `python.binaryOverride`: Set this to the path of the Python interpreter inside your development virtual environment, e.g. `$DEVELOPMENT_FOLDER/rust_type_layout_helper/.venv/bin/python/`\n- `python.virtualenv`: Set this to the path of the `site-packages` directory inside your development virtual environment, e.g. `$DEVELOPMENT_FOLDER/rust_type_layout_helper/.venv/lib/python3.11/site-packages`\n\n## Acknowledgements and resources\n\nThe compilation instructions for emitting type information are taken from the instructions in the [`top-type-sizes` crate, by Paul Loyd](https://github.com/loyd/top-type-sizes).",
    "minimumbinaryninjaversion": 3814,
    "name": "Rust Type Layout Helper",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/49503616-df32-4bd8-8df3-7d8e52a0ecfb/versions/ac22748f-ea92-413f-be9b-f14d0fabd4a3/platforms/577/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/49503616-df32-4bd8-8df3-7d8e52a0ecfb/versions/ac22748f-ea92-413f-be9b-f14d0fabd4a3/platforms/577/download?notrack=1",
    "path": "cxiao_rust_type_layout_helper_bn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 36,
      "updated_at": "2023-04-27 06:22:47+00:00"
    },
    "projectUrl": "https://github.com/cxiao/rust_type_layout_helper_bn",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jon Palmisciano",
    "dependencies": "",
    "description": "A notepad for taking notes inside Binary Ninja.",
    "installinstructions": {},
    "lastUpdated": 1618844480,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 Jon Palmisciano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja Notepad\n\n> A notepad, for Binary Ninja!\n\n![Preview Image](preview.png)\n\n> Screenshot taken with [Screenshot Ninja](https://github.com/jonpalmisc/screenshot_ninja).\n\nThis plugin is still in the early stages, but is functional enough for an\ninitial release. For a list of known bugs and planned features, see the issues\npage on GitHub.\n\n**Bug reports and feature requests are welcome!** Please file an issue on\nGitHub if you run into any difficulties or would like to see a feature added.\n\n## License\n\nCopyright 2021 Jon Palmisciano. Licensed under the MIT License. See LICENSE.txt\nfor additional details.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Notepad",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/08ff9f21-bffb-4374-8f85-42196a503296/versions/20e76a96-9a48-499e-81a4-1df027192844/platforms/583/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/08ff9f21-bffb-4374-8f85-42196a503296/versions/20e76a96-9a48-499e-81a4-1df027192844/platforms/583/download?notrack=1",
    "path": "jonpalmisc_bnnotepad",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 9,
      "updated_at": "2021-04-19 15:01:20+00:00"
    },
    "projectUrl": "https://github.com/jonpalmisc/bn-notepad",
    "subdir": "",
    "type": [],
    "version": "0.3.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Nj\u00f6rd",
    "dependencies": "xdis\npygments",
    "description": "Python bytecode (.pyc) support for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1709499228,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 Nj\u00f6rd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "### BNPyc\n\n## Binary ninja plugin for python bytecode (pyc) disassembly and analysis.\n\nPython versions from 3.0 to 3.10 are supported!\n> IL Lifting is not implemented yet, as a result ILs are not available.\n\n## Installation\n\nClone this repository into BinaryNinja plugin folder and install requirements with pip : \n\n```shell\ncd BNPyc/\npython3 -m pip install -r requirements.txt\n```\n\n## Usage\n\nChoose any `.pyc` file and open it with binary ninja.\n\n![](images/pycview1.png)\nExample with a simple for loop\n\n## Features\n\n- Recursive functions detections and disassembly\n- Branchs annotations\n- Comparisons annotations\n- Inlined `co_consts` `co_names` `co_varnames`\n- Objects mapping\n",
    "minimumbinaryninjaversion": 2170,
    "name": "Python bytecode",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/040f92b7-4522-4f8a-94d6-fdff074abd27/versions/05cbb509-86a3-4cd4-b26c-3f660a9ec2e5/platforms/589/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/040f92b7-4522-4f8a-94d6-fdff074abd27/versions/05cbb509-86a3-4cd4-b26c-3f660a9ec2e5/platforms/589/download?notrack=1",
    "path": "Njord0_BNPyc",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 30,
      "updated_at": "2024-03-03 20:53:48+00:00"
    },
    "projectUrl": "https://github.com/Njord0/BNPyc",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.0.4"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "rikodot",
    "dependencies": "requests\nbs4",
    "description": "Find and create signatures",
    "installinstructions": {},
    "lastUpdated": 1723528236,
    "license": {
      "name": "MIT",
      "text": "MIT License\n\nCopyright (c) 2023 rikodot\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin allows to scan analyzed binaries for signatures and their creation. Supports both normal signatures (e.g. 49 28 15 ? ? 30) and commonly used code signatures (e.g. \"\\x49\\x28\\x15\\x00\\x00\\x30\", \"xxx??x\").\n\nAs title suggests, it is coded in C++ and utilizes Binary Ninja's native API. For this reason this plugin serves just as a loader for the [actual plugin](https://github.com/rikodot/binja_native_sigscan).\n\n![preview](https://github.com/rikodot/binja_native_sigscan/blob/main/preview.gif)",
    "minimumbinaryninjaversion": 0,
    "name": "Native SigScan",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/2c7a1c85-01bb-4f3e-afe3-c10190675573/versions/62039f29-a223-4054-820e-ffcaf4c0c363/platforms/595/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/2c7a1c85-01bb-4f3e-afe3-c10190675573/versions/62039f29-a223-4054-820e-ffcaf4c0c363/platforms/595/download?notrack=1",
    "path": "rikodot_binja_native_sigscan_loader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 5,
      "updated_at": "2024-08-13 05:50:36+00:00"
    },
    "projectUrl": "https://github.com/rikodot/binja_native_sigscan_loader",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.9"
  },
  {
    "api": [
      "python3"
    ],
    "author": "lockbox",
    "dependencies": "SQLAlchemy>=2.0.0\n",
    "description": "Playdate Console RE utilities",
    "installinstructions": {},
    "lastUpdated": 1677633266,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 lockbox\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# pd-ninja\nAuthor: **lockbox**\n\n_Playdate RE Utilities and Loader_\n\n## Description:\nRequires installation of the Playdate SDK which is obtainable [here](https://play.date/dev/). This is not affiliated or endorsed by `Panic Inc.` in any way.\n\nThis plugin does a lot of the tedious tasks and exposes a custom binary view when loading memory dumps from the playdate console.\n\nFeatures:\n\n- can handle user, kernel or full dumps\n- imports type library from `<SDK-ROOT>/C_API/pd_api.h`\n- discovers (user) `.text` and `.data` boundaries (kernel ones are a mess)\n- applies symbols from `<SDK-ROOT>/bin/symbols.db`\n- automatically apply typedefs to api structs / functions\n\n\n## On the Roadmap\n- Define the TLS sections in SRAM\n- Add user friendly way to add SRAM dump to bndb\n- Add lua container types\n- Add a check for \"functions\" in `Symbols.db` being properly\n    - if not aligned, then define it as a data symbol\n- Provide types for static data symbols (gfx + sound + sprites etc.)\n- Find decent heuristics to locate kernel data / code boundaries\n- Signature libraries\n    - need to fiddle with the FreeRTOS signatures some more to get more reliable\n    - need to package the `stm32f7xx` HAL and `lua` (minilua) libraries nicely\n    - probably have to add them as a downloadable artifact from a github release\n- Adding HAL peripheral memory maps, not really useful but for ocd completeness lol\n\n### Obtaining the SDK\n\nA specific version of the SDK can be obtained from:\n\n`https://download.panic.com/playdate_sdk/Windows/PlaydateSDK-<major.minor.revision>.exe`\n\n\n### Notes\n- why is there a bunch of: `Attempting to add function not backed by file: `?\n    - binary ninja assumes a lot of things are code if its coming from something\n    it determined was \"valid\" code, so there's a TON of false positives especially\n    when half the instruction set is valid ascii\n- The only way to obtain firmware is from reading memory of a device\n- Any process can read user space which is from `0x08050000` to `0x080FFFFF`\n- The underlying OS is FreeRTOS with MPU enabled. Use [this](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43997) (or similar) to priv esc\n- why are _so_ many of the strings not automatically defined?\n    - idk man its a data section, ghidra automagically does it but i felt like making a binary ninja plugin\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 3164\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n * pip - SQLAlchemy>=2.0.1\n * apt - clang\n * installers - \n * other - \n\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 3164,
    "name": "pd-ninja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ab1bd709-935d-4c97-89ec-9baa14e6aa21/versions/06aa0c1f-b76f-473c-a797-9f4171db7ebe/platforms/607/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ab1bd709-935d-4c97-89ec-9baa14e6aa21/versions/06aa0c1f-b76f-473c-a797-9f4171db7ebe/platforms/607/download?notrack=1",
    "path": "lockbox_pdninja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 4,
      "updated_at": "2023-03-01 01:14:26+00:00"
    },
    "projectUrl": "https://github.com/lockbox/pd-ninja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "dayzerosec",
    "dependencies": "",
    "description": "Loader for AMD-SP or PSP firmware binaries.",
    "installinstructions": {},
    "lastUpdated": 1674976599,
    "license": {
      "name": "MIT",
      "text": "Copyright 2023 dayzerosec\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# AMD-SP/PSP Loader \n\nAuthor: **SpecterDev**\n\n_Loader for AMD-SP or PSP firmware binaries._\n\n![](https://i.imgur.com/MH9C1hu.png)\n\n## Description\n\nBinary Ninja loader for AMD Secure Processor (SP) / Platform Security Processor (PSP) firmware binaries. It will try to load AGESA Bootloader (ABL) and Bootloader blobs and will setup the correct load addresses.\n\nThe ABL loader will also optionally annotate syscalls using the dictionary in `./data/syscalls.json`.\n\n## Usage\n\nThis loader is intended to be used with binaries extracted via [PSPTool](https://github.com/PSPReverse/PSPTool), as this loader will **not extract firmware from UEFI or perform any decompression before loading**.\n\nSimply load an `ABL*` or `PSP_FW_BOOTLOADER_*` binary to use the loader. Your view name on the top left of the disassembly pane should have an `AMD-SP` prefix. If your particular firmware blob doesn't load and/or loads at an incorrect address, please file an issue.\n\n## Future Work / Places for Contribution\n\n- [ ] Currently load addresses are static, perhaps this should be reworked to dynamically determine it via parsing entrypoint instructions?\n- [ ] Add loaders for other firmwares\n  - [ ] SMU (xtensa)\n  - [ ] Trusted OS (tOS)\n  - [ ] Boot time trustlets\n- [ ] Reverse and add more syscalls to the annotation dictionary\n- [ ] Improve annotations to fix-up syscalls in HLIL\n\n## Notes\n\n- The loaders make some assumptions on the load address and such, so its possible a particular binary differs and won't load properly (open an issue).\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n * release - 3.2.3814\n\n## License\n\nThis plugin is released under a MIT license.\n",
    "minimumbinaryninjaversion": 3814,
    "name": "AMD-SP/PSP Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4814c3f1-bd01-4d69-b84c-17c7a0fdf873/versions/c2c9e100-c8f2-4177-b2ec-0a7964da7c1d/platforms/613/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4814c3f1-bd01-4d69-b84c-17c7a0fdf873/versions/c2c9e100-c8f2-4177-b2ec-0a7964da7c1d/platforms/613/download?notrack=1",
    "path": "dayzerosec_AMDSPLoader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 36,
      "updated_at": "2023-01-29 07:16:39+00:00"
    },
    "projectUrl": "https://github.com/dayzerosec/AMD-SP-Loader",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Zion Basque (@mahaloz)",
    "dependencies": "",
    "description": "Adds support for Binary Ninja decompilation in your debugger, curently only supports GDB",
    "installinstructions": {},
    "lastUpdated": 1725774537,
    "license": {
      "name": "BSD 2-clause",
      "text": ""
    },
    "longdescription": "decomp2dbg will host the decompilation and symbols present in your Binary Ninja View over an XMLRPC server which can bee hooked from within your debugger. As you change you decompilation, so will the debuggers view.",
    "minimumbinaryninjaversion": 1200,
    "name": "decomp2dbg",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b0627d4a-610b-44af-9fb6-fa2b6b4f6b09/versions/b3694893-2acd-4ca4-a6b7-90e99784127e/platforms/619/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b0627d4a-610b-44af-9fb6-fa2b6b4f6b09/versions/b3694893-2acd-4ca4-a6b7-90e99784127e/platforms/619/download?notrack=1",
    "path": "mahaloz_decomp2dbg",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 686,
      "updated_at": "2024-09-08 05:48:57+00:00"
    },
    "projectUrl": "https://github.com/mahaloz/decomp2dbg",
    "subdir": "decompilers/d2d_binja",
    "type": [
      "core"
    ],
    "version": "3.3.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Cindy Xiao",
    "dependencies": "httpx>=0.23.0",
    "description": "Plugin for interacting with the OALabs HashDB service.",
    "installinstructions": {},
    "lastUpdated": 1727851784,
    "license": {
      "name": "3-Clause BSD",
      "text": "BSD 3-Clause License\n\nCopyright (c) 2023, Cindy Xiao\nCopyright (c) 2021, Vector 35\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
    },
    "longdescription": "# #\ufe0f\u20e3 Binary Ninja HashDB Plugin\n\n[HashDB](https://github.com/OALabs/hashdb) is a community-sourced library of hashing algorithms used in malware. This plugin queries the [OALabs HashDB Lookup Service](https://hashdb.openanalysis.net/) for hash values which appear in the currently analyzed file, fetches a list of strings which match those hashes, and collects the string values into an enum type definition. The defined enum type can then be applied to the binary for further analysis.\n\n## Usage\n\n### Looking up a hash (_HashDB - Hash Lookup_)\n\nThe _HashDB - Hash Lookup_ command looks up the hash value highlighted by the cursor.\n\n![](images/hashlookup-screenshot-border.png)\n\n![](images/hashlookup-result-screenshot-border.png)\n\n### Hunting for the correct hash algorithm (_HashDB - Hunt_)\n\nThe _HashDB - Hunt_ command attempts to identify the hash algorithm which was used to generate a particular hash value. The identified algorithm is set as the default algorithm for future hash lookups in this binary, in the _HashDB > HashDB Hash Algorithm_ setting.\n\n![](images/hash-hunt-multiple-options-screenshot-border.png)\n\nIt is the user's responsibility to ensure that the identified hash algorithm is correct! The list of all hash algorithms known to the OALabs HashDB lookup service is maintained at the [OALabs/hashdb repository, under the `algorithms` directory](https://github.com/OALabs/hashdb/tree/main/algorithms); a Python implementation of each hash algorithm is inside each listed file, and can be checked against the implementation of the API hashing function in the binary being analyzed.\n\n### Viewing and applying found hashes\n\nFound hashes are added as enum entries under a new enum type named `hashdb_strings_{NAME_OF_ALGORITHM}`. The names and values of the found hashes can be viewed in the _Types_ menu.\n\n![](images/hash-created-enum-screenshot-border.png)\n\nThe enum type can then be applied to variables in the database.\n\n![](images/hash-created-enum-applied-function-arg-screenshot-border.png)\n\nIf you are using Binary Ninja >= 3.3, you can also apply the resolved hash names using the new _Select Enum_ dialog (accessible by pressing the `M` key, or through _Display as_ > _Enum Member_ in the context menu).\n\n![](images/hash-enum-selection-dialog-screenshot-border.png)\n\nThe name prefix used in the enum type (by default `hashdb_strings`) can be changed in Binary Ninja's settings, under _HashDB > HashDB Enum Name_.\n\n### Looking up multiple hashes (_HashDB - Multiple Hash Lookup_)\n\nMultiple hashes can be selected and looked up at once using the _HashDB - Multiple Hash Lookup_ command.\n\n![](images/multiple-hash-lookup-screenshot-border.png)\n\nThe resolved hashes can then be applied by setting the selected variables to the created enum type.\n\n![](images/multiple-hash-lookup-enum-type-applied-screenshot-border.png)\n\n### Settings\n\nThe settings for this plugin can be changed from Binary Ninja's Settings interface (_Edit > Preferences > Settings_). The settings list can be filtered to show only the HashDB plugin's settings by searching `HashDB` in the Settings search box.\n\nThe following settings are applied globally:\n\n- _HashDB API URL_ (`hashdb.url`). If you wish to use a different HashDB instance than the default OALabs HashDB, such as an internally hosted version, you can change this setting to point at your desired instance.\n- _HashDB Enum Name_ (`hashdb.enum_name`)\n\nThe following settings are specific to an individual binary. They are saved in the analysis database (`.bndb` file) for that binary, and will be restored the next time you open the analysis database.\n\n- _HashDB Hash Algorithm_ (`hashdb.algorithm`)\n- _HashDB Hash Algorithm Data Type_ (`hashdb.algorithm_type`)\n\n![](images/settings-screenshot-border.png)\n\n### Keyboard shortcuts\n\nKeyboard shortcuts can be set for this plugin's commands from Binary Ninja's Keybindings interface (_Edit > Preferences > Keybindings_). The command list can be filtered to show only the HashDB plugin's commands by searching `HashDB` in the Keybindings search box.\n\nThe plugin currently does not ship with any keyboard shortcuts set by default.\n\n## Installation\n\nThis plugin can be installed via either:\n\n1) Searching for the _HashDB_ plugin in Binary Ninja's built-in plugin manager (_Plugins > Manage Plugins_). _This is the recommended method._\n\n2) Cloning this repository into your user plugins folder.\n    - The [location of the user plugins folder will vary depending on the platform Binary Ninja is installed on](https://docs.binary.ninja/guide/index.html#user-folder). The easiest way to find the location of the folder is via the _Plugins > Open Plugin Folder..._ command.\n    - If you are performing an installation via this method, you must also install this plugin's Python dependencies manually. This can be done by either:\n        - Running the _Install python3 module..._ command (via the Command Palette), and pasting the contents of [`requirements.txt`](requirements.txt) in this repository into the dialog window.\n        - Running `pip install -r requirements.txt` in the Python environment used by Binary Ninja.\n\nThis plugin requires Python >= 3.7, and Binary Ninja version >= 2.4.2846.\n\n## License\n\nThis plugin is released under a 3-Clause BSD license.\n\nThis plugin is a derivative work of the [IDA Plugin](https://github.com/OALabs/hashdb-ida/) from [OALabs](https://oalabs.openanalysis.net/) for connecting to their [HashDB service](https://hashdb.openanalysis.net/), and is forked from Vector 35's initial implementation at [psifertex/hashdb-bn](https://github.com/psifertex/hashdb-bn).",
    "minimumbinaryninjaversion": 2846,
    "name": "HashDB",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/654a3d5b-afcf-4957-abb2-9601923311e9/versions/e5cfb5b9-fd83-41c4-ba9f-367120cdf89e/platforms/625/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/654a3d5b-afcf-4957-abb2-9601923311e9/versions/e5cfb5b9-fd83-41c4-ba9f-367120cdf89e/platforms/625/download?notrack=1",
    "path": "cxiao_hashdb_bn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 19,
      "updated_at": "2024-10-02 06:49:44+00:00"
    },
    "projectUrl": "https://github.com/cxiao/hashdb_bn",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.2.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "elbee",
    "dependencies": "",
    "description": "Displays char arrays by analyzing their use in functions",
    "installinstructions": {},
    "lastUpdated": 1674077993,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Dylan Knoff\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja Char Arrays \nAuthor: **elbee**\n\nSimple plugin that analyzes void variables and loads them as defined character arrays.\n\n## Description:\nBinary Ninja does not assume types to be character arrays and initializes them void. This plugin analyzes the selected function for character arrays and re-declares them as such, eg. (char buf\\[size]). Allows buffers to be shown as is and not as void types for preference purposes.\n![](./images/opentftpd_eg.gif)\n\nIn an attempt to cooperate with other architectures, the majority of checks are done with the medium level intermediate language and disassembly. Tested on CTF challenges from coorporate cyber challenges and https://pwnable.tw/challenge/.\n\nTo operate the plugin simply right click in your pane and select an option. The plugin can also mark newly defined character arrays with additional information in tags and/or comments.\n![](./images/ctf_chal_eg_tags.gif)\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Char Arrays",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/dfb02607-1517-4dc1-9ba6-79bcaafb43d7/versions/26b5ed1a-f714-418c-b738-2796a2984398/platforms/631/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/dfb02607-1517-4dc1-9ba6-79bcaafb43d7/versions/26b5ed1a-f714-418c-b738-2796a2984398/platforms/631/download?notrack=1",
    "path": "elbeecyber_analyze_char_arrays",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 12,
      "updated_at": "2023-01-18 21:39:53+00:00"
    },
    "projectUrl": "https://github.com/elbee-cyber/analyze_char_arrays",
    "subdir": "",
    "type": [
      "binaryview",
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jacopo Ferrigno",
    "dependencies": "",
    "description": "BinaryNinja plugin to parse GoLang binaries and restore some information, like function names and type information",
    "installinstructions": {},
    "lastUpdated": 1672943803,
    "license": {
      "name": "MIT",
      "text": "Copyright 2023 Jacopo Ferrigno\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin will parse a go binary and restore information like the functions/file names, by parsing the .gopclntab, and extract typing information from the executable itself.",
    "minimumbinaryninjaversion": 3946,
    "name": "GoLang binary parser",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b57e8ca8-767a-443d-8b18-a8f9d4ed8bb8/versions/a4e88518-93d8-45ac-93f5-c60a2a650be2/platforms/637/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b57e8ca8-767a-443d-8b18-a8f9d4ed8bb8/versions/a4e88518-93d8-45ac-93f5-c60a2a650be2/platforms/637/download?notrack=1",
    "path": "dipusone_golang_pclntab_parser",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 6,
      "updated_at": "2023-01-05 18:36:43+00:00"
    },
    "projectUrl": "https://github.com/dipusone/golang_pclntab_parser",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "skr0x1c0",
    "dependencies": "ipykernel >= 5.1.4\nqtconsole >= 4.3\nqasync >= 0.23.0\njupyter-client >= 6, != 7.*\nnbformat >= 5.7.0",
    "description": "IPython console widget for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1670871248,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 skr0x1c0\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binja IPython\n\nBinja IPython brings the full features provided by [IPython](https://ipython.org) interactive shell to [Binary Ninja](https://binary.ninja). \n\nhttps://user-images.githubusercontent.com/75971916/207032716-0cfb7e31-fb9e-4e7f-bb8c-e8f77df24bf6.mp4\n\n\n## Why use Binja IPython?\n\n1. Provides features like syntax highlighting, magic commands and embedded figures which are not present in the Binary Ninja inbuilt Python console.\n2. Includes all features of inbuilt Python console like magic variables, auto-completion, history, etc.\n3. Can link the Python interpreter instance inside Binary Ninja to a Jupyter notebook / lab.\n4. Will not freeze the UI while scripts are running.\n5. Running scripts can be interrupted with `Ctrl+C` key combination.\n\n\n## Installation\n\n1. Clone this repository to the plugins directory of your Binary Ninja installation.  Example for macOS:\n```shell\ncd ~/Library/Application\\ Support/Binary\\ Ninja/plugins\ngit clone https://github.com/skr0x1c0/ipybinja.git\n```\n\n2. If you have configured Binary Ninja to use a python virtual environment, you will need to activate the virtual environment before continuing.\n\n```shell\nsource ~/.venv_binja/bin/activate\n```\n\n3. Install the required dependencies:\n\n```shell\ncd ipybinja\npip install -r requirements.txt\n```\n\nThat's it!  You should now be able to use the IPython console widget in Binary Ninja.\n\n## Usage\n\n1. For a list of additional magic commands provided by the plugin see [this document](./docs/magic_commands.md)\n2. For using Jupyter lab / notebook with Binary Ninja see [this document](./docs/notebook.md)\n\n## Credits\n\nThis plugin is based on [ipyida](https://github.com/eset/ipyida) IDA Pro plugin.\n\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n",
    "minimumbinaryninjaversion": 3164,
    "name": "Binja IPython console",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ddb25a70-8b45-4480-9ac9-9f96d441a4e1/versions/85fd23aa-92ac-44dd-9846-d5220c4490b4/platforms/643/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ddb25a70-8b45-4480-9ac9-9f96d441a4e1/versions/85fd23aa-92ac-44dd-9846-d5220c4490b4/platforms/643/download?notrack=1",
    "path": "skr0x1c0_ipybinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 14,
      "updated_at": "2022-12-12 18:54:08+00:00"
    },
    "projectUrl": "https://github.com/skr0x1c0/ipybinja",
    "subdir": "",
    "type": [
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "0.2.7"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Asher Davila L.",
    "dependencies": "",
    "description": "Binary Ninja plugin to dump the Pseudo C generated by Binja into a folder.",
    "installinstructions": {},
    "lastUpdated": 1674935821,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2022 Asher Davila L.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "This Binary Ninja plugin is written in Python 3 and it aims to assist with reverse engineering and vulnerability research. It dumps the Pseudo C representation of a binary, generated by Binja's decompiler, into a specified folder.",
    "minimumbinaryninjaversion": 3814,
    "name": "Pseudo C Dump",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/81a6753a-b8fc-458e-a24f-4d0de98f5b4a/versions/ac2ab81c-1793-48f8-8db0-cd926b5222fc/platforms/649/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/81a6753a-b8fc-458e-a24f-4d0de98f5b4a/versions/ac2ab81c-1793-48f8-8db0-cd926b5222fc/platforms/649/download?notrack=1",
    "path": "AsherDLL_PCDumpbn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 40,
      "updated_at": "2023-01-28 19:57:01+00:00"
    },
    "projectUrl": "https://github.com/AsherDLL/PCDump-bn",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Sean Deaton (@WhatTheFuzz)",
    "dependencies": "openai",
    "description": "Queries OpenAI's GPT3 to determine what a given function does.",
    "installinstructions": {},
    "lastUpdated": 1713317541,
    "license": {
      "name": "MIT",
      "text": "Copyright 2022 Sean Deaton (@WhatTheFuzz)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "[![CodeQL](https://github.com/WhatTheFuzz/binaryninja-openai/actions/workflows/codeql.yml/badge.svg)](https://github.com/WhatTheFuzz/binaryninja-openai/actions/workflows/codeql.yml)\n\n# BinaryNinja-OpenAI\n\nIntegrates OpenAI's GPT3 with Binary Ninja via a plugin and currently supports\ntwo actions:\n\n- Queries OpenAI to determine what a given function does (in Pseudo-C and HLIL).\n  - The results are logged to Binary Ninja's log to assist with RE.\n- Allows users to rename variables in HLIL using OpenAI.\n  - Variable are renamed immediately and the decompiler is reloaded.\n\n## Installation\n\nIf you're installing this as a standalone plugin, you can place (or sym-link)\nthis in Binary Ninja's plugin path. Default paths are detailed on\n[Vector 35's documentation][default-plugin-dir].\n\nThis plugin has been tested on macOS and Linux. It probably works on Windows;\nplease submit a pull request if you've tested it.\n\n### Dependencies\n\n- Python 3.10+\n- `openai` installed with `pip3 install --user openai`\n\n## API Key\n\nThis requires an [API token from OpenAI][token]. The plugin checks for the API\nkey in three ways (in this order).\n\nFirst, it tries to read the key from Binary Ninja's preferences. You can\naccess the entry in Binary Ninja via `Edit > Preferences > Settings > OpenAI`.\nOr, use the hotkey \u2318+, and search for `OpenAI`. You should see customizable\nsettings like so.\n\n![Settings](https://github.com/WhatTheFuzz/binaryninja-openai/blob/main/resources/settings.png?raw=true)\n\nSecond, it checks the environment variable `OPENAI_API_KEY`, which you can set\ninside of Binary Ninja's Python console like so:\n\n```python\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"INSERT KEY HERE\"\n```\n\nOr you can write it to a file. The file is set in [entry.py][entry] and is a\nparameter to the Agent class. By default it checks for the file\n`~/.openai/api_key.txt`. You can add your API token like so:\n\n```shell\nmkdir ~/.openai\necho -n \"INSERT KEY HERE\" > ~/.openai/api_key.txt\n```\n\nNote that if you have all three set, the plugin defaults to one set in Binary\nNinja. If your API token is invalid, you'll receive the following error:\n\n```python\nopenai.error.AuthenticationError: Incorrect API key provided: <BAD KEY HERE>.\nYou can find your API key at https://beta.openai.com.\n```\n\n## Usage\n\n### What Does this Function Do?\n\nAfter installation, you can right-click on any function in Binary Ninja and\nselect `Plugins > OpenAI > What Does this Function Do (HLIL/Pseudo-C)?`.\nAlternatively, select a function in Binary Ninja (by clicking on any instruction\nin the function) and use the menu bar options `Plugins > OpenAI > ...`. If your\ncursor has anything else selected other than an instruction inside a function,\n`OpenAI` will not appear as a selection inside the `Plugins` menu. This can\nhappen if you've selected data or instructions that Binary Ninja determined did\nnot belong inside of the function. Additionally, the HLIL options are context\nsensitive; if you're looking at the decompiled results in LLIL, you will not see\nthe HLIL options; this is easily fixed by changing the user view to HLIL\n(Pseudo-C should always be visible).\n\nThe output will appear in Binary Ninja's Log like so:\n\n![The output of running the plugin.](https://github.com/WhatTheFuzz/binaryninja-openai/blob/main/resources/output.png?raw=true)\n\n### Renaming Variables\n\nI feel like half of reverse engineering is figuring out variable names (which\nin-turn assist with program understanding). This plugin is an experimental look\nto see if OpenAI can assist with that. Right click on an instruction where a\nvariable is initialized and select `OpenAI > Rename Variable (HLIL)`. Watch the\nmagic happen. Here's a quick before-and-after.\n\n![Before renaming](https://github.com/WhatTheFuzz/binaryninja-openai/blob/main/resources/rename-before.png?raw=true)\n\n![After renaming](https://github.com/WhatTheFuzz/binaryninja-openai/blob/main/resources/rename-after.png?raw=true)\n\nRenaming variables only works on HLIL instructions that are initializations (ie.\n`HighLevelILVarInit`). You might also want this to support assignments\n(`HighLevelILAssign`), but I did not get great results with this. Most of the\nresponses were just `result`. If your experience is different, please submit a\npull request.\n\n## OpenAI Model\n\nBy default, the plugin uses the `text-davinci-003` model, you can tweak this\ninside Binary Ninja's preferences. You can access these settings as described in\nthe [API Key](#api-key) section. It uses the maximum available number of tokens\nfor each model, as described in [OpenAI's documentation][tokens].\n\n## Known Issues\n\nPlease submit an issue if you find something that isn't working properly.\n\n## License\n\nThis project is licensed under the [MIT license][license].\n\n[default-plugin-dir]:https://docs.binary.ninja/guide/plugins.html\n[token]:https://beta.openai.com/account/api-keys\n[tokens]:https://beta.openai.com/docs/models/gpt-3\n[entry]:./src/entry.py\n[license]:./LICENSE\n",
    "minimumbinaryninjaversion": 3200,
    "name": "OpenAI GPT3",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/655cf126-48e4-4a4d-a64d-f04e0fae3d33/versions/81777c05-3b4e-4726-af1d-f1466837fafd/platforms/655/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/655cf126-48e4-4a4d-a64d-f04e0fae3d33/versions/81777c05-3b4e-4726-af1d-f1466837fafd/platforms/655/download?notrack=1",
    "path": "WhatTheFuzz_binaryninjaopenai",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 74,
      "updated_at": "2024-04-17 01:32:21+00:00"
    },
    "projectUrl": "https://github.com/WhatTheFuzz/binaryninja-openai",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "3.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Nick Shipp",
    "dependencies": "",
    "description": "Script to automatically annotate variadic printf functions",
    "installinstructions": {},
    "lastUpdated": 1678247723,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2023 Nick Shipp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Parses format strings and uses them to apply the correct type and number of arguments to each call site. Supports user-defined printf functions, e.g. for statically linked binaries. Also supports user-defined format specifiers using user types for non-standard printf implementations.",
    "minimumbinaryninjaversion": 3814,
    "name": "Format String Analysis",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4f4fbc9a-57b8-428b-b23d-637e2e0ffcbf/versions/4a9a6268-f25c-4202-86fc-db218fc6a856/platforms/661/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4f4fbc9a-57b8-428b-b23d-637e2e0ffcbf/versions/4a9a6268-f25c-4202-86fc-db218fc6a856/platforms/661/download?notrack=1",
    "path": "nshp_binaryninjaprintf",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-03-08 03:55:23+00:00"
    },
    "projectUrl": "https://github.com/nshp/binaryninja-printf",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Trail of Bits",
    "dependencies": "pyevmasm\ninterval3\nevm-cfg-builder>=0.2.0",
    "description": "A disassembler and lifter for the Ethereum architecture.",
    "installinstructions": {},
    "lastUpdated": 1667497034,
    "license": {
      "name": "AGPL-3.0-only",
      "text": "Copyright 2022 Trail of Bits\n\n                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>."
    },
    "longdescription": "# ethersplay\nBinary Ninja plugin which enables an EVM disassembler and related analysis tools.\n\n![Example](/images/example.png)\n\n- [Installation](#installation)\n- [How to use](#how-to-use)\n- [Automatic Analyses](#automatic-analyses)\n- [Plugins](#plugins)\n- [Known issues](#known-issues)\n\n## Installation\n**Ethersplay only supports Python >= 3.6.**\n\nEnsure that your Binary Ninja's Python library is set to Python 3.6+. You can change the ScriptingProvider in the Advanced Settings.\n\nInstall the dependencies:\n```console\n$ pip install -r requirements.txt\n```\n\nCreate a symbolic link to the Binary Ninja [plugin folder](https://github.com/Vector35/binaryninja-api/tree/dev/python/examples#loading-plugins).\nE.g., in macOS\n```\ncd ~/Library/Application\\ Support/Binary\\ Ninja/plugins\nln -s <your_download_location>/ethersplay/ethersplay .\n```\n\nUbuntu:\n```\ncd ~/.binaryninja/plugins\nln -s <your_download_location>/ethersplay/ethersplay .\n```\n\n## How to Use\n\nEthersplay takes as input the evm bytecode in raw binary format.\n \nTo have the bytecode of a solidity file, use `solc`:\n- `solc --bin-runtime file.sol`: to print the bytecode of the runtime part of the contract (for most of the cases).\n- `solc --bin file.sol`: to print the initialisation bytecode of the contract (constructor),\n\n\n\nExample using `test.sol` with following contents:\n```test.sol:\ncontract Test {\n    uint256 value;\n    function Test() {\n        value = 5;\n    }\n    function set_value(uint256 v) {\n        value = v;\n    }\n    function() payable {}\n}\n```\n\nRun solidity to compile:\n`solc --bin-runtime test.sol`\n\nsolc prints the bytecode to stdout in the format below:\n```\n======= test.sol:Test =======\nBinary of the runtime part:\n60606040523615603d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b0f2b72a146041575b5b5b005b3415604b57600080fd5b605f60048080359060200190919050506061565b005b806000819055505b505600a165627a7a72305820c177a64bf54a26574918ddc2201f7ab2dd8619d6c3ee87ce9aaa1eb0e0b1d4650029\n```\n\nCopy the ascii hex string, and then create a new file in Binary Ninja. Right-click and select `Paste From -> Raw Hex`. The output should look identical to the earlier example image. Save this file as `test.evm` and close it. Alternatively, paste the ascii hex string into a new text file, and run the `utils/convert_bytecode.py` on that file.\n\n`test.evm` can now be loaded into Binary Ninja.\n\n**Note:** The file must end in `.evm` to be recognized as an EVM bytecode binary file.\n\n## Plugins\n\n### Render Flowgraphs\nGenerates a clean control flow graph of all functions.\n\nBefore:\n![before](images/cfg_before.png)\n\nAfter:\n![!after](images/cfg_after.png)\n\n### Manticore coverage\nColors the basic blocks explored through Manticore (using the `visited.txt` or `*.trace` files).\n",
    "minimumbinaryninjaversion": 3814,
    "name": "ethersplay Ethereum Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e33c94ce-f989-4dc4-b031-9f06300ee5ed/versions/5c733c5c-364f-4216-a7a2-6688bccf45d9/platforms/667/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e33c94ce-f989-4dc4-b031-9f06300ee5ed/versions/5c733c5c-364f-4216-a7a2-6688bccf45d9/platforms/667/download?notrack=1",
    "path": "crytic_ethersplay",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 856,
      "updated_at": "2022-11-03 17:37:14+00:00"
    },
    "projectUrl": "https://github.com/crytic/ethersplay",
    "subdir": "ethersplay",
    "type": [
      "architecture"
    ],
    "version": "0.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Mark Griffin (@seeinglogic)",
    "dependencies": "networkx\nwebsockets\nrequests",
    "description": "Browser-based interactive graph for viewing callgraph, static analysis, and coverage information",
    "installinstructions": {},
    "lastUpdated": 1739579348,
    "license": {
      "name": "MIT",
      "text": "Copyright 2025 Mark Griffin (@seeinglogic)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
    },
    "longdescription": "# Ariadne: Binary Ninja Graph Analysis Plugin\n\n[Ariadne](https://en.wikipedia.org/wiki/Ariadne#Mythology) is a Binary Ninja plugin that serves a browser-based interactive graph\nvisualization for assisting reverse engineers. It implements some common static\nanalysis tasks including call graph analysis, and can integrate block coverage\ninformation. This enables users to build interactive graphs and see exactly what\nthey are interested in.\n\n![Demo Screen Capture](screenshots/demo.gif)\n\n## Quickstart\n\n1. Install this plugin via the Plugin Manager, OR clone this repo to your Binary\n  Ninja [plugins folder](https://docs.binary.ninja/getting-started.html#user-folder)\n  - NOTE: If you install by cloning the repo, you may need to install the Python\n  dependencies in `requirements.txt`. Use the command palette (`CTRL+P` or\n  equivalent) to do `Install Python3 module` and copy the contents of\n  requirements.txt into the dialog.\n2. Open a binary in Binary Ninja\n3. Right click: Plugins > Ariadne > Analyze Target\n4. Open the Ariadne Sidebar (`A` icon in upper right by default) and wait for analysis to complete (watch log for issues)\n5. Open a browser and surf to `http://localhost:8800` to view the interactive\n   graph (web UI)\n6. Navigate around in Binary Ninja; the graph will update when the current\n   function changes\n\n## Graph Styling\n\nThe quick rundown on what the shapes and colors on the graph mean:\n\n- Regular functions are green circles\n- Import functions are diamond-shaped and colored orange\n- Node size is based on cyclomatic complexity; more complex functions are\n  bigger circles\n- The current function active in BN is colored red\n- Nodes with double borders mean they have edges that weren't included for the\n  current graph (default: local neighborhood for active function in BN, see note\n  below)\n- Functions that you've looked at in the BN UI have light blue borders\n- If you click on a node, it becomes the \"focus node\"\n  - The focus node is colored purple\n  - Out edges/nodes (callees) are colored pink\n  - In edges/nodes (calleRs) are colored blue\n  - Clicking on the focus node deselects it\n  - Clicking on another node makes that node the focus node\n\nNOTE: the default graph is a 2-hop neighborhood of the current function _BUT_ it\nwill be automatically pruned to a smaller graph if two hops would include too\nmany nodes. Use the context menu function graph to push the full context for\nthe current function or use\n[networkx](https://networkx.org/) to build custom graphs and push them to\nthe web UI.\n\n## Motivation\n\n[Longer blog post on motivation](https://seeinglogic.com/posts/why-of-ariadne/)\n\nThis tool is a proof-of-concept that was built to fill a gap that we observed in\nour own reverse-engineering workflows, with the goals of being highly\nconfigurable and to help make reverse-engineering faster.\n\nThe key insight we found building/using a graph tool is that looking at too many\nnodes is unhelpful and layout matters a lot, so we focused on just the analysis\nresults we wanted in the smallest and cleanest view possible.\n\nFrom there, we built the backend so any graph could be pushed to the backend and\ncommon graph tasks would be easy. Adding extra analysis tasks is also easy since\nthere are places for per-function and target-wide analysis.\n\n## Common Workflows\n\nAriadne was built to handle some common workflows encountered in RE and fuzzing:\n\n- Source/Sink analysis: Context command allows you to select a function and see\n  all the paths to/from the current function in the web UI. ![source-sink](screenshots/source_sink.png)\n- Coverage analysis via [bncov](https://github.com/ForAllSecure/bncov): allows\n  visualization of coverage and shows where your coverage stops and uncovered\n  complexity resides. Requires bncov, but if coverage information is detected\n  before analysis starts it will automatically be added, or it can be added\n  separately. [More in-depth post on coverage automation and Ariadne](https://seeinglogic.com/posts/automated-coverage-analysis/)\n  - The Descendent Complexity metrics (\"uncovered\" as well as the normal one) show\n    the sum of complexity for all functions reachable from a given function as\n    well as the sum for just functions with zero coverage. Very useful for\n    fuzzing!\n  ![Coverage View](screenshots/coverage_analysis.png)\n- Import Hiding: Sometimes imports are helpful, other times they just convolute\n  the graph because it's more important to see just the internal functions\n- Custom graphs: create any graph based on the target's graph (`ariadne.core.targets[bv].g`) and push it to the web UI with `ariadne.core.push_new_graph(new_graph)`\n- Standard styling: the default graph styling allows you to see which functions\n  you have already looked at, which functions are imports, and caller/callee\n  relationships. Helps you see which functions you haven't looked at that may be\n  of interest. ![Breadcrumb demo](screenshots/breadcrumbing.png)\n- Collapsible Function Metadata sidebar: Shows all the relevant static analysis\n  results for any function you click on. ![Focus node view](screenshots/focus_node.png)\n- Function search bar: start typing the name of the function you want to find in\n  the search bar in the upper left, when the name turns green you can stop\n  typing and hit enter to center the graph on the target function.\n- Freezing/unfreezing the graph: sometimes you don't want auto-updates\n- Save/Load analysis: redoing analysis is no good; headless analysis and\n  save/load features allow you to crunch binaries on a separate machine if you\n  want.\n- Callgraph exploration: using the web UI's `Graph Focus Function` button, now\n  you can see what nodes aren't fully expanded in the current view and navigate\n  between functions from within the web UI.\n\nSee the [tutorial](./tutorial/README.md) for detailed explanation of features\nand intended workflows that you can test out on an example binary.\n\n## Troubleshooting\n\nIf the web UI is unresponsive, check the websocket status in the upper right\ncorner. If you push a really large graph to the web UI, the page may freeze\nwhile the graph layout is computed. In any case, refreshing the page should\nreset the UI.\n\nUnhandled Python exceptions on startup or during processing are bugs and it'd be\ngreat if you would open a GitHub issue on the repo here and describe the problem\n(and include a binary to reproduce the problem, if possible).\n\n...And of course, PR's are always welcome!\n\n## Thank you!\n\nTo everyone who tries out this tool, it would mean a lot to me if you reach out\nand give me your thoughts on [Twitter](https://twitter.com/seeinglogic) or starring this repo. I\nhope this helps you or gives you ideas on how to look at things a little\ndifferently.\n",
    "minimumbinaryninjaversion": 4911,
    "name": "Ariadne",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9917fb9c-c35b-4a04-b766-4b7b4f456e4a/versions/0d61a079-5e43-4cd7-957c-02b4da173f2e/platforms/673/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9917fb9c-c35b-4a04-b766-4b7b4f456e4a/versions/0d61a079-5e43-4cd7-957c-02b4da173f2e/platforms/673/download?notrack=1",
    "path": "seeinglogic_ariadne",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 93,
      "updated_at": "2025-02-15 00:29:08+00:00"
    },
    "projectUrl": "https://github.com/seeinglogic/ariadne",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Spencer Merrill",
    "dependencies": "",
    "description": "Binary Ninja plugin for restoring function names from stripped Golang binaries",
    "installinstructions": {},
    "lastUpdated": 1662661916,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <2022> <Spencer Merrill>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "The plugin parses the section `.gopclntab` where Golang stores debug symbols and restores the function names. If there is no section named `.gopclntab` it will try to search for the section.",
    "minimumbinaryninjaversion": 3469,
    "name": "Golang Symbol Restore 1.18+",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/61b11e8b-e3de-4342-95bd-fcfa4b937510/versions/eb0e2399-e044-4ec9-b5be-166b9c46026a/platforms/679/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/61b11e8b-e3de-4342-95bd-fcfa4b937510/versions/eb0e2399-e044-4ec9-b5be-166b9c46026a/platforms/679/download?notrack=1",
    "path": "scmerrill_golang_1_18_restore_names",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 3,
      "updated_at": "2022-09-08 18:31:56+00:00"
    },
    "projectUrl": "https://github.com/scmerrill/golang_1_18_restore_names",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Patrick Biernat",
    "dependencies": "",
    "description": "Package binary code as a Python class backed by Unicorn-Engine",
    "installinstructions": {},
    "lastUpdated": 1657292416,
    "license": {
      "name": "MIT",
      "text": "MIT License Copyright (c) 2022 Patrick Biernat Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# ripr\nripr is a tool that helps you rip out functionality from binary code and use it from Python. It accomplishes this by pairing the [Unicorn-Engine](http://www.unicorn-engine.org/) with [Binary Ninja](https://binary.ninja). Currently, `x86`, `x64`, and `arm` are supported and work to a reasonable degree.\n\n# Introduction\nReimplementing functionality is a common, often time-consuming, and sometimes arduous process that comes up frequently during reverse engineering. A few examples:\n\n* A CTF challenge has a custom encoding/decoding scheme you need to use in your solution script\n* A piece of malware uses a custom hashing or encryption function you need to implement\n* You need to make sure your reimplementation behaves _exactly_ as it would on the original architecture\n\nripr attempts to automatically generate a python class that is functionally identical to a selected piece of code by statically gathering sufficient information and wrapping it all into a \"harness\" for the unicorn emulator. \n\nFor some concrete examples, check out the `sample` folder!\n\n# Installation\nThe manual installation process looks like this:\n\n1. Clone this repo to your local machine\n2. Find the location of your plugins directory from Binary Ninja by clicking on `Tools --> Open Plugin Folder...`\n3. Place this repo in that directory, or create a symlink pointing to it.\n\n\n# Usage\n\n## Packaging a Function\nFrom within Binary Ninja, right click anywhere inside of a function and then select: \n\n```Plugins --> ripr --> Package Function```\n<p align=\"center\">\n<img src=\"https://imgur.com/CjElWAM.png\">\n</p>\n\nSee the [Options while Packaging](#options-while-packaging) section for details about prompts that may appear during this process.\n\n## Packaging Specific Basic Blocks\nYou can also choose to only package specific basic blocks rather than the entire function.\n\nSelect any instruction inside the basic block of interest, and from the right click menu, choose `[ripr] Package Basic Block`.\nRepeat this for any other basic blocks you want to gather.\n\nFinally, select `Generate Selected BBs` from the context menu to have ripr generate output for them.\n\n## Contextual Highlighting\n\nripr will contextualize code you've selected for packaging within the GUI.\n\n* Basic Blocks that have been included or identified have their background color darkened\n* Instructions that have caused a data dependency to be identified are highlighted Yellow\n* Call instructions to imported functions are highlighted Red\n* Call instructions to functions inside the target binary are highlighted Blue\n* Instructions that access unintialized variables are highlighed Orange (Basic Block Mode).\n\nThis is meant to give the user visual cues about what ripr has seen and automatically identified, making it easier to see \"right off the bat\" whether manual modification of the package is necessary.\n\n## Options while Packaging\nThere are a few different prompts which may appear while packaging a function. \n\n#### Code contains calls to Imported Functions. How should this be handled?\n\nChoosing \"Hook\" will allow you to write-in your own functionality that runs in lieu of imported functions. Selecting \"Nop out Calls\" will replace the call instruction with a series of NOPs.\n\n#### Target code may depend on outside code. Attempt to map automatically?\n\nYour selected code contains calls to other functions within the binary. Answering yes will automatically map those functions.\n\n#### Use Section Marking Mode for data dependencies?\n\nAnswering yes will map all sections of the binary that are touched by the target code. Answering No will use Page-Marking mode, where every page used by the target code is mapped into emulator memory.\n\n## Using a ripr \"package\"\nOnce a selection of code has been packaged, you will have a python class which encapsulates its functionality. The basic process of using it looks like this:\n\n1. Instantiate the class\n2. Call the run() method\n\nAssuming `my_ripped_code` is the class name:\n\n```python\nx = my_ripped_code()\ny = x.run()\n```\n\nAll Unicorn functionality is exposed via the `mu` attribute and should work as expected. \n\n## Implementing \"Imported Calls\"\nIf you choose to hook calls to `imported functions` during the packaging stage, your generated class will contain stub-functions that are called when the imported call would originally have been called.\n\nFor example, if your code contained calls to `puts` and `malloc`, the following would be generated in your class:\n```python\ndef hook_puts(self):\n    pass\ndef hook_malloc(self):\n    pass\n```\nAny code you write within these functions will be called in lieu of the actual imported call. If you wanted a reasonable approximation of `puts` (and were emulating x64 code), you could do:\n\n```python\ndef hook_puts(self):\n    addr = self.mu.reg_read(UC_X86_REG_RDI)\n    mem = self.mu.mem_read(addr, 0x200)\n    print \"%s\" % (mem.split(\"\\x00\")[0])\n```\n\nYou have full access to all of Unicorn's methods via the `mu` attribute so it is possible to update the emulator context in any way necessary in order to mimic the behavior of a call or perform any actions you'd like instead of the call.\n\n## Function Arguments\nripr has some support for automatically generating \"argument aware\" output. When information about a function's parameters is available to Binary Ninja, ripr will generate its `run`\nfunctions in the form:\n\n```python\ndef run(self, arg_1, arg_2, ...)\n```\n\nWhen dealing with non-pointer types, your arguments will be written into the expected location in the emulated environment. \n\nFor \"single depth\" pointers, (e.g `char *, int *`), ripr will map memory, copy your argument to it, and place the address of that mapped memory into the appropriate location.\n\nFor pointers with a depth greater than 1, ripr falls back on default behaviour.\n\nIf you need to manually set up arguments, you can directly manipulate unicorn's state via the `mu` attribute.\nFor example, assuming you are emulating a 32-bit x86 function, you could do the following:\n\n```python\ndef run(self, arg1, arg2):\n    self.mu.reg_write(UC_X86_REG_ESP, 0x7fffff00)\n    self.mu.mem_write(0x7fffff00, '\\x01\\x00\\x00\\x00')\n\n    self.mu.mem_write(0x7fffff04, arg1)\n    self.mu.mem_write(0x7fffff08, arg2)\n    \n\n    self._start_unicorn(0x80484bb)\n    return self.mu.reg_read(UC_X86_REG_EAX)\n```\n\n# Code Structure\n\n* `packager.py` -- High Level Functionality. Code here drives the process of gathering necessary data\n* `codegen.py`  -- Contains code for actually generating the python output from the gathered data\n* `analysis_engine.py` -- Wraps static analysis engine functionality into a common interface\n* `dependency.py` -- Contains code for finding code and data that the target code needs in order to function corrrectly\n* `conScan.py` -- Contains \"convenience\" analyses that help ripr output easier-to-use code\n* `gui.py` --  A collection of hacks that resembles a user interface\n    * Reuses lots of code from the [Binjadock](https://github.com/NOPDev/BinjaDock) project to display results\n\n# Testing\nThe current tests will package up some functions across the 3 supported architectures found \nin the `sample` folder. \n\nTo run the tests:\n\n```\ncd <ripr_directory>\npython -m unittest discover -t ../\n```\n",
    "minimumbinaryninjaversion": 3469,
    "name": "ripr",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/71f5b80d-e6c3-4afb-9512-d0cb1446a179/versions/fbac59df-db4e-4724-8999-8dbf67a7039e/platforms/685/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/71f5b80d-e6c3-4afb-9512-d0cb1446a179/versions/fbac59df-db4e-4724-8999-8dbf67a7039e/platforms/685/download?notrack=1",
    "path": "pbiernat_ripr",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 405,
      "updated_at": "2022-07-08 15:00:16+00:00"
    },
    "projectUrl": "https://github.com/pbiernat/ripr",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "v1.1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "SmoothHacker",
    "dependencies": "",
    "description": "This plugin compiles exported functions and its corresponding types into a type library. Type libraries can also be applied to existing bndbs through this plugin.",
    "installinstructions": {},
    "lastUpdated": 1665871462,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 Scott Lagler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# TypeLib Exporter\n\nThis plugin compiles exported functions and its corresponding types into a Binary Ninja type library. It can also load\nand apply\na type library from disk. 2 buttons in the plugin dropdown menu are created, `Export As Type Library`\nand `Apply Type Library`.\nFor type library exporting, a pop-up window will show detailing what options you would like to specify. Options include\nalternative names(libcurl.so.5.0.0, libcurl.so.5, libcurl.so), a dependency name, and the path where you want the\nlibrary exported to.\nFor type library importing, a pop-up window will ask for the path to a `.bntl` file which will be imported and applied\nto the\ncurrent binary view and any successive binary view in the current session.\n\nA potential workflow for this plugin would be to compile an open source library with debug information, load it into\nBinary Ninja,\nrun the debug info parser, and export it to a type library.\n\n## Future Plans\n- [ ] Headless support\n",
    "minimumbinaryninjaversion": 3469,
    "name": "TypeLib Exporter",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/95a80ed0-b7fb-43ce-a539-d6ef4ba478c9/versions/e004805d-6138-40fa-b7e7-417c37204659/platforms/691/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/95a80ed0-b7fb-43ce-a539-d6ef4ba478c9/versions/e004805d-6138-40fa-b7e7-417c37204659/platforms/691/download?notrack=1",
    "path": "SmoothHacker_TypeLibExporter",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 8,
      "updated_at": "2022-10-15 22:04:22+00:00"
    },
    "projectUrl": "https://github.com/SmoothHacker/TypeLib-Exporter",
    "subdir": "",
    "type": [
      "binaryview",
      "helper",
      "ui"
    ],
    "version": "2.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "ex0dus-0x",
    "dependencies": "ailment==9.2.26; python_version >= \"3.8\"\nangr==9.2.26; python_version >= \"3.8\"\narchinfo==9.2.26; python_version >= \"3.8\"\nbitstring==4.0.1; python_version >= \"3.8\"\ncachetools==5.2.0; python_version >= \"3.8\" and python_version < \"4.0\"\ncapstone==5.0.0; python_version >= \"3.8\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.4.0\" and python_version >= \"3.8\"\ncffi==1.15.1; implementation_name == \"cpython\" and python_version >= \"3.8\"\nclaripy==9.2.26; python_version >= \"3.8\"\ncle==9.2.26; python_version >= \"3.8\"\nclick==8.1.3; python_version >= \"3.7\"\ncolorama==0.4.6; python_version >= \"3.8\" and python_full_version < \"3.0.0\" and platform_system == \"Windows\" or python_version >= \"3.8\" and python_full_version >= \"3.7.0\" and platform_system == \"Windows\"\ncommonmark==0.9.1; python_full_version >= \"3.6.3\" and python_full_version < \"4.0.0\" and python_version >= \"3.6\"\ncontourpy==1.0.6; python_version >= \"3.8\"\ncppheaderparser==2.7.4; python_version >= \"3.8\"\ncssselect==1.2.0; python_version >= \"3.7\"\ncustom-inherit==2.4.0\ncycler==0.11.0; python_version >= \"3.8\"\ndecorator==5.1.1; python_version >= \"3.8\"\ndeprecated==1.2.13; python_version >= \"2.7\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.4.0\"\ndpkt==1.9.8; python_version >= \"3.8\"\nfonttools==4.38.0; python_version >= \"3.8\"\nfuture==0.18.2; python_full_version >= \"3.6.0\" and python_version >= \"3.8\"\ngitdb==4.0.10; python_version >= \"3.8\"\ngitpython==3.1.29; python_version >= \"3.7\"\nitanium-demangler==1.1; python_version >= \"3.8\"\njinja2==3.1.2; python_version >= \"3.7\"\nkiwisolver==1.4.4; python_version >= \"3.8\"\nlief==0.12.3; python_version >= \"3.6\"\nlxml==4.9.1; python_version >= \"2.7\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.5.0\"\nmarkupsafe==2.1.1; python_version >= \"3.7\"\nmatplotlib==3.6.2; python_version >= \"3.8\"\nmpmath==1.2.1; python_version >= \"3.8\"\nmulpyplexer==0.09; python_version >= \"3.8\"\nnampa==0.1.1; python_version >= \"3.8\"\nnetworkx==2.8.8; python_version >= \"3.8\"\nnumpy==1.23.5\npackaging==21.3; python_version >= \"3.8\"\npandas==1.5.2; python_version >= \"3.8\"\npefile==2022.5.30; python_full_version >= \"3.6.0\" and python_version >= \"3.8\"\npillow==9.3.0; python_version >= \"3.8\"\nplumbum==1.8.0; python_version >= \"3.8\"\nply==3.11; python_version >= \"3.8\"\nprogressbar2==4.2.0; python_full_version >= \"3.7.0\" and python_version >= \"3.8\"\nprotobuf==4.21.9; python_version >= \"3.8\"\npsutil==5.9.4; python_version >= \"3.8\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.4.0\" and python_version >= \"3.8\"\npulp==2.7.0\npycparser==2.21; python_version >= \"3.8\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.4.0\" and python_version >= \"3.8\"\npyelftools==0.29; python_version >= \"3.8\"\npygments==2.13.0; python_full_version >= \"3.6.3\" and python_full_version < \"4.0.0\" and python_version >= \"3.6\"\npyparsing==3.0.9; python_full_version >= \"3.6.8\" and python_version >= \"3.8\"\npyquery==1.4.3\npysmt==0.9.6.dev21; python_version >= \"3.8\"\npython-dateutil==2.8.2; python_version >= \"3.8\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.3.0\" and python_version >= \"3.8\"\npython-utils==3.4.5; python_full_version >= \"3.7.0\" and python_version >= \"3.8\"\npytz==2022.6; python_version >= \"3.8\"\npyvex==9.2.26; python_version >= \"3.8\"\npywin32==305; platform_system == \"Windows\" and platform_python_implementation != \"PyPy\" and python_version >= \"3.8\"\nrich==12.6.0; python_full_version >= \"3.6.3\" and python_full_version < \"4.0.0\" and python_version >= \"3.6\"\nrpyc==5.2.3; python_version >= \"3.8\"\nscikit-criteria==0.7\nscipy==1.9.3; python_version >= \"3.8\"\nseaborn==0.12.1; python_version >= \"3.7\"\nsetuptools-scm==7.0.5; python_version >= \"3.8\"\nshellingham==1.5.0; python_version >= \"3.6\"\nsix==1.16.0; python_version >= \"3.8\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.3.0\" and python_version >= \"3.8\"\nsmmap==5.0.0; python_version >= \"3.8\"\nsortedcontainers==2.4.0; python_version >= \"3.8\"\nsympy==1.11.1; python_version >= \"3.8\"\ntomli==2.0.1; python_version >= \"3.8\"\ntree-sitter==0.20.1; python_version >= \"3.3\"\ntyper==0.6.1; python_version >= \"3.6\"\ntyping-extensions==4.4.0; python_version >= \"3.8\"\nunicorn==2.0.1; python_version >= \"3.8\"\nwrapt==1.14.1; python_version >= \"2.7\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.5.0\"\nz3-solver==4.10.2.0; python_version >= \"3.8\"\n",
    "description": "Framework for Automating Fuzzable Target Discovery with Static Analysis",
    "installinstructions": {},
    "lastUpdated": 1700616759,
    "license": {
      "name": "MIT",
      "text": "Copyright 2022 @ex0dus-0x Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This is a helper Binary Ninja plugin to assist in identifying functions that are optimal targets for fuzzing and dynamic analysis. This is useful for vulnerability researchers wanting to fuzz executables or libraries without manual reverse engineering, and need some fast insight about what functions are potential targets to extrapolate for their harnesses.",
    "minimumbinaryninjaversion": 1500,
    "name": "Fuzzable",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/31e4a04e-de36-49f7-abfd-e51ccbf9a092/versions/9ce496eb-47fd-4366-a0e1-dfbeaf6a81e0/platforms/697/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/31e4a04e-de36-49f7-abfd-e51ccbf9a092/versions/9ce496eb-47fd-4366-a0e1-dfbeaf6a81e0/platforms/697/download?notrack=1",
    "path": "ex0dus0x_fuzzable",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-11-22 01:32:39+00:00"
    },
    "projectUrl": "https://github.com/ex0dus-0x/fuzzable",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "2.0.6"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Hyun Yi",
    "dependencies": "yara-python>=4.3.0\npefile>=2019.4.18\nPillow>=8.0.1\n",
    "description": "YARA rule making tool for Binary Ninja, Cutter, and IDA",
    "installinstructions": {},
    "lastUpdated": 1699846859,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2018 Hyun Yi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Hyara\n\n![Version](https://img.shields.io/badge/version-2.3-blue.svg?cacheSeconds=2592000)\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara.gif?raw=true)\n\n> Hyara is plugin that provides convenience when writing yararule.\n> \n> The plugin is currently undergoing a major revision!\n\n- [Demo video](https://youtu.be/zgL4BkQJZ-w)\n\n- [IDA Plugin Contest 2018](https://hex-rays.com/contests_details/contest2018/#Hyara)\n\n## Instructions\n\n### Start Screen and Options\n\n- When you run Hyara, it docks itself to the right and docks the output window to the left.\n- After specifying the address, press the `Make` button to show the specified hexadecimal or strings as a result.\n- The results are saved in the table below when you click `Save`.\n- If you double-click the table, you can clear the rule.\n- You can modify the values to wildcards by right clicking after dragging.\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/wildcard_0.png?raw=true)\n\n- `Export Yara Rule`\n  - Exports the previously created yara rules.\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_1.png?raw=true)\n\n\n- `Right Click`\n  - You can select either start address or end address. (IDA Pro, Cutter)\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_7.png?raw=true)\n  \n- `Comment Option`\n  - Annotates the instructions next to the condition rule(s).\n- `Rich Header` and `imphash`\n  - Adds rich header and imphash matching to the rule.\n- `String option`\n  - This option extracts strings within the range specified.\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_3.png?raw=true)\n![](https://github.com/hyuunnn/Hyara/blob/master/images/cutter_1.png?raw=true)\n\n## Installation\n\n### IDA Pro & BinaryNinja\n\n- IDA Pro\n  ```bash\n  pip install -r requirements.txt\n  ```\n  - copy ``Hyara_IDA.py and hyara_lib folder`` to $ida_dir/plugins\n  - Activate via Edit -> Plugins -> Hyara (or CTRL+SHIFT+Y)\n\n- BinaryNinja\n  - Just use the plugin manager!\n  - Activate via View -> Other Docks -> Show Hyara\n\n### Cutter\n\n- Windows\n\nCheck the python version installed in the cutter and install it.\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/cutter_0.png?raw=true)\n\n```bash\nC:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python3X\\\\python.exe -m pip install -I -t $cutter_dir/python3X/site-packages -r requirements.txt\n```\n\ncopy ``__init__.py, Hyara_Cutter.py and hyara_lib folder`` to $cutter_dir/plugins/python/Hyara\n\n- Linux\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/cutter_install__1.png?raw=true)\n\n```bash\ncp -r /tmp/.mount_Cutter5o3a5G/usr /root\n```\n\nCheck the python version installed in the cutter and install it.\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/cutter_01.png?raw=true)\n\n```bash\npip3.X install -I -t /root/usr/lib/python3.X/site-packages -r /root/Hyara/requirements.txt\n./Cutter-v2.0.3-x64.Linux.AppImage --pythonhome /root/usr\n```\n\ncopy ``__init__.py, Hyara_Cutter.py and hyara_lib folder`` to /root/.local/share/rizin/cutter/plugins/python/Hyara\n\nActivate via Windows -> Plugins -> Hyara\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/cutter__0.png?raw=true)\n\n### Ghidra (WIP)\n\nInstall <a href=\"https://github.com/mandiant/Ghidrathon\">Ghidrathon</a> (<a href=\"https://youtu.be/Aatbqf6lcjU\">Installation Guide</a>) to use Hyara Plugin.\n\n```bash\npip install PySide2 or pip install PySide6\n```\n\n- Windows\n\ncopy ``Hyara_Ghidra.py and hyara_lib folder`` to ``C:\\\\Users\\\\User\\\\.ghidra\\\\.ghidra.X.X.X\\\\Extensions\\\\Ghidrathon-X.X.X\\\\data\\\\python\\\\``\n\n```python\n# Window -> Ghidrathon\nimport Hyara_Ghidra\nHyara_Ghidra.run()\n```\n\n![](https://github.com/hyuunnn/Hyara/blob/master/images/ghidra_0.png?raw=true)\n\n\n## Features\n\n- GUI-based\n- Supports IDA, BinaryNinja, Cutter and Ghidra.\n- YaraChecker\n  - Tests the yararule on the fly.\n  - ![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_4.png?raw=true)\n- YaraDetector\n  - Shows which part is detected in the sample loaded to disassembler, and when \"Address\" is clicked, it moves to the corresponding address on the disassembler view.\n  - ![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_5.png?raw=true)\n- YaraIcon\n  - Creates yara rules for icon resources embedded in the PE.\n  - ![](https://github.com/hyuunnn/Hyara/blob/master/images/Hyara_6.png?raw=true)\n\n## Author\n\n\ud83d\udc64 **hyuunnn**\n\n* Github: [@hyuunnn](https://github.com/hyuunnn)\n\n### Special Thanks\n\n* Twitter: <a href=\"https://twitter.com/kjkwak12\">kjkwak12</a>\n* Github: <a href=\"https://github.com/gaasedelen\">gaasedelen</a> - <a href=\"https://github.com/hyuunnn/Hyara/blob/master/hyara_lib/integration/bn_hyara/binaryninja_api.py#L9\">Link</a>\n* Github: <a href=\"https://github.com/ITAYC0HEN\">ITAYC0HEN</a> - <a href=\"https://github.com/hyuunnn/Hyara/pull/14\">Link</a>\n* Github: <a href=\"https://github.com/psifertex\">psifertex</a> - <a href=\"https://github.com/hyuunnn/Hyara/pull/18\">Link</a>\n",
    "minimumbinaryninjaversion": 3469,
    "name": "Hyara",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b9d55174-9d03-40d6-9279-3e430d7a3f57/versions/4167e9e9-a231-4337-b8b0-eca4cbdd652b/platforms/703/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b9d55174-9d03-40d6-9279-3e430d7a3f57/versions/4167e9e9-a231-4337-b8b0-eca4cbdd652b/platforms/703/download?notrack=1",
    "path": "hyuunnn_Hyara",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-11-13 03:40:59+00:00"
    },
    "projectUrl": "https://github.com/hyuunnn/Hyara",
    "subdir": "hyara_lib/integration/bn_hyara",
    "type": [
      "ui"
    ],
    "version": "2.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Tomonori Izumida <tizmd@iij.ad.jp>",
    "dependencies": "",
    "description": "An architecture plugin for Renesas V850 series",
    "installinstructions": {},
    "lastUpdated": 1667789390,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 Tomonori Izumida <tizmd@iij.ad.jp>\nCopyright (c) 2021 IIJ Innovation Institute\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
    },
    "longdescription": "# Renesas V850/RH850 Architecture plugin for Binary Ninja\n\n- TODO\n    + complete the lifting to Lifted IL\n\n\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Renesas V850 architecture plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/583ae732-f899-4fbd-90c3-90900bd93d88/versions/47259594-4e90-4569-97c7-e477e9cc11d9/platforms/709/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/583ae732-f899-4fbd-90c3-90900bd93d88/versions/47259594-4e90-4569-97c7-e477e9cc11d9/platforms/709/download?notrack=1",
    "path": "tizmd_binjav850",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-11-07 02:49:50+00:00"
    },
    "projectUrl": "https://github.com/tizmd/binja-v850",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "CyShell",
    "dependencies": "networkx~=2.8.2\nPySnooper~=1.1.1",
    "description": "Parse and extract class information from MSVC x86 32\\64 bit C++ binaries.",
    "installinstructions": {},
    "lastUpdated": 1686049233,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 CyShell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# ClassyPP\n\nMicrosoft Visual Studio C++ Class information extraction.\n\n## Description:\n\nThis plugin aims to aid in reverse engineering binaries compiled with MSVC and written in C++. \nSuch binaries often contain extremely useful information about the classes and types used within it - Information that is invaluable \nto reverse engineering efforts.\n\nThis plugin performs 3 main actions:\n\n**RTTI Inspection**\n\nSearch the executable for RTTI (Real-Time Type information) structures, and define the actual symbols \nwith types within the BinaryView, including demangled class names.\n\n-BEFORE-\n\n![RTTI Inspection - Before](https://user-images.githubusercontent.com/34336222/171192716-bafebbb8-0684-47ef-94be-30de176b89a1.png)\n\n-AFTER-\n\n![RTTI Inspection - After](https://user-images.githubusercontent.com/34336222/171192825-c004b21e-96f9-44f4-9f50-4400a10fc01a.png)\n\n\n**Resolve and Define Virtual-Function tables**\n\nAny C++ class will have its own vfTable within the executable.\nIdentifying this vfTable is crucial in order to understand what functions belong to what class.\n\nThis plugin takes this process one step further - Using Graph theory algorithms it will approximate \nwhich class owns which function within a given vfTable. This is important because not all derived classes\noverride functions within their base class, which means that the derived class vfTable might contain \nfunctions that belong to the base class, and often times functions belonging to several different base \nclasses.\n\n-BEFORE-\n\n![vfTable - Before](https://user-images.githubusercontent.com/34336222/171192911-155679ca-c078-41a4-9faf-c85f552b9acc.png)\n\n\n-AFTER-\n\n![vfTable - After](https://user-images.githubusercontent.com/34336222/171192938-75f4397e-5013-477d-b761-be4a06f509ff.png)\n\n\n\n\n\n**Detect and Define Constructor\\Destructor functions**\n\nBase on information obtained in the preceeding steps, it is possible to locate suspected constructor and Destructor functions for the \nvarious detected classes.\nThe plugin will either annotate the suspected constructor\\destructor with a comment or change the name of the function to reflect\nthe detection.\n\n\n\n\n\n\n**Define class types for known Classes**\n\nUsing information extracted from the MSVC compiler (CL) regarding the memory layout of compiled classes it is possible\nto define the actual class type as it apears in memory - This type can later be applied to any function using the \"This\" pointer.\nVersion 1.0 of this plugin contains memory layout information from many classes of the following libraries:\n  - standard lib\n  - Protobuf\n  - Standard Template Library\n  - CryptoPP\nThe plugin will autoamtically define any class type in its database if the corresponding class is found to be resident in the executable.\n\n![class definition](https://user-images.githubusercontent.com/34336222/171192986-05e2f215-d02f-4800-ac4e-66e37403c9b0.png)\n\n## Installation\n\nThis plugin installs as a normal binja plugin - just clone it into the plugins' directory.\nEdit the Config.py file for values suitable to your environment.\n\t\n## Limitations:\n\t- Supports MSVC compiled binaries Only\n\t- x86 32\\64 bit architecture only\n\t- Currently no support for Multiple Virtual Inheritence (Support for this will be added in the future)\n\n## Acknowledgment\n\nThis plugin uses the Demumble project in order to demangle C++ symbols - https://github.com/nico/demumble.\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n",
    "minimumbinaryninjaversion": 3233,
    "name": "ClassyPP",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/0de6f32b-0840-48b0-b32d-f051ff93178e/versions/35548d39-0f91-408f-824c-2507c6af7424/platforms/715/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/0de6f32b-0840-48b0-b32d-f051ff93178e/versions/35548d39-0f91-408f-824c-2507c6af7424/platforms/715/download?notrack=1",
    "path": "CySHell_ClassyPP",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-06-06 11:00:33+00:00"
    },
    "projectUrl": "https://github.com/CySHell/ClassyPP",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.6.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "sen",
    "dependencies": "",
    "description": "A Binary Ninja architecture plugin for the AD Blackfin architecture",
    "installinstructions": {},
    "lastUpdated": 1653716781,
    "license": {
      "name": "GPL-3.0",
      "text": "Copyright 2022 sen\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>."
    },
    "longdescription": "## Analog Devices Blackfin Architecture Plugin\nA Binary Ninja architecture plugin for the AD Blackfin architecture. It includes a standalone disassembler, and fairly robust lifting capabilities.\n\n## Disassembler\nThe disassembler used in this plugin (relagated to the disassembler/ subdirectory) can be used as a standalone decomposer/disassembler, and is not tied to the binaryninja API. It outputs tokenized structures representing each parsed machine code instruction, which can be parsed as desired by the disassembler frontend.\n| ![Disassembly](images/disasm.png) |\n|:--:|\n| *Yes, this is disassembly, not LLIL -- Blackfin uses arithmetic syntax for assembly* |\n### Instruction Support\nDisassembly of all instructions defined in the Blackfin Processor Programming Reference (Rev 2.2) is implemented. Additionally, a set of `pseudo_` instructions are implemented based on the libopcodes blackfin instruction parser, though these instructions do not appear in the above reference manual.\n\nThis disassembler supports only the Blackfin ISA, and _not_ the Blackfin+ superset used on BF7xx processor models. In addition to several new instructions, the Blackfin+ ISA also features a number of additional registers, and support for and usage of 64 bit instructions. At a minimum, support for detecting 64 bit instructions is planned, which would at least allow for disassembly of Blackfin compatible instructions in a Blackfin+ image.\n\n## Lifter\n| ![HLIL](images/hlil.png) |\n|:--:|\n| *HLIL output example* |\n\nThe lifter is mostly complete, with all standard operations supported, but lacking in support of some of the more complex/unusual DSP instructions and operating modes, including operations which saturate rather than overflow, and things like add with reverse bit carry that are complicated to implement correctly in BNIL. Additionally, some vector operations have yet to be implemented.\n\n## Architecture Misc.\n- Currently one standard calling convention (used by the bfin-* compilers, on uCLinux) and one system calling convention (same compilers) are defined.\n- Extremely rudimentary ELF relocation handling is implemented via BlackfinElfRelocationHandler, and this handler is registered to the BinaryNinja Elf view with machine_id == 106.\n- Equally rudimentary bFLT relocation handling is implemented via BlackfinBFLTRelocationHandler. Most of the heavy lifting for this handler is implemented in the bFLT view plugin.\n\n## Known Limitations\n- No lifting support for some DSP operatations\n    - Proper handling of flags: In most cases, conditionals are evaluated based on a manually set CC flag. However in some cases, the dedicated flags (AZ, AC, etc.) are used via the CCFlag instruction -- this instruction is not currently lifted, and flags are not set by operations presently.\n    - DSP multiplication operations, with/without fractionality, with/without saturation\n    - DSP vector shift operations\n    - PACK operation\n    - ABS operation\n    - DSP 'to reg from accumulator' move operations (saturation, fractionality)\n    - Accumulator/accumulator arithmetic\n    - DIVQ and DIVS division primitives\n    - ROT instruction edge cases; common cases handled by lifter\n    - Vector addition/subtraction edge cases; common cases handled by lifter\n    - EXTRACT instruction\n    - SIGNBITS instruction\n    - ALIGN8, ALIGN16, ALIGN32 instruction\n    - DSP LSHIFT operation\n- Out-of-spec handling of 16 bit immediate loads\n    - A common pattern observed in a number of sample binaries was the usage of a `reg.h = imm16; reg.l = imm16` idiom for loading a 32 bit immediate into a full width register. In most cases, the high load immediately precedes the low load, and as such the lifter combines the two operations into a single 32 bit load, which improves the resulting IL. However, in some cases the two operations are split up, and the resulting IL becomes messy, and breaks Binary Ninja's Value Set Analysis (VSA). In order to combat this, the lifter currently interprets a lone load high instruction as a 32 bit load to the full width register, assuming that the low bytes will be overwritten by a load low at some point before the register is read. This has been true in all cases observed during the development of this plugin, but _does not follow the Blackfin spec_ and technically produces incorrect IL. So far, the risk of occasional incorrect IL is outweighed by the greatly improved IL in the majority of cases, but be warned.\n- No support for parallel execution\n    - Blackfin ISA supports the parallel execution of up to three instructions at once. This is not implemented in the disassembler or lifter at present, and input machine code is treated as entirely sequential. As a consequence, under very specific circumstances the resulting disassembly may be misinterpreted -- for example, when one instruction in the parallel issued set sets a register, and the next in the set uses that same register as a source. In reality, because the instructions are being executed in parallel, the value of the register used in the latter operation will not have been updated at execution time, but the disassembly output will indicate that this _is_ the case.",
    "minimumbinaryninjaversion": 3,
    "name": "Blackfin Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/20a294b2-38c6-44cd-9575-44a46b9202a4/versions/ef7597f7-5941-47cb-8398-335c884e473c/platforms/721/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/20a294b2-38c6-44cd-9575-44a46b9202a4/versions/ef7597f7-5941-47cb-8398-335c884e473c/platforms/721/download?notrack=1",
    "path": "0bs3n_archblackfin",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-05-28 05:46:21+00:00"
    },
    "projectUrl": "https://github.com/0bs3n/arch-blackfin",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "matteyeux",
    "dependencies": "",
    "description": "Binary Ninja comments viewer",
    "installinstructions": {},
    "lastUpdated": 1653671403,
    "license": {
      "name": "MIT",
      "text": "Copyright 2022 matteyeux\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Binary Ninja comments viewer to visualize all comments of a BNDB.\n\n![Capture](https://user-images.githubusercontent.com/8758978/170741651-ed42a9b2-a5f9-465e-bb81-d57d87422b13.png)\n",
    "minimumbinaryninjaversion": 2487,
    "name": "Comments Viewer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/2fc483f2-aa44-463f-acda-8d6ca6883f94/versions/868be1bf-09f5-4530-8882-cc7df376fb3a/platforms/727/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/2fc483f2-aa44-463f-acda-8d6ca6883f94/versions/868be1bf-09f5-4530-8882-cc7df376fb3a/platforms/727/download?notrack=1",
    "path": "matteyeux_commentsviewer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-05-27 17:10:03+00:00"
    },
    "projectUrl": "https://github.com/matteyeux/comments-viewer",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Terry Chia",
    "dependencies": "",
    "description": "Manage custom type libraries.",
    "installinstructions": {},
    "lastUpdated": 1611994918,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Terry Chia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin loads custom type libraries from `~/.binaryninja/typelib`. A helper function is also included to generate type libraries from a header file.",
    "minimumbinaryninjaversion": 2000,
    "name": "Binary Ninja Type Manager",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ff7dfa2b-b0b6-4ed3-8f13-595510dc0d77/versions/b7d5a060-011c-4883-88da-064446f77531/platforms/733/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ff7dfa2b-b0b6-4ed3-8f13-595510dc0d77/versions/b7d5a060-011c-4883-88da-064446f77531/platforms/733/download?notrack=1",
    "path": "Ayrx_binjatypemanager",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-01-30 08:21:58+00:00"
    },
    "projectUrl": "https://github.com/Ayrx/binja-typemanager",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "cynder (kat)",
    "dependencies": "capstone\n",
    "description": "Processing for Apple's dyld_shared_cache format.",
    "installinstructions": {},
    "lastUpdated": 1646117987,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022, katherine \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Dyld Shared Cache Parser\nAuthor: **cynder (kat)**\n\n_Dyld Shared Cache Support for BinaryNinja_\n\n![BinaryNinja Screenshot](.github/sbui.png?raw=true \"Screenshot\")\n\nWithout any of the fuss of requiring manually loading several unrelated images, or the awful off-image addresses, and with better output than IDA, Hopper, or any other disassembler on the market. \n\n## Installation + Usage\n\n1. Install capstone via pip for the same python interpreter your BinaryNinja install is using. \n2. git clone (or download and unzip) this folder to your BinaryNinja plugins folder.\n\n### Usage:\n\n1. Open Dyld Shared Cache file with BN\n2. Select the Image you would like to disassemble\n3. Congrats, you are now Reverse Engineering the Mach-O\n\n## Description:\n\nThis project acts as an interface for two seperate projects; DyldExtractor, and ktool. Mainly DyldExtractor.\n\n[DyldExtractor](https://github.com/arandomdev/DyldExtractor) is a project written primarily by 'arandomdev' designed for CLI standalone dyld_shared_cache extraction. It is *the* best tool for the job, and reverses the majority of \"optimizations\" that make DSC reverse engineering ugly and painful. Utilizing this plugin, Binja's processing should outperform IDAs, and wont require IDA's need for repeatedly right clicking and manually loading tons of modules.\n\nThis version of DyldExtractor has a lot of modifications (read: a lot of commented out lines) from the original designed to make it function better in the binja environment. \n\n[ktool](https://github.com/cxnder/ktool) is a multifaceted project I wrote for, primarily, MachO + ObjC Parsing.\n\nIt is mainly used for super basic parsing of the output, as we need to properly write the segments to the VM (and scrap all the dsc data that was originally in this file) so the Mach-O View knows how to parse it. \n\n## License\n\nThis plugin, along with ktool and dyldextractor are released under an [MIT license](./license). Both of these plugins are vendored within this project to make installation slightly simpler. \n",
    "minimumbinaryninjaversion": 3164,
    "name": "Dyld Shared Cache Processor",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c5fb832d-e505-4819-a442-c3ce1e0bf18d/versions/553c19ae-a843-4c25-b6f1-b83cffc9ff87/platforms/739/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c5fb832d-e505-4819-a442-c3ce1e0bf18d/versions/553c19ae-a843-4c25-b6f1-b83cffc9ff87/platforms/739/download?notrack=1",
    "path": "0cyn_bndyldsharedcache",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-03-01 06:59:47+00:00"
    },
    "projectUrl": "https://github.com/0cyn/bn-dyldsharedcache",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "EliseZeroTwo",
    "dependencies": "",
    "description": "Helper for exploring structured exception handlers in PEs",
    "installinstructions": {},
    "lastUpdated": 1645253869,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 EliseZeroTwo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# SEH Helper\n\nAuthor: **EliseZeroTwo**\n\n_A Binary Ninja helper for exploring structured exception handlers in PEs_\n\n## Side-Note\n\nI dislike GitHub, this plugin is only here as Binary Ninja relies on GitHub for it's plugin manager which I feel is bad. GitHub requires an account for more and more basic features with every passing day. It will not be long until GitHub accounts will be merged with Microsoft account similarly to what is going on with Mojang accounts at the moment. I do not want to log in with a Microsoft account to clone a repo, nor do you. GitHub also accepts a large, but unknown, sum of money every year for their contract with the United States Immigration and Customs Enforcement agency which is even more reason to not buy into their closed-wall garden.\n\n## Description:\n\nThis plugin provides a UI helper for exploring structured exception handlers in PEs. It provides a feature to view all entries, view the entry at the cursor, or follow the cursor displaying the entry at the cursor constantly.\n\n## License\n\nThis plugin is released under an [MIT license](./license).\n\n![SEH Demo Image](./images/demo.png)\n",
    "minimumbinaryninjaversion": 3164,
    "name": "SEH Helper",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4e33f314-29d4-4c54-b90c-0cdcff772bd7/versions/0c88b414-4e34-427c-b7a9-1d358e3f368b/platforms/751/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4e33f314-29d4-4c54-b90c-0cdcff772bd7/versions/0c88b414-4e34-427c-b7a9-1d358e3f368b/platforms/751/download?notrack=1",
    "path": "EliseZeroTwo_SEHHelper",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-02-19 06:57:49+00:00"
    },
    "projectUrl": "https://github.com/EliseZeroTwo/SEH-Helper",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.2.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "fkie-cad",
    "dependencies": "git+https://github.com/fkie-cad/dewolf-logic.git#egg=delogic\ngit+https://github.com/fkie-cad/dewolf-idioms.git\nblack\nisort\nnetworkx != 2.8.4\npydot\npygments\npytest !=5.3.4\npytest-xdist\nz3-solver == 4.8.10\n",
    "description": "Research Decompiler to generate a C-like function representation",
    "installinstructions": {},
    "lastUpdated": 1735694706,
    "license": {
      "name": "LGPL-2.1",
      "text": "This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA"
    },
    "longdescription": "# dewolf\n\ndewolf is a research decompiler we developed during a research cooperation from 2019 to 2021 between Germany (Fraunhofer FKIE) and Singapore (DSO National Laboratories).\n\nThe restructuring of dewolf is based on the former DREAM/DREAM++ approach [Yakdan et al. NDSS 2015, IEEE (SP) 2016].\n\nThe decompiler dewolf is implemented as a plugin for Binary Ninja and uses their Medium-Level intermediate language as the starting point.\nAlthough we consider dewolf to be pretty stable, it is still a research prototype and not extensively optimized for production use.\nConsequently, you will likely observe a few bugs or even decompilation failures when applying dewolf on real-world binaries.\n\n**If you encounter any bugs, please report them to us so that we can further improve dewolf. :)**\n\n## Usage\n\nAfter enabling the dewolf decompilation dock widget via **View > Other Docks > Show Dewolf**, the decompiled code for the currently active symbol will be displayed.\nIn the dewolf dock, it is possible to navigate through functions by double-clicking them.\n\n![Widget Menu](https://user-images.githubusercontent.com/12004321/145460440-be4b7dfd-bf7e-497f-a7af-1911bf3efc50.png)\n\nThe automatic decompilation of selected functions can be toggled with the *follow* button.\nDecompiled code is cached and can be generated again with the *decompile* button, e.g. after patching instructions in the binary view.\n\n![Widget](https://user-images.githubusercontent.com/12004321/145460476-f869e5cc-d585-4f53-8920-6ecfa4b346d5.png)\n\n## Configuration\ndewolf has multiple configuration options of which some are configurable via the GUI.\n\nYou can configure dewolf from the Binary Ninja GUI by navigating to **Edit > Preferences > Settings** or by pressing <kbd>Ctrl</kbd> + <kbd>,</kbd>.\nSearch for **dewolf** in the search bar and all dewolf related settings will be displayed.\n\n## Support\n\nIf you have any suggestions, or bug reports, please create an issue in the [Issue Tracker](https://github.com/fkie-cad/dewolf/issues).\n\nIn case you have any questions or other problems, feel free to send an email to:\n\n[dewolf@fkie.fraunhofer.de](mailto:dewolf@fkie.fraunhofer.de).",
    "minimumbinaryninjaversion": 4271,
    "name": "dewolf Decompiler",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/f5130118-a5fa-4c98-b5fb-214042d1634a/versions/906b6508-eca1-4cd8-aefd-4922633f4e0a/platforms/763/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/f5130118-a5fa-4c98-b5fb-214042d1634a/versions/906b6508-eca1-4cd8-aefd-4922633f4e0a/platforms/763/download?notrack=1",
    "path": "fkiecad_dewolf",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2025-01-01 01:25:06+00:00"
    },
    "projectUrl": "https://github.com/fkie-cad/dewolf",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "2025-01-01"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Fabian Freyer",
    "dependencies": "",
    "description": "Show current IL instruction hierarchy in sidebar",
    "installinstructions": {},
    "lastUpdated": 1644114999,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 Fabian Freyer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    },
    "longdescription": "# IL Hierarchy\n\n_Show current IL instruction hierarchy in sidebar_\n\n## Description:\n\nDisplays the currently selected IL hierarchy in a sidebar pane.\n\n## Minimum Version\n\n3.0\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n\n## Metadata Version\n\n2",
    "minimumbinaryninjaversion": 3233,
    "name": "ilhierarchy",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/f5c77397-19a6-4924-93c8-d2949254d710/versions/e3f4a597-a47d-4f2b-8539-6197acceeb73/platforms/769/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/f5c77397-19a6-4924-93c8-d2949254d710/versions/e3f4a597-a47d-4f2b-8539-6197acceeb73/platforms/769/download?notrack=1",
    "path": "fabianfreyer_binjailhierarchy",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-02-06 02:36:39+00:00"
    },
    "projectUrl": "https://github.com/fabianfreyer/binja-il-hierarchy",
    "subdir": "",
    "type": [
      "ui",
      "core"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Eric Biazo",
    "dependencies": "",
    "description": "Generates calltree. Alternative view for callgraph",
    "installinstructions": {},
    "lastUpdated": 1725471478,
    "license": {
      "name": "MIT",
      "text": "Copyright 2021 Eric Biazo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Calltree\n\nAuthor: **Eric Biazo**\n\nCalltree generator for function\n\n## Description:\n\nGenerates call tree. Alternative view for callgraph.\n\n## Releases\n\n* 2.1 -- Bug Fix\n* 2.0 -- Multiview Support\n* 1.2 -- Bug Fixes\n* 1.1 -- Refactoring\n* 1.0 -- Public Release\n* 0.0 -- Beta Release\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n * 2966\n\n## License\n\nThis plugin is released under an [MIT license](./LICENSE).\n\n## Caution\n\nWhen working with really big binaries with alot of xrefs, you would want to change recursive depth to smaller number or else Binary Ninja might hang.\n## Description\n\nCalltree is a plugin that generates call tree for a function. It is an alternative view for callgraph. It is a multiview plugin, so you can have multiple calltree views open at the same time.\n\n### Default View\n\n![](images/2023-03-06-23-31-27.png)\n\n### Expand and Collapse tree\n\n**Expand**\n\n![](images/2023-03-06-23-44-02.png)\n\n**Collapse**\n\n![](images/2023-03-06-23-44-24.png)\n\n**Search**\n\n![](images/2022-02-09-16-53-33.png)\n\n### Recursion Depth\n\n**Show Only Root Level**\n\n![](images/2022-02-09-16-57-21.png)\n\n**Default Recursion Depth in Setting**\n\n![](images/2022-02-09-16-59-03.png)\n\n### Pinning and Removing Calltree View\n\n**Pinning Calltree View**\n\n![](images/2023-03-06-23-40-42.png)\n\n**Pinned Calltree Name Max Length**\n\n![](images/2023-03-06-23-46-04.png)\n\n\n## Contributors\n\nThanks everyone that have contributed to calltree!\n\n* galenbwill\n* droogie\n* bambu\n* crimsonskylark\n",
    "minimumbinaryninjaversion": 2966,
    "name": "Calltree",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ed244215-6709-4b75-bfe7-9666b2f8f1b7/versions/2384fc82-b09a-4cef-af0f-b1ef03d97916/platforms/775/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ed244215-6709-4b75-bfe7-9666b2f8f1b7/versions/2384fc82-b09a-4cef-af0f-b1ef03d97916/platforms/775/download?notrack=1",
    "path": "elbiazo_calltree",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-09-04 17:37:58+00:00"
    },
    "projectUrl": "https://github.com/elbiazo/calltree",
    "subdir": "",
    "type": [
      "binaryview",
      "helper",
      "ui"
    ],
    "version": "2.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Alexandre Gazet",
    "dependencies": "",
    "description": "Helper plugin to synchronize Binary Ninja with a debugging session",
    "installinstructions": {},
    "lastUpdated": 1642809517,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020-2022 Alexandre Gazet.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin is a part of ret-sync, a set of plugins that help to synchronize a debugging session (WinDbg/GDB/LLDB/OllyDbg/OllyDbg2/x64dbg) with a disassembler (IDA/Ghidra/Binary Ninja).",
    "minimumbinaryninjaversion": 2,
    "name": "ret-sync",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9f35824a-fa1c-4322-9052-6132f6f47039/versions/bf0e2098-41f6-4b6c-982a-90f68f263dd8/platforms/781/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9f35824a-fa1c-4322-9052-6132f6f47039/versions/bf0e2098-41f6-4b6c-982a-90f68f263dd8/platforms/781/download?notrack=1",
    "path": "bootleg_retsync",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-01-21 23:58:37+00:00"
    },
    "projectUrl": "https://github.com/bootleg/ret-sync",
    "subdir": "ext_bn/retsync",
    "type": [
      "helper"
    ],
    "version": "0.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Brandon Miller",
    "dependencies": "",
    "description": "Recover Linux kernel build configurations",
    "installinstructions": {},
    "lastUpdated": 1642134808,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 Brandon Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-kconfig-recover ![Python Lint](https://github.com/zznop/bn-kconfig-recover/workflows/pylint/badge.svg)\n\n![demo bn-kconfig-recover](bn-kconfig-recover.gif)\n\n## Description\n\nBinary Ninja plugin that analyzes Linux kernel binaries to automate recovery of the build configuration (`.config`)\n\n## Usage\n\n```\nusage: bn_kconfig_recover.py [-h] [-d] bndb kconfig\n\npositional arguments:\n  bndb         File path to kernel ELF or Binary Ninja database\n  kconfig      File path to save recovered kernel configuration\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -d, --debug  Enable debug logging\n```\n\n\n",
    "minimumbinaryninjaversion": 3164,
    "name": "BN KConfig Recover",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/2d78c518-2e2a-4b4b-a671-c754e7d46e54/versions/9d3f0f7f-1d74-442c-a22d-077b468ecbb2/platforms/787/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/2d78c518-2e2a-4b4b-a671-c754e7d46e54/versions/9d3f0f7f-1d74-442c-a22d-077b468ecbb2/platforms/787/download?notrack=1",
    "path": "zznop_bnkconfigrecover",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-01-14 04:33:28+00:00"
    },
    "projectUrl": "https://github.com/zznop/bn-kconfig-recover",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Gamozo Labs, LLC",
    "dependencies": "",
    "description": "Load old COFF .dbg files as well as CAB-ed .db_ files!",
    "installinstructions": {},
    "lastUpdated": 1637016799,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 Gamozo Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Summary\n\nThis is a very simple tool that prints out function, global, and source line\ninformation from a `.dbg` \"DI\" COFF debug file.\n\nThis can handle both `DI` magic files and CAB (cabinet) files with `DI` files\ninside of them.\n\n# Format\n\nThis outputs a format:\n\n```\nF <addr> <function>\nG <addr> <global>\nS <addr> <source>:<line>\n```\n\n# Binary Ninja Plugin\n\nIncluded is a `binaryninja` plugin. Copy the folder `binaryninja/dbg_load` to\nyour `~/.binaryninja/plugins` folder.\n\nThen install this tool to your `PATH` by `cargo install --path .`.\n\nYou can then use `Tools > Plugins > Load COFF DBG File` to load a `.DBG` or\n`.DB_` file into your program. For best results turn off auto-analysis and\nload the symbols before analyzing the binary as it will let Binary Ninja know\nexactly where functions are!\n\n![Binary Ninja screenshot showing symbolized and typed output](/binaryninja/example.png)\n\n# Example\n\n```\ncargo run --release /home/pleb/nt/isos/fre/SUPPORT/DEBUG/MIPS/SYMBOLS/EXE/WRITE.DB_\nF 000010dc WinMain\nF 000011fc __F3_$WinMainCRTStartup\nF 00001220 WinMainCRTStartup\nF 00001434 _XcptFilter\nF 00001444 __C_specific_handler\nF 00001454 _setargv\nF 0000145c _matherr\nF 00001464 _initterm\nG 00000000 header\nG 00001000 __imp_GetModuleHandleA\nG 00001004 __imp_GetStartupInfoA\nG 00001008 __imp_GetCommandLineA\nG 0000100c \u007fKERNEL32_NULL_THUNK_DATA\nG 00001010 __imp__fmode\nG 00001014 __imp_exit\nG 00001018 __imp___setusermatherr\nG 0000101c __imp__exit\nG 00001020 __imp__acmdln\nG 00001024 __imp___getmainargs\nG 00001028 __imp__initterm\nG 0000102c __imp__commode\nG 00001030 __imp___set_app_type\nG 00001034 __imp__XcptFilter\nG 00001038 __imp___C_specific_handler\nG 0000103c \u007fMSVCRT_NULL_THUNK_DATA\nG 00001040 __imp_ShellExecuteA\nG 00001044 \u007fSHELL32_NULL_THUNK_DATA\nG 000010dc .text\nG 000011fc .text\nG 00001454 .text\nG 0000145c .text\nG 00001474 ___S2_$WinMainCRTStartupd\nG 00001488 __IMPORT_DESCRIPTOR_SHELL32\nG 0000149c __IMPORT_DESCRIPTOR_KERNEL32\nG 000014b0 __IMPORT_DESCRIPTOR_MSVCRT\nG 000014c4 __NULL_IMPORT_DESCRIPTOR\nG 00001530 .idata$6\nG 00001560 .idata$6\nG 00001606 .idata$6\nG 00002000 __xc_a\nG 00002004 __xc_z\nG 00002008 __xi_a\nG 0000200c __xi_z\nG 00002010 _$$1$d1\nG 0000201c _commode\nG 00002020 _dowildcard\nG 00002024 _fmode\nG 00002028 _newmode\nG 0000202c __defaultmatherr\nG 00002030 __onexitbegin\nG 00002034 __onexitend\nG 00004120 .rsrc$02\nG 00006000 end\nS 000010dc D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:6\nS 000010e8 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:8\nS 000010f8 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:10\nS 000010fc D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:8\nS 00001104 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:10\nS 00001108 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:37\nS 0000110c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:16\nS 0000113c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:21\nS 00001144 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:22\nS 00001148 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:24\nS 0000114c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:23\nS 00001150 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:25\nS 0000115c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:26\nS 00001170 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:27\nS 00001174 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:32\nS 00001184 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:34\nS 00001188 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:33\nS 0000118c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:34\nS 0000119c D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:37\nS 000011a0 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:36\nS 000011a4 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:37\nS 000011b0 D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:40\nS 000011ec D:\\nt\\private\\windows\\shell\\accesory\\write\\write.c:42\nS 000011fc crtexe.c:345\nS 00001220 crtexe.c:175\nS 00001228 crtexe.c:199\nS 0000123c crtexe.c:209\nS 00001244 crtexe.c:214\nS 00001254 crtexe.c:209\nS 00001264 crtexe.c:214\nS 00001268 crtexe.c:215\nS 00001278 crtexe.c:234\nS 0000127c crtexe.c:215\nS 00001280 crtexe.c:241\nS 0000128c crtexe.c:242\nS 000012a4 crtexe.c:251\nS 000012b8 crtexe.c:268\nS 000012c0 crtexe.c:266\nS 000012c8 crtexe.c:268\nS 000012e8 crtexe.c:266\nS 000012ec crtexe.c:274\nS 00001300 crtexe.c:287\nS 00001308 crtexe.c:274\nS 0000130c crtexe.c:317\nS 00001310 crtexe.c:287\nS 00001314 crtexe.c:290\nS 00001320 crtexe.c:296\nS 00001350 crtexe.c:301\nS 00001358 crtexe.c:302\nS 0000135c crtexe.c:304\nS 00001360 crtexe.c:303\nS 00001364 crtexe.c:305\nS 00001370 crtexe.c:306\nS 00001384 crtexe.c:312\nS 00001394 crtexe.c:314\nS 00001398 crtexe.c:313\nS 0000139c crtexe.c:314\nS 000013ac crtexe.c:317\nS 000013b0 crtexe.c:316\nS 000013b4 crtexe.c:317\nS 000013c0 crtexe.c:330\nS 000013f8 crtexe.c:343\nS 0000140c crtexe.c:344\nS 00001414 crtexe.c:350\nS 00001428 crtexe.c:354\nS 00001454 dllargv.c:49\nS 0000145c merr.c:33\n```\n\n",
    "minimumbinaryninjaversion": 1200,
    "name": "DBG Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/faeca85e-3460-4b02-84f1-7ab3a327d799/versions/5940451a-7fa9-4b04-9d75-454918bdddab/platforms/793/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/faeca85e-3460-4b02-84f1-7ab3a327d799/versions/5940451a-7fa9-4b04-9d75-454918bdddab/platforms/793/download?notrack=1",
    "path": "gamozolabs_coff_nm",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-11-15 22:53:19+00:00"
    },
    "projectUrl": "https://github.com/gamozolabs/coff_nm",
    "subdir": "binaryninja/dbg_load",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Eric Hennenfent",
    "dependencies": "",
    "description": "Displays a window that explains in simple English what an assembly instruction does",
    "installinstructions": {},
    "lastUpdated": 1633829742,
    "license": {
      "name": "Apache 2",
      "text": "https://github.com/ehennenfent/binja_explain_instruction/blob/master/LICENSE"
    },
    "longdescription": "Parses the Lifted IL for an instruction and uses it to (attempt to) generate an English description of what an instruction does. See also: [README.md](https://github.com/ehennenfent/binja_explain_instruction/blob/master/README.md)",
    "minimumbinaryninjaversion": 3053,
    "name": "Explain Instruction",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/25757a53-b30e-47bf-9159-6ee389017abf/versions/2846dd0b-97a1-42be-9bcb-626bd00a3880/platforms/799/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/25757a53-b30e-47bf-9159-6ee389017abf/versions/2846dd0b-97a1-42be-9bcb-626bd00a3880/platforms/799/download?notrack=1",
    "path": "ehennenfent_binja_explain_instruction",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-10-10 01:35:42+00:00"
    },
    "projectUrl": "https://github.com/ehennenfent/binja_explain_instruction",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.2.1-alpha"
  },
  {
    "api": [
      "python3"
    ],
    "author": "EliseZeroTwo",
    "dependencies": "",
    "description": "iBoot/SecureROM Loader",
    "installinstructions": {},
    "lastUpdated": 1677262467,
    "license": {
      "name": "ISC",
      "text": "Copyright 2020 EliseZeroTwo\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "# iBoot-Binja-Loader\n### Author: **EliseZeroTwo** & **matteyeux**\n\nBinary Ninja Loader for iBoot & SecureROM\n\n## Credits\n- [argp for iBoot64helper](https://github.com/argp/iBoot64helper)\n\n## Installation Instructions\n### Windows\n\nClone this repository into `%APPDATA%/Binary Ninja/plugins/`\n\n### Darwin\n\nClone this repository into `~/Library/Application Support/Binary Ninja/plugins/`\n\n### Linux\n\nClone this repository into `~/.binaryninja/plugins/`\n## Minimum Version\n\nBinary Ninja v1200\n\n\n\n## License\n\nThis plugin is released under the [ISC license](https://github.com/EliseZeroTwo/iBoot-Binja-Loader/blob/master/LICENSE)\n\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 1200,
    "name": "iBootLoader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/018cf3e9-03fa-4286-aee7-cb94891d3c7f/versions/1d3491cb-019a-4048-98c9-822799ce3623/platforms/805/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/018cf3e9-03fa-4286-aee7-cb94891d3c7f/versions/1d3491cb-019a-4048-98c9-822799ce3623/platforms/805/download?notrack=1",
    "path": "EliseZeroTwo_iBootBinjaLoader",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-02-24 18:14:27+00:00"
    },
    "projectUrl": "https://github.com/EliseZeroTwo/iBoot-Binja-Loader",
    "subdir": "",
    "type": [
      "binaryview",
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Zack Orndorff",
    "dependencies": "",
    "description": "Xtensa Architecture and ESP8266 Image Loader",
    "installinstructions": {},
    "lastUpdated": 1629171762,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020-2021 Zack Orndorff\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# binja-xtensa: Architecture Plugin and ESP8266 Loader\n\nTensilica Xtensa Architecture Plugin and ESP8266 Firmware Loader for Binary\nNinja.\n\n![screenshot of Binary Ninja showing setup and loop of a decompiled ESP8266\nArduino project](https://raw.githubusercontent.com/zackorndorff/binja-xtensa/0.5/screenshots/hero.png)\n\n## Features\n\n* Disassembly of nearly all Xtensa instructions\n* Lifting for most Xtensa instructions you'll see in ESP8266 Firmware\n* Support for Xtensa ELF files so they will be automatically recognized\n* Loader for ESP8266 raw firmware dumps. This support is a little finicky to\n  use, as there's multiple partitions in the firmware dumps. By default it uses\n  the last one with a detected header; you can adjust this via Open With\n  Options\n    * At the moment it doesn't completely map the sections properly, but it's a\n      start :)\n\n## What it doesn't do\n\n* It was written mostly as an exercise for the author. It's useful enough to\n  share, but no promises it's useful for your project :)\n* Lift register windowing instructions (it disassembles most of them)\n    * You need this for ESP32 support. It shouldn't be too bad to add, as long\n      as you can figure out how to lift the windowed registers\n* Anything with the optional vector unit\n* Disassemble and lift most of the boolean instructions\n* Lift most floating point instructions\n* Deal with special registers (I figure you might as well look at the asm\n  for that anyway)\n* Anything quickly. This is Python, and not particularly well optimized Python\n  at that. If you're using this seriously, I recommend rewriting in C++\n* Find `main` in a raw binary for you\n\n## Installation\n\nInstall via the Binary Ninja plugin manager. Alternatively, clone this\nrepository into your Binary Ninja plugins directory. See the [official Binary\nNinja documentation](https://docs.binary.ninja/guide/plugins.html) for more\ndetails.\n\n## Using the ESP8266 Firmware Loader\n\nThe default of picking the last usable partition works decent, but if you want\nmore control, use Open With Options and change `Loader > Which Firmware` to the\noption corresponding to the address you want to load.\n\nI attempt to load in symbols from the SDK's linker script so some of the\nROM-implemented functions are less mysterious. See\n[parse_rom_ld.py](binja_xtensa/parse_rom_ld.py) for the parsing code,\n[known_symbols.py](binja_xtensa/known_symbols.py) for the database it'll apply,\nand function `setup_esp8266_map` in\n[binaryview.py](binja_xtensa/binaryview.py#L17) for the code that applies it.\nThis should probably be a load time option... but it's not at the moment :/\n\n![screenshot of Binary Ninja's Open With Options showing the Loader Which\nFirmware option](https://raw.githubusercontent.com/zackorndorff/binja-xtensa/0.5/screenshots/open-with-options.png)\n\n## Future Work\n\n* Support register windowing instructions to support ESP32 firmware\n* Improve the raw firmware loader\n* Rewrite to be faster\n\n## Why did you write this?\n\n1. I was goofing around with ESP8266 and Arduino and was annoyed I didn't have\n   an easy way to disassemble the built binaries\n2. I hadn't written a full architecture plugin and I thought it'd be a good\n   exercise\n3. I got bored over COVID-19 lockdown in 2020 and needed something to do\n\n## Testing\n\nThere are some simple tests in\n[test_instruction.py](binja_xtensa/test_instruction.py), which are mostly just\ntaking uniq'd output from objdump on some binaries I had laying around and\nmaking sure the output matches. They can be run with `python -m pytest` from the\nroot of the project.\n\n## License\n\nThis project copyright Zack Orndorff (@zackorndorff) and is available under the\nMIT license. See [LICENSE](LICENSE).\n",
    "minimumbinaryninjaversion": 2846,
    "name": "Xtensa Architecture and ESP8266 Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a970c889-e05a-4423-92a3-6e4be9953479/versions/9dd4a842-0c97-4217-a6cf-6059db272e8d/platforms/811/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a970c889-e05a-4423-92a3-6e4be9953479/versions/9dd4a842-0c97-4217-a6cf-6059db272e8d/platforms/811/download?notrack=1",
    "path": "zackorndorff_binjaxtensa",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-08-17 03:42:42+00:00"
    },
    "projectUrl": "https://github.com/zackorndorff/binja-xtensa",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "0.5.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Markus Gaasedelen",
    "dependencies": "",
    "description": "A Coverage Explorer for Reverse Engineers",
    "installinstructions": {},
    "lastUpdated": 1707156737,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2024> Markus Gaasedelen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Lighthouse - A Coverage Explorer for Reverse Engineers\n\n<p align=\"center\">\n<img alt=\"Lighthouse Plugin\" src=\"https://raw.githubusercontent.com/gaasedelen/lighthouse/master/screenshots/overview.gif\"/>\n</p>\n\n## Overview\n\nLighthouse is a powerful code coverage explorer for [IDA Pro](https://www.hex-rays.com/products/ida/) and [Binary Ninja](https://binary.ninja/), providing software researchers with uniquely interactive controls to study execution maps for native applications without requiring symbols or source.\n\nFor additional usage information, please check out the full [README](https://github.com/gaasedelen/lighthouse) on GitHub.\n",
    "minimumbinaryninjaversion": 4526,
    "name": "Lighthouse",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4f0044ef-40c8-4251-a253-95f2160949d7/versions/512687f5-da90-4b5e-9a6f-0f76051991e6/platforms/817/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4f0044ef-40c8-4251-a253-95f2160949d7/versions/512687f5-da90-4b5e-9a6f-0f76051991e6/platforms/817/download?notrack=1",
    "path": "gaasedelen_lighthouse",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-02-05 18:12:17+00:00"
    },
    "projectUrl": "https://github.com/gaasedelen/lighthouse",
    "subdir": "binjastub",
    "type": [
      "helper"
    ],
    "version": "0.9.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Glenn Smith",
    "dependencies": "",
    "description": "Makes your integers print as hex in the python console.",
    "installinstructions": {},
    "lastUpdated": 1698799171,
    "license": {
      "name": "MIT",
      "text": "MIT License\n\nCopyright (c) 2021 Glenn Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Hex Integer Display\nA simple python displayhook wrapper for printing ints in hex. Works on nested types, like\narrays, tuples, and dictionaries. Also prints the contents of generator objects.\n\n    # Prints integers as hex\n    >>> 123\n    123 / 0x7b\n    \n    # Decimal printing is optional (see Settings)\n    >>> 123\n    0x7b\n    \n    # Works on both the repl and the print function \n    >>> print(123)\n    123 / 0x7b\n    \n    # Lists, dicts, and tuples supported \n    >>> list(range(10))\n    [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9]\n    \n    # Generator unwrapping, because why not?\n    >>> bv.functions\n    (generator FunctionList) [<func: x86@0x401005>,\n     <func: x86@0x40100a>,\n     <func: x86@0x40100f>,\n     <func: x86@0x40101e>,\n     ...]",
    "minimumbinaryninjaversion": 2846,
    "name": "Hex Integers in Python Console",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7c95c941-275c-4515-8f7e-fe518055ea86/versions/b734eaf3-641f-47e0-8095-0b5e72e23e47/platforms/823/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7c95c941-275c-4515-8f7e-fe518055ea86/versions/b734eaf3-641f-47e0-8095-0b5e72e23e47/platforms/823/download?notrack=1",
    "path": "CouleeApps_hex_integers",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-11-01 00:39:31+00:00"
    },
    "projectUrl": "https://github.com/CouleeApps/hex_integers",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.10"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Linus S. (aka PistonMiner)",
    "dependencies": "",
    "description": "GameCube symbol map loader",
    "installinstructions": {},
    "lastUpdated": 1625773938,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 Linus S. (aka PistonMiner)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# GameCube symbol map loader (v1.0.0)\nAuthor: **Linus S. (aka PistonMiner)**\n\n_GameCube symbol map loader_\n\n## Description:\n\nLoader for `.map` files as used on GameCube and Wii\n\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 2846\n\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 2846,
    "name": "GameCube symbol map loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ec440180-fcce-436e-aff7-898a0ccc120a/versions/5ac7dce3-91da-436e-af6a-f70f1c3131bc/platforms/829/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ec440180-fcce-436e-aff7-898a0ccc120a/versions/5ac7dce3-91da-436e-af6a-f70f1c3131bc/platforms/829/download?notrack=1",
    "path": "PistonMiner_binaryninjagcloadmap",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-07-08 19:52:18+00:00"
    },
    "projectUrl": "https://github.com/PistonMiner/binaryninja-gc-load-map",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Linus S. (aka PistonMiner)",
    "dependencies": "",
    "description": "GameCube DOL file BinaryView",
    "installinstructions": {},
    "lastUpdated": 1625773954,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 Linus S. (aka PistonMiner)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# GameCube DOL (v1.0.0)\nAuthor: **Linus S. (aka PistonMiner)**\n\n_GameCube DOL file BinaryView_\n\n## Description:\n\nBinary View for `.dol` files as used on GameCube and Wii\n\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 2846\n\n\n## License\n\nThis plugin is released under a MIT license.\n## Metadata Version\n\n2\n",
    "minimumbinaryninjaversion": 2846,
    "name": "GameCube DOL",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e2a3d2be-2dcc-4a24-9413-3ea84d0fcfef/versions/a46d2d92-af4e-4945-854b-21398b3001c3/platforms/835/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e2a3d2be-2dcc-4a24-9413-3ea84d0fcfef/versions/a46d2d92-af4e-4945-854b-21398b3001c3/platforms/835/download?notrack=1",
    "path": "PistonMiner_binaryninjagcdol",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-07-08 19:52:34+00:00"
    },
    "projectUrl": "https://github.com/PistonMiner/binaryninja-gc-dol",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "amtal",
    "dependencies": "",
    "description": "Configurable soft core for Xilinx FPGAs.",
    "installinstructions": {},
    "lastUpdated": 1653804366,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021 amtal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# \u03bcBlaze Architecture Plugin\n\n[MicroBlaze](https://en.wikipedia.org/wiki/MicroBlaze) is a configurable [soft processor](https://en.wikipedia.org/wiki/Soft_microprocessor) core from Xilinx going all the way back to their Spartan-II series of [FPGA](https://en.wikipedia.org/wiki/Field-programmable_gate_array)s. It can be found in a variety of roles within larger FPGA designs: from bare-bones microcontroller, to full Linux application processor, to early-boot [embedded controller](https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841724/PMU+Firmware).\n\n![Example Disassembly and HLIL](https://raw.githubusercontent.com/amtal/microblaze/master/img/header.gif)\n\n## Features\n\nThis plugin works on Linux binaries:\n\n* Relocations\u2020 for working Triage Summary imports!\n* Syscall arguments!\u2021\n* That one cursed ELF `e_machine` value that's no longer used!\n\nThis plugin supports bare-metal firmware:\n\n* Bus transfer and MSR intrinsics!\n* Intrinsics for privileged operations!\n* 64-bit instruction\u2260 extensions!\n\nMinor, unimportant quality of life things:\n\n* Nice disassembly of relative branches and 32-bit immediates!\n* Delay slots are properly lifted!\n* Disassembles\u30ad all configuration options in [UG984 (v2020.2)](https://www.xilinx.com/support/documentation/sw_manuals/xilinx2020_2/ug984-vivado-microblaze-ref.pdf) even the weird ones!\n\n## Usage\n\nAll ELF files should Just Work\u2122 but otherwise:\n\n- Likely use `ublaze32be` architecture for older designs.\n- Likely use `ublaze32le` architecture for newer Zynq designs.\n- The `linux-ublaze32xx` default platforms aren't meaningfully different from `arch.standalone_platform`, you don't need to override them.\n- If HLIL looks broken, check source to see if that configuration option has been properly implemented yet.\n\nIf you want to cite this plugin please use:\n\n<pre>\n  @online{ublaze-arch-plugin,\n    title     = {{\\mu}Blaze Architecture Plugin for Binary Ninja},\n    url       = {https://github.com/amtal/microblaze},\n    author    = {amtal},\n    doi       = {10.5281/zenodo.4749823},\n    year      = 2021,\n  }\n</pre>\n\n## Caveats\n\n*\u2020 relocations not well-tested, probably buggy*\n\n*\u2021 minimum viable product, BYOSyscall typelib/headers*\n\n*\u2260 literally just the added 64-from-32 instructions, but 64-bit architecture variant should be trivial if anyone needs it now*\n\n*\u30adbut definitely does not lift correctly, if someone has a clever cross-config validation plan lmk*\n",
    "minimumbinaryninjaversion": 2800,
    "name": "\u03bcBlaze Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/0c89edf4-792e-4126-afbc-dd8c341bf569/versions/fa2b4fab-dbcb-453e-a60a-6c08a88c02fd/platforms/841/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/0c89edf4-792e-4126-afbc-dd8c341bf569/versions/fa2b4fab-dbcb-453e-a60a-6c08a88c02fd/platforms/841/download?notrack=1",
    "path": "amtal_microblaze",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-05-29 06:06:06+00:00"
    },
    "projectUrl": "https://github.com/amtal/microblaze",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Brandon Miller (zznop)",
    "dependencies": "",
    "description": "Helper plugin for analyzing UEFI firmware",
    "installinstructions": {},
    "lastUpdated": 1682696285,
    "license": {
      "name": "MIT",
      "text": "Copyright 2021 Brandon Miller (zznop)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-uefi-helper ![Python Lint](https://github.com/zznop/bn-uefi-helper/workflows/pylint/badge.svg)\n\n## Description\n\nHelper plugin for analyzing UEFI firmware. This plugin contains the following features:\n\n* Apply the correct prototype to the entry point function\n* Fix segments so all segments are RWX and have the correct semantics\n   * This allows for global function pointers to be rendered correctly\n* Apply types for core UEFI services (from EDK-II)\n* Locate known protocol GUIDs and assign the GUID type and a symbol\n* Locate global assigments in entry and initialization functions and assign types\n   * `EFI_SYSTEM_TABLE`, `EFI_RUNTIME_SERVICES`, `EFI_BOOT_SERVICES`, etc...\n* Loader for Terse Executables\n\n![demo bn-uefi-helper](screen.gif)\n\n## Minimum Version\n\nTested on 2.3.2660\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Related Projects\n\n* [ghidra-firmware-utils](https://github.com/al3xtjames/ghidra-firmware-utils)\n* [efiXplorer](https://github.com/binarly-io/efiXplorer)\n",
    "minimumbinaryninjaversion": 2660,
    "name": "bn-uefi-helper",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9fc1b4f9-c405-4f07-aaf2-9ba04a6d70cb/versions/dba227bf-870d-40a5-ae46-e317cbe20f69/platforms/847/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9fc1b4f9-c405-4f07-aaf2-9ba04a6d70cb/versions/dba227bf-870d-40a5-ae46-e317cbe20f69/platforms/847/download?notrack=1",
    "path": "zznop_bnuefihelper",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-04-28 15:38:05+00:00"
    },
    "projectUrl": "https://github.com/zznop/bn-uefi-helper",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.3"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Yu-Jye Tung",
    "dependencies": "toolz==0.10.0\nclick==7.1.2\n",
    "description": "detect opaque predicates",
    "installinstructions": {},
    "lastUpdated": 1618026013,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2019 Yu-Jye Tung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# <p align='center'> Opaque Predicates Detective </p>\n\n![OP Detective](op_detective.png)\n\n## Introduction: \nPrevious approaches to generically identify opaque predicates work by identifying if a conditional branch contains an invariant expression. Our approach generically identify opaque predicates from a different perspective: __the damage caused by the obfuscation__. The damage is localized at the basic block level (or at the function level) regardless of how an opaque predicate's invariant expression is constructed. This approach allows us to also detect an opaque predicate whose invariant expression is constructed across multiple processes! \n\nIDA also detects opaque predicates from the damage but its approach cannot identify the exact superfluous branch, [which allows for the creation of stealthier opaque predicates](https://yellowbyte.github.io/blog/2018/the_return_of_disassembly_desynchronization/).\n\nThere are two main types of damage resulting from opaque predicates: code bloat or disassembly desynchronization. __Current implementation focuses on detecting opaque predicates when the damage is disassembly desynchronization__. Disassembly desynchronization is a umbrella term for obfuscation techniques that disrupt static disassembly by the creative placement of junk bytes (random data bytes) into the instruction stream such that a disassembler will parse those junk bytes as code instructions. In the case of an opaque predicate, junk bytes are inserted into the target basic block of the opaque predicate's superfluous branch. To identify opaque predicates' superfluous branches, we analyze each conditional branch's outgoing basic blocks for __illogical behaviors__ (which can manifest from code instructions that are actually junk bytes). Note that identifying the superfluous branch will allow us to trace back to the offending opaque predicate.\n\nFuture work will look into detecting opaque predicates when the damage is code bloat.\n\n## Identifying Illogical Behaviors\nWe have a set of rules that checks if a basic block contains the damage performed by opaque predicates. Essentially, the damage translates to illogical code behaviors since current approach is limited to detecting opaque predicates when the damage is [disassembly desynchronization](https://github.com/yellowbyte/reverse-engineering-reference-manual/blob/master/contents/anti-analysis/Anti-Disassembly.md#-disassembly-desynchronization-). \n\nThe names we used for the rules in the [paper](https://archive.bar/pdfs/bar2020-preprint4.pdf) compared to the code are not the same. This means that annoyance might arise if one tries to match a rule described in paper to its actual implementation. \n\nBelow is a Python Dictionary depicting the relationship between the names in code (dictionary key) vs in paper (dictionary value): \n\n```python\nRULES_RELATIONSHIP = {\n    # 'names in code'                   'names in paper'\n    'weird_cutoff':                     'abrupt_basic_block_end',\n    'prob_of_unimpl':                   'unimplemented_BNILs_percentage',\n    'priviledged_instructions':         'privileged_instruction_usage',\n    'def_no_use_dep':                   'defined_but_unused',\n    'memaccess_self':                   'memory_pointer_constraints',\n    'conditional_unused':               'defined_but_unused',\n    'stack_pointer_oddity':             'memory_pointer_constraints',\n    'crazy_mem_offset':                 'unreasonable_memory_offset',\n    'type_discrepency_ptr_in_mult_div': 'memory_pointer_constraints',\n    'memaccess_nonexist':               'nonexistence_memory_address',\n    'memaccess_src_dest_discrepancy':   'memory_pointer_constraints',\n    'call_dest_nonexist':               'nonexistence_memory_address',\n    'jmp_dest_nonexist':                'nonexistence_memory_address',\n}\n```\n\nAs seen in the dictionary, it is not a one-to-one relationship. The rule names in code is more fine-grained than the rule names in paper. For example, the 'nonexistence\\_memory\\_address' rule (in paper) corresponds to 'memaccess\\_nonexist', 'call\\_dest\\_nonexist', and 'jmp\\_dest\\_nonexist' rules (in code). \n\n## Detective in Action:\nCurrent implementation is a [BinaryNinja](https://binary.ninja) plugin.\n\nHow to run plugin: \n![Plugin Run](whole.png)\n\nOutput:\n![Plugin Output](current_output.png)\n\nNote that the printed virtual addresses (highlighed in green) are the target addresses of the superfluous branches. (The addresses can easily be changed to the addresses of the opaque conditional statements if desired.)\n\n## Reference \\[[link to paper](https://www.ndss-symposium.org/wp-content/uploads/2020/04/bar2020-23004-paper.pdf)\\]\n\n    @inproceedings{tungheuristic,\n      title={A Heuristic Approach to Detect Opaque Predicates that Disrupt Static Disassembly},\n      author={Tung, Yu-Jye and Harris, Ian G}\n      booktitle={Proceedings of the NDSS Workshop on Binary Analysis Research},\n      year={2020}\n    }\n\n__NOTE__: Google Scholar has the incorrect BibTex but unfortunately I cannot update it directly on Google Scholar\n\n",
    "minimumbinaryninjaversion": 0,
    "name": "Opaque Predicates Detective",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/397f8e9d-c5f7-4073-bb48-2702fae29782/versions/3b3006dc-4cd7-404c-842c-7e5271b353d4/platforms/853/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/397f8e9d-c5f7-4073-bb48-2702fae29782/versions/3b3006dc-4cd7-404c-842c-7e5271b353d4/platforms/853/download?notrack=1",
    "path": "yellowbyte_opaquepredicatesdetective",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-04-10 03:40:13+00:00"
    },
    "projectUrl": "https://github.com/yellowbyte/opaque-predicates-detective",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "jonpalmisc",
    "dependencies": "",
    "description": "Easily capture Binary Ninja screenshots in ultra-high resolution",
    "installinstructions": {},
    "lastUpdated": 1708981964,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2021-2023 Jon Palmisciano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Screenshot Ninja\n\nScreenshot Ninja makes it easy to capture screenshots inside Binary Ninja.\n\n## Features\n\nScreenshot Ninja currently allows you to capture screenshots:\n\n- of the active linear/graph view;\n- of the entire Binary Ninja window; and\n- at custom scaling factors, such as 2x or 3x the native resolution.\n\n## Install\n\nYou can get Screenshot Ninja by:\n\n- installing it through Binary Ninja's plugin manager;\n- cloning this repository into your user plugins folder; or\n- downloading and extracting a release into your user plugins folder.\n\nIf you plan to use the scripting functionality, the latter two options are\nrecommended, as the plugin manager adjusts module names.\n\n## Usage\n\nScreenshot Ninja can be used from the context menu or command palette, as well\nas from the console as a Python module.\n\n### From the user interface\n\nUse the context menu or command palette to find Screenshot Ninja's commands. The\n\"save view image\" command family will save an image of the active linear/graph\nview, while the \"save window image\" command family will save an image of the\nentire Binary Ninja window.\n\n### As a Python module\n\nYou can import Screenshot Ninja in the Python console like this:\n\n``` python\nimport screenshot_ninja\n```\n\nYou can then use the `renderActiveView` and `renderActiveWindow` functions as\nyou wish. Both functions return a `QPixmap`, which you are responsible for\nsaving yourself. Additionally, both functions will throw a `ValueError` if\nsomething goes wrong, so be sure to catch it.\n\n## License\n\nCopyright &copy; 2021-2023 Jon Palmisciano. Licensed under the MIT License. For\nadditional information, see [LICENSE.txt](LICENSE.txt).\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Screenshot Ninja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/eb789a91-55b9-4198-adb5-f06c87fa6c81/versions/435f5a21-65c4-4105-9201-2412a7ab3bd2/platforms/859/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/eb789a91-55b9-4198-adb5-f06c87fa6c81/versions/435f5a21-65c4-4105-9201-2412a7ab3bd2/platforms/859/download?notrack=1",
    "path": "jonpalmisc_screenshot_ninja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-02-26 21:12:44+00:00"
    },
    "projectUrl": "https://github.com/jonpalmisc/screenshot_ninja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "2.1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Terry Chia (Ayrx)",
    "dependencies": "git+https://github.com/androguard/androguard@8d091cbb309c0c50bf239f805cc1e0931b8dcddc\n",
    "description": "Analysis scripts for Binary Ninja to work with Android NDK libraries.",
    "installinstructions": {},
    "lastUpdated": 1648363219,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Terry Chia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# JNIAnalyzer\n\nThis is a Binary Ninja extension contains various scripts that assists in\nanalyzing Android NDK applications.\n\nThis is a port of my [JNIAnalyzer][ghidra-jnianalyzer] Ghidra extension. The\nAPK parsing is done with [Androguard][androguard] instead of JADX.\n\n## Installation\n\n1. Install Androguard by cloning the git repository and running the `setup.py`\nscript. The version of Androguard available on PyPI is currently too old to\nwork.\n2. Install [binja-typemanager][binja-typemanager]\nand [binja-typelibs-collection][binja-typelibs-collection]. Alternatively, make\nthe types from the JNI header available to Binary Ninja in another manner.\n3. Install the plugin the typical Binary Ninja way. `install_linux.sh` does\nthe correct things if you are on Linux.\n\n## Usage\n\n### Import APK\n\nRun the \"JNIAnalyzer - Import APK\" command and select the APK file associated\nwith the native library being analyzed.\n\n### Import trace_registernatives\n\nRun the \"JNIAnalyzer - Import trace_registernatives JSON\" command and select\nthe JSON output from [trace_registernatives][trace_registernatives].\n\n### Analyze current function\n\nRun the \"JNIAnalyzer - Analyze RegisterNatives calls in current function\"\ncommand while in a function that calls `RegisterNatives`.\n\n### Binary Ninja Tags\n\nJNI related functions or data structures detected by this extension will be\ntagged with \"JNIAnalyzer\" using Binary Ninja's Tag API which can be viewed\nusing Binary Ninja's tag browser.\n\n[ghidra-jnianalyzer]: https://github.com/Ayrx/JNIAnalyzer\n[androguard]: https://github.com/androguard/androguard\n[binja-typemanager]: https://github.com/Ayrx/binja-typemanager\n[binja-typelibs-collection]: https://github.com/Ayrx/binja-typelibs-collection\n[trace_registernatives]: https://github.com/Ayrx/trace_registernatives\n",
    "minimumbinaryninjaversion": 3000,
    "name": "JNIAnalyzer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/77cb431b-30de-43d7-9ca8-8185f1947487/versions/e9b78530-0c0a-4a4d-bd89-c529d4c31b5c/platforms/865/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/77cb431b-30de-43d7-9ca8-8185f1947487/versions/e9b78530-0c0a-4a4d-bd89-c529d4c31b5c/platforms/865/download?notrack=1",
    "path": "Ayrx_binjaJNIAnalyzer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-03-27 06:40:19+00:00"
    },
    "projectUrl": "https://github.com/Ayrx/binja-JNIAnalyzer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.3.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Josh Watson / Jordan Wiens",
    "dependencies": "",
    "description": "Callgraph generator for called or calling funcs",
    "installinstructions": {},
    "lastUpdated": 1650475400,
    "license": {
      "name": "MIT",
      "text": "Copyright 2021 Josh Watson / Jordan Wiens\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Callgraph\nAuthor: **Josh Watson / Jordan Wiens**\n\n_Callgraph generator for called or calling funcs_\n\n## Description:\n\nSimple call graph visualizer based on work Josh Watson did on stream in his F-ing Around with Binary Ninja, Episode 2.\n\nOriginal code: https://github.com/joshwatson/f-ing-around-with-binaryninja/blob/master/ep2-callgraph/callgraph.py\n\nStream: https://www.twitch.tv/videos/358093527\n\n![](https://github.com/psifertex/callgraph/blob/main/images/callgraph.png?raw=true)\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n* 1500\n\n## License\n\nThis plugin is released under a [MIT license](./LICENSE).\n",
    "minimumbinaryninjaversion": 3233,
    "name": "Callgraph",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/ecf15358-afe7-46cf-b8cd-3bf1d2b9fc7a/versions/f603e6f6-9240-41a2-9195-ffb9c865a66f/platforms/877/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/ecf15358-afe7-46cf-b8cd-3bf1d2b9fc7a/versions/f603e6f6-9240-41a2-9195-ffb9c865a66f/platforms/877/download?notrack=1",
    "path": "psifertex_callgraph",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-04-20 17:23:20+00:00"
    },
    "projectUrl": "https://github.com/psifertex/callgraph",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "psifertex",
    "dependencies": "",
    "description": "Tags functions using emoji for a number of interesting characteristics",
    "installinstructions": {},
    "lastUpdated": 1615525176,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2021 psifertex\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "# Tag Team\nSample function created on [stream](https://www.youtube.com/watch?v=BEB52ZYr2Gw).\n\n [Tag List](https://raw.githubusercontent.com/psifertex/tagteam/master/images/taglist.png)\n\n ![Tags At Location](https://raw.githubusercontent.com/psifertex/tagteam/master/images/tagsat.png)\n\n",
    "minimumbinaryninjaversion": 1555,
    "name": "Tag Team",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/aefd3b99-ef58-48ea-a1af-d52d6ede9554/versions/1f66f39a-5470-4aad-8a65-1e8eec526cfd/platforms/883/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/aefd3b99-ef58-48ea-a1af-d52d6ede9554/versions/1f66f39a-5470-4aad-8a65-1e8eec526cfd/platforms/883/download?notrack=1",
    "path": "psifertex_tagteam",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-03-12 04:59:36+00:00"
    },
    "projectUrl": "https://github.com/psifertex/tagteam",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Lukas Seidel",
    "dependencies": "",
    "description": "Fuzzing Introspection for use with the JMPscare Toolkit.",
    "installinstructions": {},
    "lastUpdated": 1670422965,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Lukas Seidel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin offers visualization and patching capabilities for the JMPscare analysis tool, finding jumps which are always/never taken over multiple execution traces.",
    "minimumbinaryninjaversion": 3164,
    "name": "JMPscare",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9b027dcc-0492-42c4-bf9d-6bd5dfabf3bb/versions/e9976eed-5d33-409d-9f1b-7e8829f62edc/platforms/889/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9b027dcc-0492-42c4-bf9d-6bd5dfabf3bb/versions/e9976eed-5d33-409d-9f1b-7e8829f62edc/platforms/889/download?notrack=1",
    "path": "fgsect_JMPscarebinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-12-07 14:22:45+00:00"
    },
    "projectUrl": "https://github.com/fgsect/JMPscare-binja",
    "subdir": "",
    "type": [
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Paolo Montesel (https://github.com/thebabush)",
    "dependencies": "future\n",
    "description": "FLIRT for (binary) ninjas",
    "installinstructions": {},
    "lastUpdated": 1590594861,
    "license": {
      "name": "LGPL v3",
      "text": "This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA"
    },
    "longdescription": "# Nampa - FLIRT for (binary) ninjas\n\n*Pure-python implementation of IDA Pro's FLIRT technology. Also Binary Ninja plugin.*\n\n## Description\n\nNampa is a package for reading IDA Pro's `.sig` files.\nIt comes with its own command-line tool for analyzing such files: `dumpsig.py`.\n\nNampa the package is completely decoupled from the Binary Ninja plugin.\n\nNampa the plugin comes with a small library of `.sig` files, automatically\ndownloaded from 3rd-party GitHub repositories when needed.\n\n## Screenshot\n\n![Dialog](./img/dialog.png)\n\n## Installation\n\nFor use as a python library:\n\n```bash\npip install nampa\n```\n\nFor use as a Binary Ninja plugin:\n\n```bash\ncd ~/.binaryninja/plugins/\ngit clone git@github.com:thebabush/nampa.git\ncd nampa\npip install -r requirements.txt # or sudo apt-get install python-future\n```\n\n**NOTE:** apparently, Binary Ninja for Windows ships with its own python distribution so `pip install` accordingly.\n\n## About\n\n[Meaning of Nampa (\u30ca\u30f3\u30d1)](http://jisho.org/search/%E8%BB%9F%E6%B4%BE).\n\n### Limitations\n\nRef functions are not implemented at the moment.\n\n### Thanks\n\n- `radare` people, since this is basically a python port of\n[radare's FLIRT implementation](https://raw.githubusercontent.com/radare/radare2/e8f80a165c7dd89d955a1ee7f432bd9a1ba88976/libr/anal/flirt.c).\n- [trib0r3](https://github.com/trib0r3) for updating the Binary Ninja integration\n\n### License\n\nThe original radare's flirt.c is under LGPL, so my deep knowledge of software licenses tells me that I must keep it\nthat way.\n",
    "minimumbinaryninjaversion": 0,
    "name": "Nampa",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b8c324af-dc35-40b3-9b85-75e9c1fdd5e0/versions/a41b6337-db9c-4c0e-accc-7a5d7993ce06/platforms/967/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b8c324af-dc35-40b3-9b85-75e9c1fdd5e0/versions/a41b6337-db9c-4c0e-accc-7a5d7993ce06/platforms/967/download?notrack=1",
    "path": "thebabush_nampa",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-05-27 15:54:21+00:00"
    },
    "projectUrl": "https://github.com/thebabush/nampa",
    "subdir": "",
    "type": [
      "binaryview",
      "core"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Sam Russell (@samrussell)",
    "dependencies": "",
    "description": "A loader and diassembler for Game Boy ROMs.",
    "installinstructions": {},
    "lastUpdated": 1711609954,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Hugo Porcher\n\nCopyright (c) 2021 Carl Svensson (calle.svensson@zeta-two.com)\n\nCopyright (c) 2024 Sam Russell <sam.h.russell@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Gameboy Binary Ninja plugin\n\n## Description\n\nA Binary Ninja plugin to load Game Boy ROMs and disassemble Game Boy architecture bytecode (Sharp LR35902).\n\nBased on [bnGB](https://github.com/icecr4ck/bnGB) by [Hugo Porcher (icecr4ck)](https://github.com/icecr4ck).\nExtended by [Carl Svensson (ZetaTwo)](https://github.com/ZetaTwo)\n\nFor a list of changes, read the [changelog](CHANGELOG).\n\n### Improvements\n* Added proper IO register symbols\n* Added ISR symbols\n* Fixed some incorrect branching\n* Fixed some incorrect addressing modes\n* Implemented LLIL lifting\n\n### Todo\n* Fix sub_d (stop disas from 0)\n* Handle HALT/RESET/EI/DI opcodes in LLIL\n* Handle BCD (DAA opcode and test the half carry flag)\n* Thorough testing\n\n## Installation\n\nEither install the plugin from the plugin manager or manually clone the repository to your plugin directory.\n\n## Minimum version\n\nThis plugin has been tested on the following versions of Binary Ninja:\n\n* release - 3.5.4526\n\n## References\n\n* [Gameboy Project](https://github.com/ZetaTwo/gameboy-project)\n* [Gameboy Pan Docs](http://bgb.bircd.org/pandocs.htm)\n* [Gameboy opcodes](https://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html)\n* [Gekkio's Game Boy Complete Technical Reference](https://gekkio.fi/files/gb-docs/gbctr.pdf)\n\n## Testing\n\n* [GBDK-2020](https://github.com/gbdk-2020/gbdk-2020)\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n",
    "minimumbinaryninjaversion": 4526,
    "name": "Improved Gameboy Architecture",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/25d6d522-26ff-4412-b68f-09b39a3814fe/versions/c3a9fcfa-7bd0-4a2f-a43e-203955eb5982/platforms/895/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/25d6d522-26ff-4412-b68f-09b39a3814fe/versions/c3a9fcfa-7bd0-4a2f-a43e-203955eb5982/platforms/895/download?notrack=1",
    "path": "samrussell_binjagameboy",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-03-28 07:12:34+00:00"
    },
    "projectUrl": "https://github.com/samrussell/binja-gameboy",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "inspier",
    "dependencies": "rust_demangler==1.0\n",
    "description": "Demangles Rust symbols.",
    "installinstructions": {},
    "lastUpdated": 1688946105,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 inspier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin demangles Rust symbols making them easier to read.\n\n![Image showing plugin](https://raw.githubusercontent.com/inspier/BinjaRustDemangler/master/img/RustDemangleExample.png)",
    "minimumbinaryninjaversion": 0,
    "name": "Rust Demangle",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/0787a57b-1c5b-43b6-8f7b-6e68bf8b8251/versions/de8786ae-cac7-4b26-9afe-61eb2ccd0363/platforms/901/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/0787a57b-1c5b-43b6-8f7b-6e68bf8b8251/versions/de8786ae-cac7-4b26-9afe-61eb2ccd0363/platforms/901/download?notrack=1",
    "path": "inspier_BinjaRustDemangler",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-07-09 23:41:45+00:00"
    },
    "projectUrl": "https://github.com/inspier/BinjaRustDemangler",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1.4"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Linus S. (aka PistonMiner)",
    "dependencies": "protobuf >=3, <5",
    "description": "View BinDiff results and port symbols",
    "installinstructions": {},
    "lastUpdated": 1658871076,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Linus S. (aka PistonMiner)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Plugin to parse diffs generated by <a href='https://www.zynamics.com/software.html'>BinDiff</a> and display them as a table, with an option to port symbols.\n\n![](https://github.com/PistonMiner/binaryninja-bindiff-viewer/blob/master/media/usage_small.gif?raw=true)",
    "minimumbinaryninjaversion": 2487,
    "name": "BD Viewer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e7c58237-363b-4efc-8139-2a179a8db3e9/versions/cf6e4a21-0f51-4915-8113-2c1482a208c1/platforms/907/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e7c58237-363b-4efc-8139-2a179a8db3e9/versions/cf6e4a21-0f51-4915-8113-2c1482a208c1/platforms/907/download?notrack=1",
    "path": "PistonMiner_binaryninjabindiffviewer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-07-26 21:31:16+00:00"
    },
    "projectUrl": "https://github.com/PistonMiner/binaryninja-bindiff-viewer",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jamie Hankins",
    "dependencies": "",
    "description": "De-obfuscates strings inside of obfuscated Go binaries",
    "installinstructions": {},
    "lastUpdated": 1606933842,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 Kryptos Logic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin implements a simple LLIL emulator to statically de-obfuscate simple string obfuscation such as the obfuscations done by [gobfuscate](https://github.com/unixpickle/gobfuscate).\n\nTo activate it, use either the `Tools` menu or the command palette. It offers two modes, the first will attempt to analyze the current function while the other will attempt to find all functions that are merely obfuscated strings and rename them. If the function name cannot be cleanly replaced, a comment will be added at all call locations with the detailed deobfuscated string in addition to the truncated rename.\n\n![](https://github.com/jamie-34254/binja_degobfuscate/blob/master/img/DeGObfuscate.gif?raw=true)",
    "minimumbinaryninjaversion": 1528,
    "name": "DeGObfuscate",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/8e55657e-257e-41d9-ab81-35f9f3e9f9e2/versions/b58ef702-5e58-437e-bb25-45adbba39552/platforms/913/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/8e55657e-257e-41d9-ab81-35f9f3e9f9e2/versions/b58ef702-5e58-437e-bb25-45adbba39552/platforms/913/download?notrack=1",
    "path": "kryptoslogic_binja_degobfuscate",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-12-02 18:30:42+00:00"
    },
    "projectUrl": "https://github.com/kryptoslogic/binja_degobfuscate",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Travis Goodspeed",
    "dependencies": "",
    "description": "This is a client plugin for recovering symbols using the Symgrate2 server.",
    "installinstructions": {},
    "lastUpdated": 1631382597,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Travis Goodspeed\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Symgrate2 is a symbol recovery database with a publicly query-able sever.  This client exposes two modes, one that checks a single function and another that runs through every function of the current project, querying the server and printing the names of matches. ![](https://github.com/travisgoodspeed/symgrate2-binja-plugin/blob/master/images/symgrate2.png?raw=true)",
    "minimumbinaryninjaversion": 1200,
    "name": "Symgrate2 Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c8b54881-161d-4b24-9103-68be43f89131/versions/fd8cec6c-2236-4413-ba41-ace9d2a960af/platforms/919/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c8b54881-161d-4b24-9103-68be43f89131/versions/fd8cec6c-2236-4413-ba41-ace9d2a960af/platforms/919/download?notrack=1",
    "path": "travisgoodspeed_symgrate2binjaplugin",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-09-11 17:49:57+00:00"
    },
    "projectUrl": "https://github.com/travisgoodspeed/symgrate2-binja-plugin",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.4.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Martin Petran",
    "dependencies": "",
    "description": "Assistant plugin for vulnerability research.",
    "installinstructions": {},
    "lastUpdated": 1725710824,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2020 Martin Petran\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "This plugin aims to assist during the vulnerability research process by providing a capability to scan the binary for potential occurrences of known vulnerabilities such as Use-after-free, buffer overflow or format string related issues. Along with the scanner, this plugin also includes a simple highlighter tool which should provide further aid during the follow-up manual analysis of the issues found by teh scanner. \n\n### Highlighter###\n\nThe highlighter part of the plugin can be used after selecting an instruction. This feature allows you to highlight Assembly and HLIL blocks that lead to current block. Another feature also allows you to highlight either HLIL or Assembly variables. This provides ability to trace all points of interest for given variables.\n\n### Scanner###\n\nScanner is using set of rules and function tracker to perform basic analysis to detect any potentially vulnerable function calls. Issues that are found by this component are marked with tags that reflect the priority for a follow-up manual analysis. Following are the priority categories:\n\n* \ud83d\udfe5 High - Detected conditions are likely to lead to vulnerability.\n* \ud83d\udfe7 Medium - Detected conditions could theoretically lead to vulnerability.\n* \ud83d\udfe8 Low - Detected conditions are unlikely to lead to vulnerability.\n* \ud83d\udfe6 Info - Detected conditions were not clear enough to determine if the call is secure or not.\n\n\nExample of discovered issue:\n\n![Sample](https://github.com/Martyx00/VulnFanatic/blob/master/static/sample2.png?raw=true 'Sample')\n\nPlease note that by no means this plugin provides a zero effort way to find vulnerabilities. However, it should assist you in prioritizing specific places in binaries which are worth investigating.\n",
    "minimumbinaryninjaversion": 2263,
    "name": "VulnFanatic",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e67a025b-b888-4b7d-9fc7-bdd78b35cd27/versions/1df1f17c-8d3b-4362-89c9-b7516bf1a1f4/platforms/925/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e67a025b-b888-4b7d-9fc7-bdd78b35cd27/versions/1df1f17c-8d3b-4362-89c9-b7516bf1a1f4/platforms/925/download?notrack=1",
    "path": "Martyx00_VulnFanatic",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-09-07 12:07:04+00:00"
    },
    "projectUrl": "https://github.com/Martyx00/VulnFanatic",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "3.7"
  },
  {
    "api": [
      "python3"
    ],
    "author": "trib0r3",
    "dependencies": "",
    "description": "YARA signatures",
    "installinstructions": {},
    "lastUpdated": 1590501525,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 trib0r3\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# YARA Scan (v1.0)\nAuthor: **trib0r3**\n\n_YARA signatures_\n\n## Description\n\nScan your binary with YARA signatures\n\n\n## Installation Instructions\n\n```bash\npip3 install yara-python\n```\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin:\n\n * pip - yara-python\n\n\n## License\n\nThis plugin is released under a MIT license.",
    "minimumbinaryninjaversion": 2,
    "name": "YARA Scan",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/f35cc649-521e-482d-b90e-60b0c20d57d0/versions/da62ca55-143b-494d-9397-617f6df91a48/platforms/973/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/f35cc649-521e-482d-b90e-60b0c20d57d0/versions/da62ca55-143b-494d-9397-617f6df91a48/platforms/973/download?notrack=1",
    "path": "trib0r3_binjayara",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-05-26 13:58:45+00:00"
    },
    "projectUrl": "https://github.com/trib0r3/binja-yara",
    "subdir": "",
    "type": [
      "binaryview",
      "core"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Shiz",
    "dependencies": "",
    "description": "Analyze dependencies and resolve obfuscated imports",
    "installinstructions": {},
    "lastUpdated": 1590369706,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Shiz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Dependency Analyzer is a Binary Ninja plugin for analyzing module dependencies in a more in-depth fashion and recovering important information such as import names from metadata files.\n\nSupported formats:\n\n* [Microsoft Module Definition (.def)](https://docs.microsoft.com/en-us/cpp/build/reference/module-definition-dot-def-files?view=vs-2019) files\n* IDA's IDT files\n* Anything loadable by Binary Ninja (including databases with renamed functions)\n\nCurrent analyses:\n\n* Resolve imported symbol names\n  - Import-by-ordinal\n  - Import-by-address (e.g. embedded systems)\n  - From renamed functions in a Binary Ninja database (e.g. manually analyzed obfuscated symbol names)\n\nIt will try to find files in `depanalyzer.path` with the same basename of any of the dependencies, and analyze them if they match anything loadable by the plugin.\n\nSymbol matching can done in three ways:\n\n* By name\n* By address (non-relocatable binaries only)\n* By ordinal (PE binaries only)\n\nThe current method is settable through `depanalyzer.matching_method`, globally and per-context.\nBy default, and upon encountering a method that is inapplicable to the current binary, it will try to determine the best method automatically.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Dependency analyzer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/18b5cd28-960d-44d7-b7a8-16fbe0306c7f/versions/a297292c-52d9-419f-8ac5-0bcf4c971b44/platforms/979/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/18b5cd28-960d-44d7-b7a8-16fbe0306c7f/versions/a297292c-52d9-419f-8ac5-0bcf4c971b44/platforms/979/download?notrack=1",
    "path": "shizmob_binjadepanalyzer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-05-25 01:21:46+00:00"
    },
    "projectUrl": "https://github.com/shizmob/binja-depanalyzer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "hugsy",
    "dependencies": "",
    "description": "Interface Binary Ninja with GDB-GEF easily.",
    "installinstructions": {},
    "lastUpdated": 1589817566,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2013-2020 crazy rabbidz\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
    },
    "longdescription": "gef-binja: This script is the server-side of the XML-RPC defined for gef for BinaryNinja. It will spawn a threaded XMLRPC server from your current BN session making it possible for gef to interact with Binary Ninja.",
    "minimumbinaryninjaversion": 1300,
    "name": "GEF-Binja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/746e5066-5893-40fd-82d5-1def6d5eace3/versions/fe7728a3-5795-49ae-98b4-72f78b69093e/platforms/985/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/746e5066-5893-40fd-82d5-1def6d5eace3/versions/fe7728a3-5795-49ae-98b4-72f78b69093e/platforms/985/download?notrack=1",
    "path": "hugsy_gefbinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-05-18 15:59:26+00:00"
    },
    "projectUrl": "https://github.com/hugsy/gef-binja",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Josh Watson",
    "dependencies": "",
    "description": "MSP430 Architecture Plugin for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1643842613,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 Josh Watson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# MSP430 Architecture Plugin (v0.6)\nAuthor: **Josh Watson**\n\n_A disassembler and lifter for the MSP430 architecture._\n\n## Description:\n\nThis plugin disassembles MSP430 assembly code and generates LLIL.\n\nTo install this plugin, navigate to your Binary Ninja plugins directory, and run\n\n```git clone https://github.com/joshwatson/binaryninja-msp430.git msp430```\n\nAlternatively, clone the repo whereever you want, and add a symbolic link in your plugins directory.\n\nAlternatively-Alternatively, use Binary Ninja's [Plugin Manager](https://binary.ninja/2019/07/04/plugin-manager-2.0.html) to install it.\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n * release - 3.0.3233\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n\n\n",
    "minimumbinaryninjaversion": 3233,
    "name": "msp430 Architecture",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/97f79a4d-dce3-4d07-8bc6-afcaa9595b89/versions/55aac0a2-9ce8-4454-a727-36246462909a/platforms/991/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/97f79a4d-dce3-4d07-8bc6-afcaa9595b89/versions/55aac0a2-9ce8-4454-a727-36246462909a/platforms/991/download?notrack=1",
    "path": "joshwatson_binaryninjamsp430",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-02-02 22:56:53+00:00"
    },
    "projectUrl": "https://github.com/joshwatson/binaryninja-msp430",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.6"
  },
  {
    "api": [
      "python3"
    ],
    "author": "apekros and Alex3434",
    "dependencies": "",
    "description": "Generate and find signatures.",
    "installinstructions": {},
    "lastUpdated": 1675034718,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 apekros\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# binja_sigmaker (v2.1)\nAuthor: [Alex3434](https://github.com/Alex3434)\n\nFixed up by **apekros** for Python3 and Plugin Manager 2.0\n\nbinja_sigmaker plugin for Binary Ninja\n\n## Description:\n\nGenerate Signatures to use for pattern scanning in other applications.\n\n- The signature has the same form like the sequence of bytes in IDA (eg. 89 45 FC FF 15 ? ? ? ?)\n- You can create a signature at any point inside a function.  \n- If there is no unique signature at that position, the plugin will create a signature for the beginning of the function.\n\n## Usage:\n\n<img src=\"https://i.gyazo.com/bdd6d7a421d14efc6e6128dc5b797fb4.gif\"/>\n<img src=\"https://i.gyazo.com/24b4ac1e07dcb08e156535744763afb6.gif\"/>\n\n\n## Required Dependencies\n\nThe following dependencies are required for this plugin: None\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n",
    "minimumbinaryninjaversion": 0,
    "name": "binja_sigmaker",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/95644bbd-ab2a-4672-9d9d-29b2bee37165/versions/14c787a0-8326-482b-96bd-922a7b812153/platforms/997/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/95644bbd-ab2a-4672-9d9d-29b2bee37165/versions/14c787a0-8326-482b-96bd-922a7b812153/platforms/997/download?notrack=1",
    "path": "apekros_binja_sigmaker",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-01-29 23:25:18+00:00"
    },
    "projectUrl": "https://github.com/apekros/binja_sigmaker",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "ui"
    ],
    "version": "2.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "jofra",
    "dependencies": "",
    "description": "A plugin that eases fixing jump table branches",
    "installinstructions": {},
    "lastUpdated": 1562441017,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Vasco Franco\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin allows you to easily edit the branches of an indirect jump. This is helpful in situations where binja fails to identify jump tables. To fix this, previously you would have to use the python console, but with this plugin you can do it from a simple UI.\n\nYou can insert the target addresses as a single addr (hex or decimal) (e.g. `0x2000` or `123`) or a comma separated list (e.g. `0x1d80, 0x1dc0, 0x1de0, 0x1df0, 0x1e00`).",
    "minimumbinaryninjaversion": 1689,
    "name": "Jump table branch editor",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/43a3afee-75f0-47ce-810c-2e23970ca100/versions/c6f874e5-9087-4619-a444-abff03b59e8e/platforms/1003/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/43a3afee-75f0-47ce-810c-2e23970ca100/versions/c6f874e5-9087-4619-a444-abff03b59e8e/platforms/1003/download?notrack=1",
    "path": "Vascojofra_jumptablebrancheditor",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-06 19:23:37+00:00"
    },
    "projectUrl": "https://github.com/Vasco-jofra/jump-table-branch-editor",
    "subdir": "",
    "type": [
      "ui",
      "core"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "zznop",
    "dependencies": "",
    "description": "Transfer analysis data between Binary Ninja and IDA",
    "installinstructions": {},
    "lastUpdated": 1707958297,
    "license": {
      "name": "MIT",
      "text": "Copyright 2024 zznop\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bnida\n\n## Description\n\nbnida is a suite of plugins that provide the ability to transfer analysis data between IDA Pro and Binary Ninja\ndatabases.\n\n## Documentation\n\nDocumentation can be found [here](https://zznop.github.io/bnida)\n\n## License\n\nThis project is released under the MIT license.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "bnida",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/19282453-894b-49ee-ae79-164ad6a1a173/versions/7aa3a006-5d70-4315-9d32-dda6cf8dc0d8/platforms/1009/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/19282453-894b-49ee-ae79-164ad6a1a173/versions/7aa3a006-5d70-4315-9d32-dda6cf8dc0d8/platforms/1009/download?notrack=1",
    "path": "zznop_bnida",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-02-15 00:51:37+00:00"
    },
    "projectUrl": "https://github.com/zznop/bnida",
    "subdir": "",
    "type": [
      "sync"
    ],
    "version": "1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "zznop",
    "dependencies": "",
    "description": "SEGA Megadrive/Genesis ROM Hacking Toolkit",
    "installinstructions": {},
    "lastUpdated": 1730730484,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2019 zznop\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-genesis\n\n## Description\n\nSuite of Binary Ninja plugins that assist with SEGA Genesis ROM hacking\n* Load SEGA Genesis/Megadrive ROM's\n* Write m68k assembly and quickly apply a patch at a specified offset\n* Fixup ROM checksums\n* Enumerate call tables (deprecated)\n    * Vector35 addressed issues with its core and now tables are recognized by auto-analysis \n\n![demo bn-genesis](screencap.gif)\n\n## Dependencies\n\n* Assembler plugin requires `gcc-m68k-linux-gnu` (Ubuntu or Debian)\n* Loader requires the third party m68k processor module, which can be found [here](https://github.com/wrigjl/binaryninja-m68k)\n",
    "minimumbinaryninjaversion": 1200,
    "name": "genesis",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/5eff3519-309c-405c-bfbc-97e596ee194f/versions/7d03c9da-8fe0-420d-ae45-e6a4a0741749/platforms/1015/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/5eff3519-309c-405c-bfbc-97e596ee194f/versions/7d03c9da-8fe0-420d-ae45-e6a4a0741749/platforms/1015/download?notrack=1",
    "path": "zznop_bngenesis",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-11-04 14:28:04+00:00"
    },
    "projectUrl": "https://github.com/zznop/bn-genesis",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Brandon Miller",
    "dependencies": "",
    "description": "Parses output from /proc/kallsyms and applies symbols to the corresponding kernel BN database",
    "installinstructions": {},
    "lastUpdated": 1643512677,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 Brandon Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-kallsyms ![Python Lint](https://github.com/zznop/bn-kallsyms/workflows/pylint/badge.svg)\n\n## Description:\n\nBinary Ninja plugin for importing symbols to a kernel binary from /proc/kallsyms\n\n**Before loading kernel symbols:**\n\n![Before kallsyms import](screens/before.png \"Before:\")\n\n**After loading kernel symbols:**\n\n![After kallsyms import](screens/after.png \"After:\")\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n\n## Generating a kernel symbols file\n\nTo generate a kernel symbols file run the following command:\n```\nsudo sh -c \"echo 0  > /proc/sys/kernel/kptr_restrict\" && sudo cat /proc/kallsyms > kallsyms.txt\n```\n\n## Importing the kernel symbols\n\nTo use this plugin, ensure the kernel binary is decompressed. If it is a bzImage kernel, use binwalk:\n\n```\n$ binwalk -e vmlinuz-4.13.0-43-generic\n...\n$ file ~/_vmlinuz-4.13.0-43-generic.extracted/47B4\n/home/joe/_vmlinuz-4.13.0-43-generic.extracted/47B4: elf 64-bit lsb executable, x86-64, version 1 (sysv), statically linked, buildid[sha1]=3e0dc1c8b93e2f3f522a596cfc4b482065469041, stripped\n```\n\nLoad the kernel binary into Binary Ninja. Then, click `tools->\"kallsyms: apply kernel symbols\"`. You will be\nprompted to select the kernel symbols file. Select it, and click \"open\". the plugin will proceed to parse\nthe kernel symbol file, create functions, and import symbols into the database.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "kallsyms",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e2e40ec2-9594-4a18-969f-93c72d5a3acc/versions/3ab1ea0c-1042-42c8-ae8e-f9f8bbfa42e1/platforms/1021/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e2e40ec2-9594-4a18-969f-93c72d5a3acc/versions/3ab1ea0c-1042-42c8-ae8e-f9f8bbfa42e1/platforms/1021/download?notrack=1",
    "path": "zznop_bnkallsyms",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-01-30 03:17:57+00:00"
    },
    "projectUrl": "https://github.com/zznop/bn-kallsyms",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "zznop",
    "dependencies": "",
    "description": "Locate and annotate direct and indirect recursion",
    "installinstructions": {},
    "lastUpdated": 1595432685,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 zznop\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bn-recursion\nAuthor: **zznop**\n\n_Binary Ninja plugin for locating direct and indirect recursive logic_\n\n## Description:\n\nbn-recursion is an architecture-agnostic plugin for locating direct and indirect recursion using BNIL\n\n## Minimum Version\n\nThis plugin requires the following minimum version of Binary Ninja:\n\n * release - 1.1.1142\n * dev - 1.1.1228-dev\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "recursion",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c904fb0f-5da1-4df8-9f94-71a4166736ed/versions/f5d03ba6-41e8-48d7-b68e-497153038c40/platforms/1027/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c904fb0f-5da1-4df8-9f94-71a4166736ed/versions/f5d03ba6-41e8-48d7-b68e-497153038c40/platforms/1027/download?notrack=1",
    "path": "zznop_bnrecursion",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-07-22 15:44:45+00:00"
    },
    "projectUrl": "https://github.com/zznop/bn-recursion",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "B.Kerler with code from John Levy and @carstein",
    "dependencies": "",
    "description": "A plugin that annotates function arguments.",
    "installinstructions": {},
    "lastUpdated": 1562648191,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2018-2019 B. Kerler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Upon encountering a function call this plugins uses virtual stack to annotate previous instructions with comments annotating the parameters.",
    "minimumbinaryninjaversion": 1200,
    "name": "Annotate Functions",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/fbc5caa4-4476-4ec2-b783-b43c7722ab81/versions/bb8c9b70-767e-4890-b43d-21cc4cd17bb8/platforms/1033/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/fbc5caa4-4476-4ec2-b783-b43c7722ab81/versions/bb8c9b70-767e-4890-b43d-21cc4cd17bb8/platforms/1033/download?notrack=1",
    "path": "bkerler_annotate",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-09 04:56:31+00:00"
    },
    "projectUrl": "https://github.com/bkerler/annotate",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "verylazyguy",
    "dependencies": "",
    "description": "A disassembler and lifter for the VMNDH-2k12 architecture.",
    "installinstructions": {},
    "lastUpdated": 1562776057,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2016 verylazyguy.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin disassembles VMNDH assembly code and generates LLIL.\n\nTo install this plugin, navigate to your Binary Ninja plugins directory, and run\n\n```git clone https://github.com/verylazyguy/binaryninja-vmndh.git vmndh```",
    "minimumbinaryninjaversion": 0,
    "name": "VMNDH-2k12 Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9ab2c429-432b-41b9-b8ff-5e77fba1bdbb/versions/70152309-b071-4b82-826c-dd26312e4833/platforms/1039/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9ab2c429-432b-41b9-b8ff-5e77fba1bdbb/versions/70152309-b071-4b82-826c-dd26312e4833/platforms/1039/download?notrack=1",
    "path": "verylazyguy_binaryninjavmndh",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-10 16:27:37+00:00"
    },
    "projectUrl": "https://github.com/verylazyguy/binaryninja-vmndh",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.2"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Brick",
    "dependencies": "",
    "description": "Parses MSVC structures to improve analysis",
    "installinstructions": {},
    "lastUpdated": 1562929904,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Brick\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# MSVC\nAuthor: **Brick**\n_Parses MSVC structures to improve analysis_\n\n## Description:\nParses MSVC structures such as RTTI and Unwind Info to improve analysis\n",
    "minimumbinaryninjaversion": 1689,
    "name": "MSVC",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/3b999573-d540-4527-8313-650dcab3974a/versions/2b75be48-3024-4e83-bae7-1224e8475909/platforms/1045/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/3b999573-d540-4527-8313-650dcab3974a/versions/2b75be48-3024-4e83-bae7-1224e8475909/platforms/1045/download?notrack=1",
    "path": "0x1F9F1_binjamsvc",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-12 11:11:44+00:00"
    },
    "projectUrl": "https://github.com/0x1F9F1/binja-msvc",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Ryan Stortz (@withzombies)",
    "dependencies": "",
    "description": "A plugin to graph BNIL instruction trees",
    "installinstructions": {},
    "lastUpdated": 1689779176,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2019 Ryan Stortz (@withzombies)\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "# BNIL Instruction Graph\r\nA BinaryNinja plugin to graph a BNIL instruction tree and meta-program python instruction matchers.\r\n\r\n## Installation\r\n\r\nInstallation is supported two ways, the first using the new plugin manager and the second being a manual install.\r\n\r\n### Plugin Manager\r\nUse the new plugin manager by selecting \"Manage Plugins\" from the \"Edit\" menu. Search the plugin list for \"BNIL Instruction Graph\", right click on it and click \"Install\" then right click again and select \"Enable\".\r\n\r\n## Manual Installation\r\n1. Clone the repository to your prefered location: `$ git clone https://github.com/withzombies/bnil-graph.git`\r\n1. Change to the Binary Ninja plugins directory: `$ cd ~/Library/Application\\ Support/Binary\\ Ninja/plugins`\r\n1. Create a symlink to the folder: `$ ln -s ~/git/bnil-graph .`\r\n1. Restart Binary Ninja\r\n\r\n## Usage\r\n\r\nTo use bnil-graph, right click on an instruction and select \"BNIL Instruction Graph\". This graphs the BNIL instructions assocaited with that address and displays them as an HTML form.\r\n\r\nBinary Ninja adds operand accessors dynamically, due to this the convenient accesors do not show up in `dir()` calls or in the api documentation. bnil-graph shows the structure of the IL instruction including its nice accessor names (such as `insn.src` for the source register or memory)\r\n\r\n![Menu Example](https://raw.githubusercontent.com/withzombies/bnil-graph/master/images/menu.png)\r\n\r\nExample graph:\r\n\r\n![Example Graph](https://raw.githubusercontent.com/withzombies/bnil-graph/master/images/graph.png)\r\n\r\n### Matchers\r\n\r\nIn addition to the graph plugin, bnil-graph also will generate a matcher function that will match the selected instructions exactly. This feature will allow new plugin developers to quickly match instructions. The intended use is to find an instruction similar to the one you want to match, generate a matcher function, then modify the generated function to better support your needs.\r\n\r\nAn example would be trying to find all MediumLevelILSSA MLIL\\_CALL\\_SSA instructions that take 3 parameters. I generated a matcher against an unrelated function with 0 parameters:\r\n\r\n```python\r\ndef match_MediumLevelILSSA_140001194_0(insn):\r\n    # mem#1 = 0x14000d49c() @ mem#0\r\n    if insn.operation != MediumLevelILOperation.MLIL_CALL_SSA:\r\n        return False\r\n\r\n    # invalid\r\n    if insn.output.operation != MediumLevelILOperation.MLIL_CALL_OUTPUT_SSA:\r\n        return False\r\n\r\n    if insn.output.dest_memory != 0x1:\r\n        return False\r\n\r\n    if len(insn.output.dest) != 0:\r\n        return False\r\n\r\n    # 0x14000d49c\r\n    if insn.dest.operation != MediumLevelILOperation.MLIL_CONST_PTR:\r\n        return False\r\n\r\n    if insn.dest.constant != 0x14000d49c:\r\n        return False\r\n\r\n    if len(insn.params) != 0:\r\n        return False\r\n\r\n    if insn.src_memory != 0x0:\r\n        return False\r\n\r\n    return True\r\n```\r\n\r\nWe can modify this to remove some specific constraints:\r\n\r\n```python\r\ndef match_MediumLevelILSSA_140001194_0(insn):\r\n    # mem#1 = 0x14000d49c() @ mem#0\r\n    if insn.operation != MediumLevelILOperation.MLIL_CALL_SSA:\r\n        return False\r\n\r\n    # invalid\r\n    if insn.output.operation != MediumLevelILOperation.MLIL_CALL_OUTPUT_SSA:\r\n        return False\r\n\r\n    # 0x14000d49c\r\n    if insn.dest.operation != MediumLevelILOperation.MLIL_CONST_PTR:\r\n        return False\r\n\r\n    if len(insn.params) != 0:\r\n        return False\r\n\r\n    return True\r\n```\r\n\r\nWe removed the call destination and the memory versioning constraints. Next, update the params check to check for 3 parameters:\r\n\r\n```python\r\ndef match_3_param_MLIL_CALL_SSA(insn):\r\n    if insn.operation != MediumLevelILOperation.MLIL_CALL_SSA:\r\n        return False\r\n\r\n    if insn.output.operation != MediumLevelILOperation.MLIL_CALL_OUTPUT_SSA:\r\n        return False\r\n\r\n    if insn.dest.operation != MediumLevelILOperation.MLIL_CONST_PTR:\r\n        return False\r\n\r\n    if len(insn.params) != 3:\r\n        return False\r\n\r\n    return True\r\n```\r\n\r\nNow, we have a matcher which will identify MLIL\\_CALL\\_SSA instructions with 3 parameters! Now iterate over MLIL SSA instructions and call the matcher and we're done:\r\n\r\n```python\r\nif __name__ == '__main__':\r\n    bv = binaryninja.BinaryViewType.get_view_of_file(sys.argv[1])\r\n    bv.update_analysis_and_wait()\r\n\r\n    for func in bv.functions:\r\n        mlil = func.medium_level_il\r\n\r\n        for block in mlil.ssa_form:\r\n            for insn in block:\r\n                if match_3_param_MLIL_CALL_SSA(insn):\r\n                    print \"Match: {}\".format(insn)\r\n```\r\n\r\nExample matcher:\r\n\r\n![Example Matcher](https://raw.githubusercontent.com/withzombies/bnil-graph/master/images/matcher.png)\r\n\r\n\r\n## License\r\n\r\nThis project copyright Ryan Stortz (@withzombies) and is available under the Apache 2.0 LICENSE.\r\n",
    "minimumbinaryninjaversion": 2096,
    "name": "BNIL Instruction Graph",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4db3c6f4-a74e-41bb-81c0-92f1cc360510/versions/a38c2abc-be1b-42e3-bb9e-837d37cdbfc2/platforms/1051/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4db3c6f4-a74e-41bb-81c0-92f1cc360510/versions/a38c2abc-be1b-42e3-bb9e-837d37cdbfc2/platforms/1051/download?notrack=1",
    "path": "withzombies_bnilgraph",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-07-19 15:06:16+00:00"
    },
    "projectUrl": "https://github.com/withzombies/bnil-graph",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.4.2"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "mechanicalnull",
    "dependencies": "",
    "description": "Synchronized source code pane for debug binaries",
    "installinstructions": {},
    "lastUpdated": 1563159566,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 mechanicalnull\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "`Sourcery Pane` uses the magic of debug builds and having access to source code to translate the current location in disassembly into a synchronized view of source code.  The only dependency is `addr2line`, which is what is used to do the translation between offsets and source lines.  Also features local translation paths for binaries built on other systems and a sync pause/resume button.",
    "minimumbinaryninjaversion": 1689,
    "name": "Sourcery Pane",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/1b70d03a-68c7-43f8-8be0-e0bdca326147/versions/620f11f7-a9d1-4d7d-86be-7cd3e886139d/platforms/1057/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/1b70d03a-68c7-43f8-8be0-e0bdca326147/versions/620f11f7-a9d1-4d7d-86be-7cd3e886139d/platforms/1057/download?notrack=1",
    "path": "mechanicalnull_sourcery_pane",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-15 02:59:26+00:00"
    },
    "projectUrl": "https://github.com/mechanicalnull/sourcery_pane",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Chame1eon",
    "dependencies": "",
    "description": "A plugin to integrate the Frida dynamic instrumentation toolkit into Binary Ninja.",
    "installinstructions": {},
    "lastUpdated": 1591033894,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2017 Chame1eon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin makes use of the Frida dynamic instrumentation framework to simplify dynamic analysis within Binary Ninja. The plugin uses function definitions and type information, either identified by Binary Ninja or user inputted, to define Frida native functions automatically. To intercept a function, all a user needs to do is select the intercept button from the option menu. Once a function is being intercepted, whenever that function is called, by default, the arguments and return value will be logged to the Binary Ninja log. The behaviour of the Frida hooks can also be modified by a user. A demonstration video of the plugin in use in the following video:\n\n[Binary Ninja - Frida Plugin](http://sendvid.com/vw7froy5)\n\n\n### Use Guide\n\n#### Start Plugin\n\nAfter installing the plugin, from either the tools menu or by right clicking on the binary view window, you can select the option \"Frida: Start Plugin\". Selecting this option will bring up a window asking you to select the device you want the plugin to use, any device supported by Frida should also be supported by this plugin. For example, Android and iOS devices should also appear listed here if they are plugged in via USB.\n\n#### Attach to Process\n\nOnce you have the process you want to analyse running, you can select the option \"Frida: Attach to Process\". Choosing this option will provide you with a list of currently running processes on the system you are targeting. Selecting one of those processes will trigger the plugin to use Frida to attach to that process.\n\n#### Select Module (Optional)\n\nBy default, this plugin will use the name of the binary you are analysing to select the target module. For example, if you currently have libssl.so loaded into Binary Ninja, then the plugin will look for that module in the process address. However, if the binary name cannot be found in the process' address space, then the module must be selected manually by running the \"Frida: Select Target Module\" menu option.\n\n#### Intercept Function\n\nNow that the plugin is running, you can start intercepting functions within the binary. To intercept a function all you need to do is right click within that function and select \"Frida: Intercept Function\". Providing there were no errors, that function will now be intercepted by Frida and any time that function is called a log message will be printed with the argument values and return value.\n\n#### Modify Intercept\n\nTo change the default behaviour for an intercepted function, you can use the option \"Frida: Modify Intercept\". Opening this window opens two Multiline input fields. Inside those fields you can enter JavaScript to be executed before and after the function has been run. Above each of the fields is a label to show what the existing hook looks like.\n\n#### Remove Intercept\n\nUsing \"Frida: Remove Intercept\" will safely remove the intercept from the Frida agent.\n\n#### Frida: Reload\n\nWhen modifying function information in Binary Ninja, such as parameter types, there is currently no way to be notified of these events. Therefore, to update the Frida intercepts, in these cases, you will need to manually call \"Frida: Reload\".\n\n#### Frida: Stop Plugin\n\nSafely removes all the hooks from the attached process, before disconnecting from the process.\n\n\n### Future:\n* Allow instruction level interception\n* Add support for using the Frida Stalker\n* Support process patching using Frida\n* Frida Spawn\n\n### Warnings:\n* The Binary Ninja interaction API is, currently, does not support injecting text into a Multiline Field. As a result, hook modification requires a user to retype what they had previously.",
    "minimumbinaryninjaversion": 576,
    "name": "Frida",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c04048b7-d34a-4a5e-8bd5-593f7450b691/versions/e8616dbb-ebe8-4246-845c-91d0e5c35dff/platforms/1063/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c04048b7-d34a-4a5e-8bd5-593f7450b691/versions/e8616dbb-ebe8-4246-845c-91d0e5c35dff/platforms/1063/download?notrack=1",
    "path": "chame1eon_binaryninjafrida",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-06-01 17:51:34+00:00"
    },
    "projectUrl": "https://github.com/chame1eon/binaryninja-frida",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.3.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "jofra",
    "dependencies": "",
    "description": "Finds format string vulnerabilities",
    "installinstructions": {},
    "lastUpdated": 1563202677,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 jofra\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin will detect format string vulnerabilities and 'format string like' functions.\n\n## Example\n![](https://raw.githubusercontent.com/Vasco-jofra/format-string-finder-binja/master/images/example.gif)\n\n## How it work\n 1. Loads [known functions](https://raw.githubusercontent.com/Vasco-jofra/format-string-finder-binja/master/src/data/default_printf_like_functions.data) that receive a format parameter.\n 2. For each xref of these functions find where the fmt parameter comes from:\n    1. If it comes from an **argument** we mark it as a **'format string like'** function and test its xrefs\n    2. If it is a **constant** value located in a **read-only** area we mark it as **safe**\n    3. If it comes from a known **'safe' function call result** (functions from the `dgettext` family) we mark it as **safe**\n    4. Otherwise we mark it as **vulnerable**\n 3. Prints a markdown report\n\n## Settings\n - `format_string_finder.should_highlight_variable_trace`:\n   - Highlight instructions that are used in the trace of the format parameter origin.\n - `format_string_finder.should_enable_tests_plugin`\n   - Enable the tests plugin. Only for development.",
    "minimumbinaryninjaversion": 1689,
    "name": "Format String Finder",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/fa5ddafb-168c-4cf8-bbf0-2b9f581431b5/versions/a27d0404-644f-40c6-ae77-a2e075b355d6/platforms/1069/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/fa5ddafb-168c-4cf8-bbf0-2b9f581431b5/versions/a27d0404-644f-40c6-ae77-a2e075b355d6/platforms/1069/download?notrack=1",
    "path": "Vascojofra_formatstringfinderbinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-15 14:57:57+00:00"
    },
    "projectUrl": "https://github.com/Vasco-jofra/format-string-finder-binja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "shareef12",
    "dependencies": "",
    "description": "Find IRP dispatch routines and valid IOCTLs in a Windows kernel driver",
    "installinstructions": {},
    "lastUpdated": 1565226626,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2019 shareef12.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin will try to find and label IRP dispatch routines initialized in the\nDriverEntry routine. Additionally, this plugin will attempt to identify valid\nIOCTL control codes that the driver supports. Handler code for detected IOCTLs\nwill be labeled, and CTL\\_CODE macros will be generated.",
    "minimumbinaryninjaversion": 1689,
    "name": "Windows Driver Analyzer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/21e6e7fe-f3bc-4cfd-98bd-b21e80e0ffaf/versions/fd51b573-85f1-4abf-972e-94ca427ccfd5/platforms/1075/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/21e6e7fe-f3bc-4cfd-98bd-b21e80e0ffaf/versions/fd51b573-85f1-4abf-972e-94ca427ccfd5/platforms/1075/download?notrack=1",
    "path": "shareef12_driveranalyzer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-08-08 01:10:26+00:00"
    },
    "projectUrl": "https://github.com/shareef12/driveranalyzer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Michal Melewski",
    "dependencies": "",
    "description": "Decorate encountered syscalls with details like name and arguments",
    "installinstructions": {},
    "lastUpdated": 1563231878,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Michal Melewski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "BinaryNinja Syscall annotator\n====================\nThis is a plugin for Binary Ninja Reversing Platform.\nUpon encountering a syscall it gets annotated with retrieved arguments.\n",
    "minimumbinaryninjaversion": 776,
    "name": "Syscaller",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/dc2c09e5-04e2-4061-b04a-4c03144157b7/versions/ac8a26dc-3fe3-4f42-bfff-f8bc6d56e2d8/platforms/1081/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/dc2c09e5-04e2-4061-b04a-4c03144157b7/versions/ac8a26dc-3fe3-4f42-bfff-f8bc6d56e2d8/platforms/1081/download?notrack=1",
    "path": "carstein_Syscaller",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-07-15 23:04:38+00:00"
    },
    "projectUrl": "https://github.com/carstein/Syscaller",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "404'd",
    "dependencies": "",
    "description": "Binary Ninja plugin providing various niche utilities for working with PE binaries",
    "installinstructions": {},
    "lastUpdated": 1607802699,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2017-2019 Simen Lybekk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja PE Utils\nBunch'a niche utilities for working with PE-based binaries.\n\n## Features\n\n### Resolve ordinal imports\nOrdinal imports can be resolved to symbol names from external BNDBs.\nIf you rename an exported function in the external BNDB, the name you\ndefined will be used instead of the original export name.\n\nGiven an example import as shown below:\n\n![Import table with unresolved ordinals](https://raw.githubusercontent.com/404d/peutils/master/screens/table_not_loaded.png)\n\n![IAT with unresolved ordinals](https://raw.githubusercontent.com/404d/peutils/master/screens/iat_unsynced.png)\n\nBy loading a binary view for `OLEAUT32.dll`, we can update the import\nnames for the target binary view with the real name behind the import:\n\n![Import table with resolved ordinals](https://raw.githubusercontent.com/404d/peutils/master/screens/table_loaded.png)\n\n![IAT with resolved ordinals](https://raw.githubusercontent.com/404d/peutils/master/screens/iat_synced.png)\n\n\n### Synchronize symbol names and types across binaries\nTypes defined in external BNDBs can be transferred to the current binary\nview in order to aid with reversing.\n\nContinuing from the above example, we can rename the arg of the function\n`SysStringLen` from the external BNDB `OLEAUT32.dll`:\n\n![Function with renamed argument](https://raw.githubusercontent.com/404d/peutils/master/screens/func_renamed_arg.png)\n\nWhen synced, the IAT will be updated with the new argument:\n\n![IAT with renamed argument](screens/iat_renamed.png)\n\nWe can also see that the new argument is exposed through other\ndisassembly views, like MLIL:\n\n![MLIL call with renamed argument](https://raw.githubusercontent.com/404d/peutils/master/screens/mlil_renamed_arg.png)\n\nAs mentioned earlier, symbol names also get transferred between loaded BNDBs.\nRenaming the export from the external BNDB then resyncing, we can see that the\nchanges is transferred to the target binary view:\n\n![Function with renamed symbol](https://raw.githubusercontent.com/404d/peutils/master/screens/func_renamed_sym.png)\n\n![MLIL call with renamed symbol](https://raw.githubusercontent.com/404d/peutils/master/screens/mlil_renamed_sym.png)\n",
    "minimumbinaryninjaversion": 2576,
    "name": "peutils",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/f910d65b-619e-4da8-9f14-e54856b5f421/versions/f7169867-fa7e-4ad3-a96a-1fe35e03f47f/platforms/1087/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/f910d65b-619e-4da8-9f14-e54856b5f421/versions/f7169867-fa7e-4ad3-a96a-1fe35e03f47f/platforms/1087/download?notrack=1",
    "path": "404d_peutils",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-12-12 19:51:39+00:00"
    },
    "projectUrl": "https://github.com/404d/peutils",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "404'd",
    "dependencies": "",
    "description": "Various auto analysis utilities",
    "installinstructions": {},
    "lastUpdated": 1607801316,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Simen Lybekk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Binary Ninja Auto Utils\nAuto Utils provides various helpers for automatically discovering features about a binary.\n\nSome examples:\n\n * Renaming of methods based on logging with method names\n * That's it right now, sorry\n\n## Examples\n\n### Automatic symbol name discovery based on call args\nIn cases where you for example have a common logging function that will log the\ncaller's name using an argument passed to it, the plugin will be able to rename\nthe names of all callers based on the strings left in the binary.\n\nGiven an example binary with methods as shown below:\n\n![Subroutines without clear or meaningful names](https://raw.githubusercontent.com/404d/autoutils/master/extras/discover_arg_before.png)\n\nBy running the \"Analysis \u2192 Discover caller names by call parameters\" action\nwhile being inside the `log_msg` subroutine and providing it with the parameter\nname `arg1`, the plugin will change the name of all callers to `log_msg` as such:\n\n![Subroutines after call-argument name discovery](https://raw.githubusercontent.com/404d/autoutils/master/extras/discover_arg_after.png)\n",
    "minimumbinaryninjaversion": 2096,
    "name": "Auto Utils",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7c9201b8-80e3-486b-a4b5-17753c55d2dc/versions/6d9d161b-fa70-4bdd-92a9-79331dbb97fb/platforms/1093/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7c9201b8-80e3-486b-a4b5-17753c55d2dc/versions/6d9d161b-fa70-4bdd-92a9-79331dbb97fb/platforms/1093/download?notrack=1",
    "path": "404d_autoutils",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-12-12 19:28:36+00:00"
    },
    "projectUrl": "https://github.com/404d/autoutils",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.3"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Mark Griffin",
    "dependencies": "msgpack\n",
    "description": "Scriptable code coverage analysis and visualization plugin",
    "installinstructions": {},
    "lastUpdated": 1676487002,
    "license": {
      "name": "MIT",
      "text": "Copyright 2023 ForAllSecure, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# bncov - Scriptable Binary Ninja plugin for coverage analysis and visualization\n\nbncov provides a scriptable interface for bringing together coverage\ninformation with Binary Ninja's static analysis and visualization. Beyond\nvisualization, the abstractions in bncov allow for programmatic reasoning\nabout coverage. It was designed for interactive GUI use as well as for\nfactoring into larger analysis tasks and standalone scripts.\n\n![Demo Overview](https://github.com/ForAllSecure/bncov/raw/master/pictures/bncov_demo.png)\n\nThis plugin is provided as a way to give back to the community,\nand is not part of the Mayhem product.  If you're interested in Mayhem, the\ncombined symbolic execution and fuzzing system, check us out at\n[forallsecure.com](http://forallsecure.com).\n\n## CHANGELOG\nFeb 2023: drcov format version 3 now supported.\nOct 2021: Some changes in the API:\n\n- Added a `ctx` object that is keyed off the Binary View and helpers\n  `bncov.get_ctx` and `bncov.get_covdb` to support multibinary use case in the\n  UI, so now you can interactively use bncov across tabs!\n- Changed old helpers `bncov.get_bv`/`bncov.get_covdb` to\n  `bncov.make_bv`/`bncov.make_covdb` for making a Binary View from a target file\n  and covdb from a binary and a coverage directory, respectively\n- All function-related covdb member functions now default to keying off of\n  function start addresses rather than names since function starts are unique\n  and more usable for many applications. Extra optional args or helper functions\n  implement the existing behavior.\n- Abandoning Python2 suport\n- Added `download_dynamorio.py` for the sloths\n- Minor quality-of-life fixes\n\n## Installation\n\nThe easiest way is to install via the Binary Ninja plugin manager!\nThe only difference when installing via plugin manager is that wherever\nyou see `import bncov`, you may have to do `import ForAllSecure_bncov as bncov`.\n\nAlternatively:\n\n - Clone or copy this directory into your binja plugins folder.\n([More detailed instructions here](https://docs.binary.ninja/guide/plugins/index.html#using-plugins))\n - (Optional) pip install msgpack if you want to enable loading/saving\ncoverage database files.\n\n## Usage\n\nCheck out the [tutorial](/tutorial/) for a complete walkthrough or how to get\nstarted right away using data that's already included in this repo!\n\nFirst collect coverage information in DynamoRIO's drcov format\n([example script](/dr_block_coverage.py)).\n\nTo use in Binary Ninja GUI:\n\n1. Open the target binary, then import coverage files using one of\nthe commands in `bncov/Coverage Data/Import *`\neither from the Tools menu or from the context (right-click) menu.\n2. Explore the coverage visualization and explore additional analyses from\nthe right-click menu or with the built-in interpreter and `import bncov`\nfollowed by `covdb = bncov.get_covdb(bv)`.\n\nScripting:\n\n1. Ensure bncov's parent directory is in your module search path\nOR add it to sys.path at the top of your script like this:\n`sys.path.append(os.path.split(os.path.normpath('/path/to/bncov'))[0])`\n2. `import bncov` and write scripts with the CoverageDB class in\n`coverage.py`, check out the `scripts` folder for examples.\n\n## Screenshots\n\nImport a coverage directory containing trace files to see blocks colored in\nheat map fashion: blocks covered by most traces (blue) or by few traces\n(red). Additional context commands (right-click menu) include frontier\nhighlighting and a per-function block coverage report.\n\n* Watch a directory to have new coverage results get automatically highlighted\nwhen new coverage files appear\n* See at a glance which blocks are only covered by one or a few traces\n(redder=rarer, bluer=more common)\n* Quickly discover rare functionality visually or with scripting\n* Identify which blocks have outgoing edges not covered in the traces\n* See coverage reports on functions of interest or what functionality may not\nbe hit, or write your own analyses for headless scripting.\n\n![Block Coverage Report](https://github.com/ForAllSecure/bncov/raw/master/pictures/Coverage-Report.png)\n\n## Notes\n\nCurrently the plugin only deals with block coverage and ingests files in the\ndrcov format or module+offset format. Included in the repo is\n`dr_block_coverage.py` which can be used for generating coverage files, just\nspecify your DynamoRIO install location with an environment variable (or\nmodify the script) and it can process a directory of inputs. DynamoRIO binary\npackages can be found\n[here](https://github.com/DynamoRIO/dynamorio/wiki/Downloads) or you can use the\nincluded `download_dynamorio.py` script. See the\n[tutorial](/tutorial/) for a complete walkthrough.\n\nPlease file any feature requests/bugs as issues on GitHub, we welcome any input\nor feedback.\n\n## Scripting\n\nbncov was designed so users can interact directly with the data structures\nthe plugin uses. See the `scripts/` directory for more ideas.\n\n* Helpful CoverageDB members:\n    * trace_dict (maps filenames to set of basic block start addresses)\n    * block_dict (maps basic block start addresses to files containing it)\n    * total_coverage (set of start addresses of the basic blocks covered)\n\n* Helpful CoverageDB functions:\n    * get_traces_from_block(addr) - get files that cover the basic block\n      starting at addr.\n    * get_rare_blocks(threshold) - get blocks covered by <= 'threshold' traces\n    * get_frontier() - get blocks that have outgoing edges that aren't covered\n    * get_functions_from_blocks(blocks, by_name=False) - return dict mapping\n      function starts/names to blocks they contain\n    * get_traces_from_function(function_start) - return set of traces that have\n      coverage in the specified function\n    * get_traces_from_function_name(function_name, demangle=False) - return set\n      of traces that have coverage in the specified function\n\n* You can use Binary Ninja's python console and built-in python set operations with\nbncov.highlight_set() to do custom highlights in the Binary Ninja UI.\n",
    "minimumbinaryninjaversion": 1470,
    "name": "bncov",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a3061a9a-314d-4923-b796-9c47c628f107/versions/363f3cf2-b8e5-4203-b8b1-6869fadf89c3/platforms/1099/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a3061a9a-314d-4923-b796-9c47c628f107/versions/363f3cf2-b8e5-4203-b8b1-6869fadf89c3/platforms/1099/download?notrack=1",
    "path": "ForAllSecure_bncov",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-02-15 18:50:02+00:00"
    },
    "projectUrl": "https://github.com/ForAllSecure/bncov",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.4.2"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "whitequark",
    "dependencies": "",
    "description": "A plugin that adds a GUI for changing function ABI.",
    "installinstructions": {},
    "lastUpdated": 1574389072,
    "license": {
      "name": "BSD-0-clause",
      "text": "Copyright (C) 2018 by whitequark\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "This plugin provides a GUI for adjusting the ABI in a fine-grained way. Calling convention and clobbered registers can be adjusted.",
    "minimumbinaryninjaversion": 555,
    "name": "Function ABI",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/14086134-008b-43bc-9d94-1bd215508ef2/versions/d5a1056e-4050-4158-ba88-610b6db13b89/platforms/1105/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/14086134-008b-43bc-9d94-1bd215508ef2/versions/d5a1056e-4050-4158-ba88-610b6db13b89/platforms/1105/download?notrack=1",
    "path": "whitequark_binja_function_abi",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-11-22 02:17:52+00:00"
    },
    "projectUrl": "https://github.com/whitequark/binja_function_abi",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "whitequark",
    "dependencies": "",
    "description": "A plugin providing an analysis for Itanium C++ ABI.",
    "installinstructions": {},
    "lastUpdated": 1677683692,
    "license": {
      "name": "BSD-0-clause",
      "text": "Copyright (C) 2018 by whitequark\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "This plugin provides a custom demangler, an analysis that decodes mangled names and updates function signatures, and an analysis that decodes RTTI and vtables and discovers new procedures based on virtual function pointers.",
    "minimumbinaryninjaversion": 555,
    "name": "Itanium C++ ABI",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/698fdf13-bd91-49df-8957-f126bb8f590e/versions/66ecc4ce-5cd1-4bd8-b0dc-45f2b28bf5eb/platforms/1111/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/698fdf13-bd91-49df-8957-f126bb8f590e/versions/66ecc4ce-5cd1-4bd8-b0dc-45f2b28bf5eb/platforms/1111/download?notrack=1",
    "path": "whitequark_binja_itanium_cxx_abi",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-03-01 15:14:52+00:00"
    },
    "projectUrl": "https://github.com/whitequark/binja_itanium_cxx_abi",
    "subdir": "",
    "type": [
      "analysis"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "whitequark",
    "dependencies": "",
    "description": "A plugin providing the 16-bit Intel architecture.",
    "installinstructions": {},
    "lastUpdated": 1567626763,
    "license": {
      "name": "BSD-0-clause",
      "text": "Copyright (C) 2018 by whitequark\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "# Binary Ninja Intel 8086 plugin\n\nThe Intel 8086 plugin provides a 16-bit x86 architecture for Binary Ninja.\n\n## Features\n\nThis plugin decodes and lifts all original 8086 instructions. However, 80186 (and more recent) instructions such as `enter` and `leave` are not recognized. Non-well-formed instructions (including unrecognized opcodes and invalid addressing modes) are displayed as `unrecognized` and rejected during lifting.\n\nThe `pascal` and `cdecl` calling conventions are provided.\n\n![](screenshot.png)\n\n## License\n\n[0-clause BSD](LICENSE-0BSD.txt)\n",
    "minimumbinaryninjaversion": 555,
    "name": "Intel 8086 Architecture",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/35dd4c59-c82b-4c66-b4bd-c43dd7898ead/versions/92628cd4-a55b-4871-bb03-5cf3577e36a1/platforms/1117/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/35dd4c59-c82b-4c66-b4bd-c43dd7898ead/versions/92628cd4-a55b-4871-bb03-5cf3577e36a1/platforms/1117/download?notrack=1",
    "path": "whitequark_binjai8086",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2019-09-04 19:52:43+00:00"
    },
    "projectUrl": "https://github.com/whitequark/binja-i8086",
    "subdir": "",
    "type": [
      "arch"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "whitequark",
    "dependencies": "",
    "description": "A plugin providing the Renesas M16C architecture.",
    "installinstructions": {},
    "lastUpdated": 1579432976,
    "license": {
      "name": "BSD-0-clause",
      "text": "Copyright (C) 2020 by whitequark\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    "longdescription": "The Renesas M16C plugin provides the corresponding architecture for Binary Ninja.\n\nThis plugin decodes all M16C instructions and provides control flow analysis. It also detects with a high degree of confidence, and relocates raw binary M16C ROM dumps.\n\nThis plugin does not currently provide lifting or SFR definitions.",
    "minimumbinaryninjaversion": 1921,
    "name": "Renesas M16C Architecture",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/a3ec06d2-2776-404d-bb0c-b70b8d9c1a53/versions/a6e93b88-cc3c-4391-9fee-4dd02adff19c/platforms/1123/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/a3ec06d2-2776-404d-bb0c-b70b8d9c1a53/versions/a6e93b88-cc3c-4391-9fee-4dd02adff19c/platforms/1123/download?notrack=1",
    "path": "whitequark_binjam16c",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-01-19 11:22:56+00:00"
    },
    "projectUrl": "https://github.com/whitequark/binja-m16c",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Andrea Ferraris",
    "dependencies": "",
    "description": "Forward and backward instruction slicer",
    "installinstructions": {},
    "lastUpdated": 1606311678,
    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Andrea Ferraris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin allows to highlight the backward and forward slicing thanks to amazing _MLIL_ Binary Ninja rappresentation.\n\n It is based on the work of [Josh Watson](https://gist.github.com/joshwatson/f28b7a2d3356a0ed39823aaea66b50d0).",
    "minimumbinaryninjaversion": 1904,
    "name": "Instruction Slicer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b8427abd-00ac-452c-859f-63d0ff958cdd/versions/c1bda57f-b3b9-43c0-8ba6-27a6b0d62fa5/platforms/1129/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b8427abd-00ac-452c-859f-63d0ff958cdd/versions/c1bda57f-b3b9-43c0-8ba6-27a6b0d62fa5/platforms/1129/download?notrack=1",
    "path": "c3r34lk1ll3r_Instruction_Slicer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-11-25 13:41:18+00:00"
    },
    "projectUrl": "https://github.com/c3r34lk1ll3r/Instruction_Slicer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Hugo Porcher (@icecr4ck)",
    "dependencies": "",
    "description": "A loader and diassembler for Game Boy ROMs.",
    "installinstructions": {},
    "lastUpdated": 1605619920,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Hugo Porcher\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Game Boy loader and architecture plugin for Binary Ninja\nAuthor: **Hugo Porcher (icecr4ck)**\n\n## Description\n\nA Binary Ninja plugin to load Game Boy ROMs and disassemble Game Boy architecture bytecode (Sharp LR35902).\n\nThis plugin is based on the description of Game Boy CPU opcodes from [here](https://github.com/lmmendes/game-boy-opcodes).\n\n## Game Boy characteristics\n\n* CPU: 8-bit\n* RAM size: 8KB\n* Similar to Intel 8080 and 8085 as well as [Zilog Z80](https://en.wikipedia.org/wiki/Zilog_Z80) microprocessors\n* ROM structure\n\t* 0-0x100: program executed when the Game Boy is powered up\n\t* 0x100-0x103: entrypoint\n\t* 0x104-0x133: scrolling Nintendo graphic (needs to remain unchanged)\n\t* 0x134-0x14f: ROM header\n\t\t* 0x134-0x142: ROM title in uppercase ASCII\n\t\t* 0x143: GB Color (0x80) or GB classic (0)\n\t\t* 0x144-0x145: Licensee code (new)\n\t\t* 0x146: GB (0) or Super GB (3)\n\t\t* 0x147: cartridge type\n\t\t* 0x148: ROM size (number of banks from 2 to 96)\n\t\t* 0x149: RAM size (nb of banks from 0 to 16)\n\t\t* 0x14a: japanese code (0) or not (1)\n\t\t* 0x14b: licensee code (old)\n\t\t* 0x14c: mask ROM version number\n\t\t* 0x14d: complement check\n\t\t* 0x14e-014f: checksum \n\n## Installation\n\nRun the following command in your Binary Ninja plugins directory:\n```bash\ngit clone https://github.com/icecr4ck/bnGB.git\n```\n\n## Minimum version\n\nThis plugin has only been tested on the following version of Binary Ninja:\n\n* release - 1.2.1921\n\n## References\n\n* [Game Boy CPU manual](http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf)\n* [GB opcodes](https://github.com/lmmendes/game-boy-opcodes)  \n* [Using and writing Binary Ninja plugins](https://docs.binary.ninja/guide/plugins/index.html)\n* [Gameboy ROM header](https://www.zophar.net/fileuploads/2/10597teazh/gbrom.txt)\n\n## License\n\nThis plugin is released under a [MIT](LICENSE) license.\n",
    "minimumbinaryninjaversion": 1200,
    "name": "Game Boy Loader and Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/644f6f79-2d52-4160-95e7-93397ba513de/versions/a6b71491-d2dd-41dd-aa5c-6641e37a03bd/platforms/1135/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/644f6f79-2d52-4160-95e7-93397ba513de/versions/a6b71491-d2dd-41dd-aa5c-6641e37a03bd/platforms/1135/download?notrack=1",
    "path": "icecr4ck_bnGB",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-11-17 13:32:00+00:00"
    },
    "projectUrl": "https://github.com/icecr4ck/bnGB",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Galen Williamson",
    "dependencies": "",
    "description": "A disassembler and lifter for the Motorola 68k architecture.",
    "installinstructions": {},
    "lastUpdated": 1654890437,
    "license": {
      "name": "MIT",
      "text": "Copyright 2022 Alex Forencich, Galen Williamson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This plugin disassembles Motorola 68k machine code and generates LLIL.\\n\\nTo install this plugin, navigate to your Binary Ninja plugins directory, and run\\n\\n```git clone https://github.com/galenbwill/binaryninja-m68k.git m68k```",
    "minimumbinaryninjaversion": 3469,
    "name": "Motorola 68k Architecture Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7edfe20e-635e-42c5-99dc-4ebd2b8bcb59/versions/cf7cfbfe-1aa5-4254-8866-8f4723b50b88/platforms/1141/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7edfe20e-635e-42c5-99dc-4ebd2b8bcb59/versions/cf7cfbfe-1aa5-4254-8866-8f4723b50b88/platforms/1141/download?notrack=1",
    "path": "galenbwill_binaryninjam68k",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-06-10 19:47:17+00:00"
    },
    "projectUrl": "https://github.com/galenbwill/binaryninja-m68k",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "v0.5"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Jan Beck",
    "dependencies": "",
    "description": "This plugin removes some simple known obfuscation techniques to cut down on the tedium.",
    "installinstructions": {},
    "lastUpdated": 1591624575,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Binary Ninja plugin to clean up some common obfuscation techniques (dirty tricks). <br><br>There is an empty template included as well to be able to easily add your own, because there are many many obfuscations out there. However, often they get reused or slightly modified, and then it is useful to have a starting point/example. Pull requests are very welcome.<br><br>More details available at:<br><a href='https://www.janbeck.com/cybersecurity-challenges-ctfs-and-more/cleantricks-to-deal-with-dirty-tricks-binary-ninja-deobfuscation-plugin'>https://www.janbeck.com/cybersecurity-challenges-ctfs-and-more/cleantricks-to-deal-with-dirty-tricks-binary-ninja-deobfuscation-plugin</a><br><br>But as a simple example of what this is for, consider the following code:<br><br><img src='https://raw.githubusercontent.com/janbbeck/CleanTricks/master/readme_pics/code_before.png'><br><br>The overlapping code is hidden in the literal value, 0x5ebcbff49c3ff49. It simply increases r11, then decreases it again, then jumps to the address right behind the JZ check. I have come across a binary that uses this same trick on different registers thousands of times. This plugin allows automating this patch:<br><br><img src='https://raw.githubusercontent.com/janbbeck/CleanTricks/master/readme_pics/menu.png'><br><br>And then, after the patch, the code is much simpler. In many cases this allows binary ninja to reanalyze the program flow into a much more convienient form.<br><br><img src='https://raw.githubusercontent.com/janbbeck/CleanTricks/master/readme_pics/code_after.png'>",
    "minimumbinaryninjaversion": 1200,
    "name": "Clean Tricks",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/5566b1b2-7375-4081-a6b0-871b79917f14/versions/0faf6329-d8eb-4d19-aac9-f722c9855001/platforms/1147/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/5566b1b2-7375-4081-a6b0-871b79917f14/versions/0faf6329-d8eb-4d19-aac9-f722c9855001/platforms/1147/download?notrack=1",
    "path": "janbbeck_CleanTricks",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-06-08 13:56:15+00:00"
    },
    "projectUrl": "https://github.com/janbbeck/CleanTricks",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview",
      "core",
      "helper",
      "ui"
    ],
    "version": "1.4"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Katharina Utz",
    "dependencies": "",
    "description": "RISC-V architecture plugin.",
    "installinstructions": {},
    "lastUpdated": 1610977007,
    "license": {
      "name": "Apache-2.0",
      "text": "Copyright 2020 Katharina Utz\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "longdescription": "# bn-riscv\n\nAn architecture plug-in that allows binary ninja to load RISC-V ELF binaries.\n\n## Installation\n\nFirst, you will need an installation of [capstone](https://github.com/aquynh/capstone) that supports RISC-V. Currently you have to install the `next` branch, e.g.,:\n\n```\npip install --user 'git+https://github.com/aquynh/capstone.git@next#subdirectory=bindings/python'\n```\n\nThen drop this repository into your plugins directory manually. Note that you should use it from master if possible, releases are somewhat rare.\n",
    "minimumbinaryninjaversion": 0,
    "name": "bn-riscv",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/f9d86d94-f193-49e3-a31e-bf0d39325351/versions/4c5236c5-1644-447c-b25a-03132230e7da/platforms/1153/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/f9d86d94-f193-49e3-a31e-bf0d39325351/versions/4c5236c5-1644-447c-b25a-03132230e7da/platforms/1153/download?notrack=1",
    "path": "uniduesyssec_bnriscv",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-01-18 13:36:47+00:00"
    },
    "projectUrl": "https://github.com/uni-due-syssec/bn-riscv",
    "subdir": "",
    "type": [
      "architecture"
    ],
    "version": "0.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "SpecterDev",
    "dependencies": "",
    "description": "Allows users to import idc database dumps from IDA into Binary Ninja.",
    "installinstructions": {},
    "lastUpdated": 1665625261,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Making the switch from IDA to Binary Ninja but need your function names and symbols to carry over? This plugin will take an IDC file and automatically import the functions, strings, and comments. It doesn't require any additional plugins for IDA, just export from IDA to an IDC script file, and let this plugin do the work on Binary Ninja's end.",
    "minimumbinaryninjaversion": 2015,
    "name": "IDC Importer",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/b9d86a47-a791-4349-8d30-e878af2a2d0e/versions/2d20ce09-4f09-4731-acea-21db8b5da2b4/platforms/1159/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/b9d86a47-a791-4349-8d30-e878af2a2d0e/versions/2d20ce09-4f09-4731-acea-21db8b5da2b4/platforms/1159/download?notrack=1",
    "path": "Cryptogenic_idc_importer",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-10-13 01:41:01+00:00"
    },
    "projectUrl": "https://github.com/Cryptogenic/idc_importer",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "atxsinn3r",
    "dependencies": "",
    "description": "Dumps HLIL code to a directory",
    "installinstructions": {},
    "lastUpdated": 1591511295,
    "license": {
      "name": "BSD-3-Clause",
      "text": "Copyright (c) 2020, Wei Chen\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    "longdescription": "# Binary Ninja HLIL Dump\n\n## Description\n\nThis is a Binary Ninja plugin written in Python that allows you to decompile the whole binary,\nand then dump all that in a directory. There are some scenarios where this might be helpful,\nfor example:\n\n* Using your favorite text editor (such as Sublime) to read/find code.\n* Being able to `diff -u` source.\n* etc.\n",
    "minimumbinaryninjaversion": 2096,
    "name": "HLIL Dump",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/60f2ab64-c356-4fd8-8a10-e6441bfecf67/versions/e5e96790-6232-4e4c-80b6-b732abffe9e3/platforms/1165/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/60f2ab64-c356-4fd8-8a10-e6441bfecf67/versions/e5e96790-6232-4e4c-80b6-b732abffe9e3/platforms/1165/download?notrack=1",
    "path": "atxsinn3r_BinjaHLILDump",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-06-07 06:28:15+00:00"
    },
    "projectUrl": "https://github.com/atxsinn3r/BinjaHLILDump",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "lunixbochs",
    "dependencies": "",
    "description": "Realtime IDA Pro and Binary Ninja sync plugin",
    "installinstructions": {},
    "lastUpdated": 1589418636,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2019 lunixbochs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "revsync\n=======\n\nRealtime IDA Pro and Binary Ninja sync plugin\n\nSyncs:\n\n- Comments\n- Symbol names\n- Stack var names\n- Structs\n- Code coverage (how much time was spent looking at a block)\n\n\nBinary Ninja Installation\n-------------------------\n\n- Install via the Plugin Manager (CMD/CTL-SHIFT-M)\n\nor:\n\n- Clone to [your plugin folder](https://github.com/Vector35/binaryninja-api/tree/dev/python/examples#loading-plugins).\n\nThen:\n\n- Restart if required.\n- Fill in config when prompted.\n- Load your binary, wait for analysis to finish\n- Use the Tools Menu, Right-Click or command-palette (CMD/CTL-P) to trigger revsync/Load\n-Done!\n",
    "minimumbinaryninjaversion": 1528,
    "name": "revsync",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/0f0199e0-c306-4fb4-9ae8-6c68889c5258/versions/18a33453-99cb-4e30-a269-53b6fd2f40f4/platforms/1171/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/0f0199e0-c306-4fb4-9ae8-6c68889c5258/versions/18a33453-99cb-4e30-a269-53b6fd2f40f4/platforms/1171/download?notrack=1",
    "path": "lunixbochs_revsync",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-05-14 01:10:36+00:00"
    },
    "projectUrl": "https://github.com/lunixbochs/revsync",
    "subdir": "",
    "type": [
      "ui"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "toolCHAINZ",
    "dependencies": "",
    "description": "DUMB: An Example Architecture for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1583087498,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 toolCHAINZ\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "![DUMB logo](https://raw.githubusercontent.com/toolCHAINZ/DUMB/master/dumb.svg?sanitize=true =400x800)\r\n\r\nThis is a very simple architecture (and executable format) made for the purpose of teaching how to write Binja loaders and architectures.\r\n\r\nMy hope for this repo is that it can be a simple teaching resource for this topic. While it covers the basics, it leaves some important topics (like flags) uncovered. PRs welcome!\r\n\r\nAn example \"firmware image\" is included [here](https://github.com/toolCHAINZ/DUMB/blob/master/test.bin)\r\n\r\n# DUMB Architecture\r\n\r\nFollowing is a description of the architecture. In this document, we use the following format to specify bitfields:\r\n\r\n`0:xxyy` represents a single byte: `0` means that the first (upper) nibble of the byte is zero, while `xxyy` indicates two 2-bit fields making up the lower nibble of the byte.\r\n\r\n## Registers\r\n\r\n* `sp` (stack pointer)\r\n* `r0` (GPR)\r\n* `r1` (GPR)\r\n* `r2` (GPR)\r\n* `r3` (GPR)\r\n\r\n## Instructions\r\n\r\n### One Byte Instructions\r\n\r\n| Format   | Tokenization  | Meaning                                                              |\r\n| -------- | ------------  | ------------------------------------                                 |\r\n| `0:xxyy` | `mov rx ry`   | Move the value in `ry` into `rx`                                     |\r\n| `1:xxyy` | `add rx ry`   | Add the values of `ry` and `rx` and store the result in `rx`         |\r\n| `2:xxyy` | `and rx ry`   | And the values of `ry` and `rx` and store the result in `rx`         |\r\n| `3:xxyy` | `or rx ry`    | Or the values of `ry` and `rx` and store the result in `rx`          |\r\n| `4:xxyy` | `xor rx ry`   | Xor the values of `ry` and `rx` and store the result in `rx`         |\r\n| `9:____` | `ret`         | Return from the current function to the address stored on the stack. |\r\n\r\n### Five Byte Instructions\r\n| Format               |  Tokenization          |   Meaning                                                                        |\r\n| -------------------- | ---------------------- | -------------------------------------------------------------------------------- |\r\n| `a0 XX XX XX XX`     | `call XXXXXXXXX`       | Push `addr + 5` onto the stack and transfer execution to `XXXXXXXX` (little endian dword) |\r\n| `7:xxyy XX XX XX XX` | `jlt rx, ry, XXXXXXXX` | If `rx` is less than `ry`, jump to `XXXXXXXX`, otherwise continue to next instr  |\r\n| `8:__rr XX XX XX XX` | `mov rr, XXXXXXXX`     | Move the immediate `XXXXXXXX` into `rr`                                          |\r\n\r\n# DUMB Format\r\n\r\nDUMB files are extremely simple, containing only magic, and metadata for a single section. The format is as follows:\r\n\r\n| Offset | Length | Contents (if applicable) | Description                                                |\r\n| ------ | ------ | ------------------------ | ---------------------------------------------              |\r\n| 0      | 4      | \"`DUMB`\"                 | Magic                                                      |\r\n| 4      | 4      |          N/A             | Section length stored as little endian dword               |\r\n| 8      | 4      |            N/A           | Address to load section at, stored as little endian dword  |\r\n\r\n",
    "minimumbinaryninjaversion": 1921,
    "name": "DUMB",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/35c7cb1d-a1cb-4687-abc1-46e0cdc27294/versions/75798629-f31d-454a-9691-015c1bdd0e22/platforms/1177/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/35c7cb1d-a1cb-4687-abc1-46e0cdc27294/versions/75798629-f31d-454a-9691-015c1bdd0e22/platforms/1177/download?notrack=1",
    "path": "toolCHAINZ_DUMB",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-03-01 18:31:38+00:00"
    },
    "projectUrl": "https://github.com/toolCHAINZ/DUMB",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.0.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "toolCHAINZ",
    "dependencies": "argparse-addons==0.12.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nbincopy==17.14.5 ; python_version >= \"3.10\" and python_version < \"4.0\"\nhumanfriendly==10.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npyelftools==0.31 ; python_version >= \"3.10\" and python_version < \"4.0\"\npyreadline3==3.4.1 ; sys_platform == \"win32\" and python_version >= \"3.10\" and python_version < \"4.0\"\n",
    "description": "A simple loader for Motorola SREC, Intel HEX, and TI-TXT files.",
    "installinstructions": {},
    "lastUpdated": 1712700818,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020-2023 toolCHAINZ\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Hexfiles\n\n `hexfiles` provides a simple `BinaryView` for \"Hex\" files (Motorola SREC, Intel Hex, TI-TXT). The actual parsing of hex files is offloaded to the excellent Python library `bincopy`. For now, this `BinaryView` is read-only (patches will not be saved back into the source hex file). Will hopefully add that soon.",
    "minimumbinaryninjaversion": 2170,
    "name": "hexfiles",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9c65b696-8569-4e8c-9b57-6ea4da72d45f/versions/ab8df9ab-ce93-43bc-bad7-1284abc97919/platforms/1183/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9c65b696-8569-4e8c-9b57-6ea4da72d45f/versions/ab8df9ab-ce93-43bc-bad7-1284abc97919/platforms/1183/download?notrack=1",
    "path": "toolCHAINZ_hexfiles",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-04-09 22:13:38+00:00"
    },
    "projectUrl": "https://github.com/toolCHAINZ/hexfiles",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.3.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Meador Inge",
    "dependencies": "wasamole==0.5.0\n",
    "description": "This is a plugin for disassembling and lifting WASM images..",
    "installinstructions": {},
    "lastUpdated": 1593544951,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2019 Meador Inge\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "This is a plugin for disassembling and lifting WASM images..",
    "minimumbinaryninjaversion": 2170,
    "name": "WASM Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e7198c17-116d-49bb-b98b-f7e604febb11/versions/55bd814b-2b55-4a53-91e2-7e15665e5abe/platforms/1189/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e7198c17-116d-49bb-b98b-f7e604febb11/versions/55bd814b-2b55-4a53-91e2-7e15665e5abe/platforms/1189/download?notrack=1",
    "path": "ivisionresearch_binjawa",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-06-30 19:22:31+00:00"
    },
    "projectUrl": "https://github.com/ivision-research/binjawa",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "0.5.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Layle",
    "dependencies": "",
    "description": "Integrates the VTIL (Virtual-machine Translation Intermediate Language) Project with Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1593911011,
    "license": {
      "name": "BSD-3-Clause",
      "text": "Copyright (c) 2020, Can B\u00f6l\u00fck\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n* Neither the name of [project] nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
    },
    "longdescription": "# VTIL-BinaryNinja\nVTIL meets Binary Ninja and provides you with a solution to analyze VTIL code in a less painful manner.\n\nNote: If you default to an IL view, you will need to manaually make sure you select an Assembly view as this plugin does not have any lifting at this time.\n\n## Installation\nInstall via the Plugin Manager in Binary Ninja, or clone this repository into your [plugin folder](https://docs.binary.ninja/guide/plugins.html#using-plugins).\n\n## Screenshots\n![](https://raw.githubusercontent.com/psifertex/VTIL-BinaryNinja/master/images/example.png)\n\n## Dislcaimer\nThis is a **very early proof of concept**. Expect bugs.  \n\nKnown issues:\n- Only one VTIL file supported per Binary Ninja process\n- Goto labels are not clickable\n",
    "minimumbinaryninjaversion": 1528,
    "name": "VTIL Plugin",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/9d058a2f-7fd7-4612-a624-778febbc8451/versions/5907ac0e-4abe-4d6d-bc2a-e80793c76dbc/platforms/1195/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/9d058a2f-7fd7-4612-a624-778febbc8451/versions/5907ac0e-4abe-4d6d-bc2a-e80793c76dbc/platforms/1195/download?notrack=1",
    "path": "vtilproject_VTILBinaryNinja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-07-05 01:03:31+00:00"
    },
    "projectUrl": "https://github.com/vtil-project/VTIL-BinaryNinja",
    "subdir": "",
    "type": [
      "architecture",
      "binaryview"
    ],
    "version": "1.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Luca Borzacchiello",
    "dependencies": "z3-solver\n",
    "description": "Symbolic execution plugin for BinaryNinja",
    "installinstructions": {},
    "lastUpdated": 1708789429,
    "license": {
      "name": "2-Clause BSD",
      "text": "Copyright 2019-2024 Luca Borzacchiello\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    "longdescription": "# SENinja - Symbolic Execution Plugin for Binary Ninja\n\n![](https://github.com/borzacchiello/seninja/raw/master/media/pictures/screenshot.png)\nThis is a binary ninja plugin that implements a symbolic execution engine based only on z3, highly inspired by the _angr framework_ (https://angr.io/). \nThe plugin is implemented as an emulator of LLIL instructions that builds and manipulates z3 formulas.\n\nSENinja simulates a debugger: the execution is _path driven_, only one state is _active_ and executes instructions. The other states, generated at branches, are saved in a _deferred queue_. At any time, the active state can be changed with a deferred one.\n\n### UI Widgets\n\nSENinja comes with a side-panel widget that can be used to start and control the execution using the following buttons:\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/start.svg\" alt=\"\" width=\"10\"/>: start the execution\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/stepinto.svg\" alt=\"\" width=\"10\"/>: step the current state\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_branch.svg\" alt=\"\" width=\"10\"/>: run until branch\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_addr.svg\" alt=\"\" width=\"10\"/>: execute the current state until the currently selected address\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_dfs.svg\" alt=\"\" width=\"10\"/>: start a DFS search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_bfs.svg\" alt=\"\" width=\"10\"/>: start a BFS search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/set_target.svg\" alt=\"\" width=\"10\"/>: set the currently selected address as the target of the search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/set_avoid.svg\" alt=\"\" width=\"10\"/>: avoid the currently selected address during a search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/reset_searchers.svg\" alt=\"\" width=\"10\"/>: reset targets and avoid addresses\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/stop.svg\" alt=\"\" width=\"10\"/>: stop a search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/cancel.svg\" alt=\"\" width=\"10\"/>: reset SENinja\n",
    "minimumbinaryninjaversion": 3500,
    "name": "SENinja",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/8b34566a-d8d6-474e-a74c-73a413feed73/versions/7ed2ec77-ebcc-4e40-9940-41756b750655/platforms/1207/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/8b34566a-d8d6-474e-a74c-73a413feed73/versions/7ed2ec77-ebcc-4e40-9940-41756b750655/platforms/1207/download?notrack=1",
    "path": "borzacchiello_seninja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-02-24 15:43:49+00:00"
    },
    "projectUrl": "https://github.com/borzacchiello/seninja",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.5.0"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "Ben Pottier",
    "dependencies": "",
    "description": "A plugin to detect several common crypto constructs and magic vars.",
    "installinstructions": {},
    "lastUpdated": 1695375186,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2018 Ben Pottier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "BinaryNinja CryptoScan\n======================\nPlugin for [Binary Ninja](https://binary.ninja/) platform\n\n## General\nThis Binja plugin is effectively trying to replicate [findcrypt](https://github.com/you0708/ida/tree/master/idapython_tools/findcrypt) functionality. It supports a larger range of constants.\n\n## Features\n### Overview\nThe plugin registers a single call that is accessible from the 'Tools' menu or by right-clicking in the main binary view window. \n\nScan configurations are reloaded on _every_ call to the scan function. This means you can CRUD json config files and rescan immediately. \n\nThe plugin supports the following types of scans:\n\n - Scanning for constants in data \n - Scanning for constants in the IL \n\n Will additionally add a tag at each identified location with the family name as the data.\n\n### Supported cryptography\n\nThe following constants are defined in scan configurations:\n\n - AES: sboxes, td0-4, te0-4\n - ARIA: sbox2, sbox4 (1 and 3 are equal to Rijndael)\n - BLAKE: 224, 256, 384 and 512 inits \n - Blowfish: p_array and sbox\n - CRC32: lzma tables 0-7, m_tab_le and m_tab_be, ms_table0-6\n - DES: p32i, pc1_left, pc1_right, pc2, sbox1-8\n - DFC: sbox\n - Elliptic Curves: p-192, p-224, p-256, p-384, p-521, Curve25519\n - IKE: modp group shared component\n - KASUMI: key expansion mod, sbox_s7, sbox_s9\n - MD5: initstate and md5_t\n - NewDES: sbox\n - RC5/RC6: combined constant\n - Salsa20: sigma and tau\n - SHA1: h\n - SHA224: h\n - SHA256: both k and h \n - SHA512: h\n - SM3: init\n - SM4: sbox, ck and fk\n - TEA: delta\n - Mersenne Twister: 19937 edition\n - Zlib: distance_starts, distance_extrabits, length_starts, length_extrabits\n\n### Reporting\nIf any matches are identified a Markdown (for GUI) or text (for CLI) report will be shown, listing which scans were matched, what family they belong to as well as the address in the binary.\nThe aim of the report was to allow easy copy-pasting of the address for use with the 'Go to address...' function. \n\nWhilst data matches only contain the address at which the constant is defined, IL matches will also indicate the function they were discovered in.\n\n### Configuration\nIndividual scan configurations are kept in the scans subfolder. The following fields are required in the JSON:\n\n - name: short name for the scan\n - description: long name or description, only for author's quality of life \n - threshold: for multi-byte constants, minimum amount of n-sized chunks that must be found (e.g. when loading chunked in registers) \n - type: static or signature (signatures are currently not implemented though)\n - flags: array of single byte strings, usually 4 bytes but no upper bound is set. You can now add null bytes. \n - on_match: object with subfields\n   - type: symbol is the only supported value right now, adds a symbol at the detected address\n   - name: name to give to the symbol\n\n## TODO\n- [x] Add more constants \n- [x] Make CryptoScan run in the background\n- [x] Deal with null bytes in the flags better\n- [ ] Flesh out how signature detection will work\n- [ ] Refactor data scanning to improve speed on very large binaries \n",
    "minimumbinaryninjaversion": 4526,
    "name": "cryptoscan",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/93c3c9bb-8020-4181-9de0-cf300b6b2d49/versions/ca70cbb7-fc17-47c2-a14d-ef9ca806e3a4/platforms/1213/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/93c3c9bb-8020-4181-9de0-cf300b6b2d49/versions/ca70cbb7-fc17-47c2-a14d-ef9ca806e3a4/platforms/1213/download?notrack=1",
    "path": "Rami114_cryptoscan",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2023-09-22 09:33:06+00:00"
    },
    "projectUrl": "https://github.com/Rami114/cryptoscan",
    "subdir": "",
    "type": [
      "ui",
      "binaryview"
    ],
    "version": "1.2"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Francesco Muroni",
    "dependencies": "",
    "description": "Deobufscate API calls and strings in unpacked Emotet samples.",
    "installinstructions": {},
    "lastUpdated": 1600725169,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2020 Francesco Muroni\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "Helper plugin for the analysis of unpacked Emotet samples. Locate dynamically imported API functions and add tags to make them easily searchable. Replace obfuscated strings with their original value.",
    "minimumbinaryninjaversion": 1200,
    "name": "Emotet API+string deobfuscator",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/4f836913-9d56-46bc-9d8c-eb3ce2f40f94/versions/4d00e4c7-100d-425f-9943-c91f6bb341fc/platforms/1219/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/4f836913-9d56-46bc-9d8c-eb3ce2f40f94/versions/4d00e4c7-100d-425f-9943-c91f6bb341fc/platforms/1219/download?notrack=1",
    "path": "mauronz_binjaemotet",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-09-21 21:52:49+00:00"
    },
    "projectUrl": "https://github.com/mauronz/binja-emotet",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "Blackwing Intelligence",
    "dependencies": "",
    "description": "Binary View for loading iBoot, SecureROM, etc. firmware",
    "installinstructions": {},
    "lastUpdated": 1601588122,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 Blackwing Intelligence\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# iBoot64Binja (v1.0.1)\n\n_Binary View for loading iBoot, SecureROM, etc. firmware_\n\n![](https://user-images.githubusercontent.com/6217759/94852197-83531e00-03f7-11eb-95c7-0f0f500fb004.png)\n\n## Description \nBinary Ninja Binary View plugin for analyzing iBoot, SecureROM, etc. heavily inspired by [argp's iBoot64helper IDA loader](https://github.com/argp/iBoot64helper).    \n- Identifies iBoot / SecureROM firmwares    \n- Finds target load address and performs rebase for accurate analysis    \n- Restores some interesting symbols based on various heuristics\n\n## Installation Instructions\n\n### Darwin\n\nCopy to `~/Library/Application Support/Binary Ninja/plugins/` or use Plugin Manager\n\n### Windows\n\nCopy to `%APPDATA%\\Binary Ninja\\plugins` or use Plugin Manager\n\n### Linux\n\nCopy to `~/.binaryninja/plugins/` or use Plugin Manager\n\n## Minimum Version\n\nThis plugin has been tested with the following minimum version of Binary Ninja:\n\n* 2.1.2263\n\n## Documentation\n\nDocumentation on current heuristics, etc. is [here](docs/docs.md).\n\n## License\n\nThis plugin is released under a MIT license.\n\n## Acknowledgments\n\n- Argp's [iBoot64Helper](https://github.com/argp/iBoot64helper) iBoot loader for IDA Pro inspired the initial development of this plugin\n- [binja_sigmaker](https://github.com/apekros/binja_sigmaker) inspired the current wildcard signature matching for the `bytesig` heuristic",
    "minimumbinaryninjaversion": 2170,
    "name": "iBoot64 Loader",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/e879fd8e-e121-4372-b703-739b2a99d6dc/versions/a02322bb-a17e-4213-9981-34787f31639c/platforms/1225/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/e879fd8e-e121-4372-b703-739b2a99d6dc/versions/a02322bb-a17e-4213-9981-34787f31639c/platforms/1225/download?notrack=1",
    "path": "BlackwingHQ_iBoot64Binja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2020-10-01 21:35:22+00:00"
    },
    "projectUrl": "https://github.com/BlackwingHQ/iBoot64Binja",
    "subdir": "",
    "type": [
      "binaryview"
    ],
    "version": "1.0.1"
  },
  {
    "api": [
      "python3"
    ],
    "author": "catnip",
    "dependencies": "",
    "description": "binary ninja plugin for abusing logging functions",
    "installinstructions": {},
    "lastUpdated": 1615283793,
    "license": {
      "name": "MIT",
      "text": "Copyright 2020 log rename\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# Logrn\r\n## binary ninja plugin for abusing logging functions\r\nbasically the same as [this plugin](https://github.com/404d/autoutils) but improved\r\n\r\nyou find a logging function which takes the current function as an argument. example:\r\n\r\n![](https://cdn.discordapp.com/attachments/675073564508028968/760946073542983710/unknown.png)\r\n\r\nwhile the logging function is selected, you run the command `rename callers to arg`\r\n\r\n![](https://cdn.discordapp.com/attachments/675073564508028968/760946299943124992/unknown.png)\r\n\r\nit asks you what the name of the param is which will get the function name\r\n\r\n![](https://cdn.discordapp.com/attachments/675073564508028968/760946419254689873/unknown.png)\r\n\r\nin this case `func_str`.\r\nthen it searches for every call of this logging function in the binary, get the parameter which holds the name of the function and renames the caller to that string. boom 2500 new symbols\r\n\r\n\r\n# Important\r\n\r\nKeep in mind functions you have already named will get renamed. Why? because func.auto had a huge amount of false positives in my testing leading to a huge amount of functions not getting renamed. I dont know why thats a thing.\r\n\r\nFunctions with multiple calls to the logging function will get the name of the first call. Why? because in my experience, most of the time the log function will get called multiple times with the same function name. If i were to ignore ambiguous calls, id miss a whole lot of symbols. Inlines tend to not be at the beginning of the function which is also good. Now i could check if all calls are the same but i would miss functions with inline calls that are not at the beginning of the function and a few wrongly named functions are worth that compromise imo. Just keep in mind the name is not guarenteed to be correct.\r\n\r\nIts a background task so it wont freeze binja.\r\n\r\nI know that when entering nothing in the prompt, there will be an exception. I dont care :p. If you do, make a pull request.",
    "minimumbinaryninjaversion": 2263,
    "name": "logrn",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/43219ed9-4a73-4605-a5bc-590f6205fedb/versions/cdd7a97d-f1bd-472c-a796-c2bd6dad701d/platforms/1231/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/43219ed9-4a73-4605-a5bc-590f6205fedb/versions/cdd7a97d-f1bd-472c-a796-c2bd6dad701d/platforms/1231/download?notrack=1",
    "path": "sumcatnip_logrn",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-03-09 09:56:33+00:00"
    },
    "projectUrl": "https://github.com/sum-catnip/logrn",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0.2"
  },
  {
    "api": [
      "python2",
      "python3"
    ],
    "author": "lwerdna",
    "dependencies": "",
    "description": "Add \"call shellcode\" menu option which executes highlighted bytes.",
    "installinstructions": {},
    "lastUpdated": 1617425565,
    "license": {
      "name": "Unlicense",
      "text": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>"
    },
    "longdescription": "Add \"call shellcode\" menu option which executes highlighted bytes.\n\n![preview](./preview.gif)\n\n## How does it work?\n\n1. plugin (__init__.py) calls thunk.doit() with your selection\n2. thunk (thunk.py) uses ctypes to load one of {callbuf.dylib, callbuf.dll, callbuf.so}\n3. thunk (thunk.py) uses ctypes to call callbuf!doit() with your selection\n4. callbuf (callbuf/callbuf.c) allocates memory, sets permissions, and calls your selection\n\n## Installation Instructions\n\nThe prebuild and included callbuf.dylib, callbuf.dll, and callbuf.so are provided for the three OS's.\n\nIf they don't work, you can compile them yourself. It's less than 100 lines and there are no dependencies. See Makefile-macos, Makefile-linux, and Makefile-windows in the callbuf directory.\n\n\n",
    "minimumbinaryninjaversion": 2660,
    "name": "Call Shellcode",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/559a7e23-2244-45e9-ae4a-4971c4db5163/versions/b380eacb-9eee-48a5-ba19-d101f21578bf/platforms/1237/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/559a7e23-2244-45e9-ae4a-4971c4db5163/versions/b380eacb-9eee-48a5-ba19-d101f21578bf/platforms/1237/download?notrack=1",
    "path": "lwerdna_call_shellcode",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-04-03 04:52:45+00:00"
    },
    "projectUrl": "https://github.com/lwerdna/call_shellcode",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "lwerdna",
    "dependencies": "capstone\nkeystone-engine\n",
    "description": "Remake of keypatch plugin for Binary Ninja",
    "installinstructions": {},
    "lastUpdated": 1706199641,
    "license": {
      "name": "Unlicense",
      "text": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>"
    },
    "longdescription": "Remake of [keypatch](https://github.com/keystone-engine/keypatch) plugin for Binary Ninja.\n\nPython != 3.10 is needed on arm64 macs to avoid install issues with keystone-engine.\n\n![](./preview.png)\n\n* assemble using [keystone](https://www.keystone-engine.org/)\n* fill areas with instructions or arbitrary bytes\n* search for instructions or bytes, with regular expressions\n\nThe plugin manager only installs and updates at release boundaries. If you want the hottest freshest code, navigate to your [plugins folder](https://docs.binary.ninja/guide/plugins.html) and clone this repo to get started, pull to update.\n\n## Developer Notes\n\nhttps://docs.binary.ninja/dev/plugins.html\n\nTests that must pass before PR considered, release made, etc.\n\n* file -> new binary data -> 1f 20 03 d5 1f 20 03 d5 1f 20 03 d5 1f 20 03 d5 (right click, paste from, raw hex)\n* create aarch64 function, now use keypatch to assemble at 0, 4, 8, and C the instruction `bl 0x1000`\n* fill from [0x4, 0xc) with manually entered bytes AA AA AA AA and get two `orn x10, x21, x10, asr #0x2a`\n* now fill from [0x4, 0xc) with assembled `nop`\n* now search for `1f .*? d5` and it should hit at every nop (at 4 and 8)\n",
    "minimumbinaryninjaversion": 2660,
    "name": "keypatch",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/7e6cdcda-02fb-4301-ac85-e0cac5028620/versions/23db4022-1fb7-477e-95bd-208e16fc8031/platforms/1243/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/7e6cdcda-02fb-4301-ac85-e0cac5028620/versions/23db4022-1fb7-477e-95bd-208e16fc8031/platforms/1243/download?notrack=1",
    "path": "lwerdna_keypatch_binja",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2024-01-25 16:20:41+00:00"
    },
    "projectUrl": "https://github.com/lwerdna/keypatch_binja",
    "subdir": "",
    "type": [
      "ui",
      "helper"
    ],
    "version": "1.7"
  },
  {
    "api": [
      "python3"
    ],
    "author": "actae0n",
    "dependencies": "",
    "description": "XNU Sysctl Hunter is a tool for analyzing Kexts that will automatically identify, type, and tag sysctl OIDs, as well as correct the prototypes of their OID handler functions. It contains a Binary Ninja plugin action, as well as a headless script for cli...",
    "installinstructions": {},
    "lastUpdated": 1626914641,
    "license": {
      "name": "MIT",
      "text": "Copyright 2021 actae0n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "XNU Sysctl Hunter\n====================\nXNU Sysctl Hunter is a tool for analyzing Kexts that will automatically identify, type, and tag sysctl OIDs, as well as correct the prototypes of their OID handler functions. It contains a Binary Ninja plugin action, as well as a headless script for batch processing.\n\n# Screenshots\nOID structures are created, and their location is tagged for review later. A comment denotes the path to the OID in the MIB tree:\n![Tagged OIDs](screenshots/tagged_oids.png?raw=true \"OIDs get tagged\")\n\nOID handler function prototypes are corrected:\n![Prototypes Corrected](screenshots/prototype.png?raw=true \"OID Handler Prototypes Corrected\")\n\n## Headless Usage\nCall it from the command line targeting a single kext:\n```\n$ ./hunter.py /System/Library/Extensions/L2TP.kext\n[*] Creating necessary type definitions\n[*] Creating OID structs\n[+] Identified 3 sysctl OIDs\n[*] Tagging OIDs\n[*] Correcting prototype for 1 OID handlers\n[*] Dumping OIDs\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"handler\": \"_\", \"name\n\": \"nb_threads\", \"description\": \"nb_threads\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.nb_threads\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"name\": \"thread_outq_\nsize\", \"description\": \"thread_outq_size\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.thread_outq_size\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_OID2\", \"CTLTYPE_NODE\"], \"type\": \"container\", \"name\": \"l2tp\", \"description\": \"l2tp\", \"fmt\": \"N\"\n, \"path\": \"net.ppp.l2tp\"}\n```\n\nSuppress status lines with the `quiet` option:\n```\n$ ./hunter.py -q /System/Library/Extensions/L2TP.kext\n\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"handler\": \"_\", \"name\n\": \"nb_threads\", \"description\": \"nb_threads\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.nb_threads\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"name\": \"thread_outq_\nsize\", \"description\": \"thread_outq_size\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.thread_outq_size\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_OID2\", \"CTLTYPE_NODE\"], \"type\": \"container\", \"name\": \"l2tp\", \"description\": \"l2tp\", \"fmt\": \"N\"\n, \"path\": \"net.ppp.l2tp\"}\n```\n\nSave the BNDB for more reversing later (OIDs are marked in the Tags section):\n```\n$ ./hunter.py -q -o /tmp/ /System/Library/Extensions/L2TP.kext\n\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"handler\": \"_\", \"name\n\": \"nb_threads\", \"description\": \"nb_threads\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.nb_threads\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_NOAUTO\", \"CTLFLAG_KERN\", \"CTLFLAG_OID2\", \"CTLTYPE_INT\"], \"type\": \"leaf\", \"name\": \"thread_outq_\nsize\", \"description\": \"thread_outq_size\", \"fmt\": \"I\", \"path\": \"net.ppp.l2tp.thread_outq_size\"}\n{\"flags\": [\"CTLFLAG_RD\", \"CTLFLAG_WR\", \"CTLFLAG_OID2\", \"CTLTYPE_NODE\"], \"type\": \"container\", \"name\": \"l2tp\", \"description\": \"l2tp\", \"fmt\": \"N\"\n, \"path\": \"net.ppp.l2tp\"}\n\n$ ls /tmp/\nL2TP.kext.bndb\n```\n\nBatch process a whole directory of Kexts and save the results\n```\n$ ./hunter.py -q -o ./bndbs /System/Library/Extensions/*\n```\n\nFilter JSON output to analyze attributes in bulk\n```\n$ ./hunter.py -q /System/Library/Extensions/L2TP.kext | jq -r '.path'\nnet.ppp.l2tp.nb_threads\nnet.ppp.l2tp.thread_outq_size\nnet.ppp.l2tp\n```\n",
    "minimumbinaryninjaversion": 2805,
    "name": "XNU Sysctl Hunter",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/923ad53c-2482-493b-a328-b28039c3191d/versions/0e97520a-69fd-4212-a9c7-a9f8ab71b588/platforms/1249/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/923ad53c-2482-493b-a328-b28039c3191d/versions/0e97520a-69fd-4212-a9c7-a9f8ab71b588/platforms/1249/download?notrack=1",
    "path": "xpcmdshell_SysctlHunter",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2021-07-22 00:44:01+00:00"
    },
    "projectUrl": "https://github.com/xpcmdshell/SysctlHunter",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1.0"
  },
  {
    "api": [
      "python3"
    ],
    "author": "b0bb",
    "dependencies": "",
    "description": "Quality of life utilities for obsessive compulsive CTF enthusiasts.",
    "installinstructions": {},
    "lastUpdated": 1645134987,
    "license": {
      "name": "MIT",
      "text": "Copyright (c) 2022 b0bb\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    "longdescription": "# 0CD\nAuthor: **b0bb**\n\nQuality of life utilities for the obsessive compulsive CTF enthusiasts.\n\n## Description:\nThis plugin is a collection of small quality of life improvements that come up in CTFs or other similar toy problems. Some included utilities include:\n\n**Stack Guards**  \nThis utility will clean up those ugly looking stack canaries your eyes always skip over.\n\n![stack guards](https://github.com/0xb0bb/0CD/blob/main/images/stackguards.png?raw=true)\n \n\n## License\n\nThis plugin is released under an [MIT license](./license).\n",
    "minimumbinaryninjaversion": 3164,
    "name": "0CD",
    "packageShortUrl": "http://extensions.localhost/v1/extensions/c987636f-2d2e-4252-aed8-09adf6def56e/versions/8f4f81db-de8e-4140-b7eb-07b4660a965b/platforms/757/download",
    "packageUrl": "http://extensions.localhost/v1/extensions/c987636f-2d2e-4252-aed8-09adf6def56e/versions/8f4f81db-de8e-4140-b7eb-07b4660a965b/platforms/757/download?notrack=1",
    "path": "0xb0bb_0CD",
    "platforms": [
      "Darwin",
      "Linux",
      "Windows"
    ],
    "pluginmetadataversion": 2,
    "projectData": {
      "stargazers_count": 0,
      "updated_at": "2022-02-17 21:56:27+00:00"
    },
    "projectUrl": "https://github.com/0xb0bb/0CD",
    "subdir": "",
    "type": [
      "helper"
    ],
    "version": "0.1"
  }
]